<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title></title>
      <link href="/post/0.html"/>
      <url>/post/0.html</url>
      
        <content type="html"><![CDATA[<h1>CTF中的LFSR类题目</h1><h2 id="题型：给出反馈函数和输出序列-反推出初始状态"><strong>题型</strong>：给出<strong>反馈函数</strong>和<strong>输出序列</strong>，反推出<strong>初始状态</strong></h2><h3 id="2018-ciscn-线上赛-oldstreamgame">2018 CISCN 线上赛 oldstreamgame</h3><h4 id="题目">题目</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">flag <span class="token operator">=</span> <span class="token string">"flag&#123;xxxxxxxxxxxxxxxx&#125;"</span><span class="token keyword">assert</span> flag<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> flag<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">14</span><span class="token keyword">def</span> <span class="token function">lfsr</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#0xffffffff -->32位  '0b101100100000011110110001</span>    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>    i<span class="token operator">=</span><span class="token punctuation">(</span>R<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span>    lastbit<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span>    output<span class="token operator">^</span><span class="token operator">=</span>lastbit    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">,</span>lastbit<span class="token punctuation">)</span><span class="token comment">#将提取的子字符串解析为一个十六进制数，并将其转换为对应的整数类型。</span>R<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> <span class="token number">0b10100100000010000000100010010100</span>      <span class="token comment">#0b11111111111111111111111111111111'(0xffffffff前32位)</span>      <span class="token comment">#  00010110000011111011100101001010</span>f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"w"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>R<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token operator">=</span>lfsr<span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span>        tmp<span class="token operator">=</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>out    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># #将lfsr输出的序列每8个二进制为一组，转化为字符，共12组</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题解">题解</h4><p><code>0xffffffff</code> --&gt;32位的常数    <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi>b</mi><mn>11111111111111111111111111111111</mn></mrow><annotation encoding="application/x-tex">0b11111111111111111111111111111111</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mord mathdefault">b</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span><span class="mord">1</span></span></span></span>  按位与运算（同1才为1）与<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mn>0</mn><mi>x</mi><mi>f</mi><mi>f</mi><mi>f</mi><mi>f</mi><mi>f</mi><mi>f</mi><mi>f</mi><mi>f</mi></mrow><annotation encoding="application/x-tex">0xffffffff</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord">0</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span></span></span></span>做按与运算，结果为原数低32位，<br>R（flag）是32位的初始状态</p><p><code>output = (R &lt;&lt; 1) &amp; 0xffffffff</code> 把R左移一位后低32位（即抹去R的最高位）</p><p><code>i=(R&amp;mask)&amp;0xffffffff</code></p><p>#把传入的R和mask做按位与运算，运算结果取低32位，将该值赋给i变量。</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#从i的最低位向i的最高位依次做异或运算，将运算结果赋给lastbit变量。</span>    lastbit<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span>        <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/post/0/image-20230715202517521.png" alt="image-20230715202517521"></p><p>i&amp;1的作用是从低到高取出每一位</p><p><code>lastbit^=(i&amp;1)</code>说明Lastbit是i从低位异或到高位的结结果，如果i中有奇数个1，结果1；偶数个1，结果为0。</p><p><code>output^=lastbit</code>将output变量的最后一位设置成lastbit变量的值。</p><p>整体流程:<br><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>每轮产生</mtext><mn>8</mn><mtext>个</mtext><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo separator="true">,</mo><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>b</mi><mi>i</mi><mi>t</mi><mtext>取决于</mtext><mi>r</mi><mtext>按位与上</mtext><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mtext>后结果中</mtext><mn>1</mn><mtext>的个数，因为按位与性质，都为</mtext><mn>1</mn><mtext>时才为</mtext><mn>1</mn><mo separator="true">,</mo><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mtext>已知</mtext><mo separator="true">,</mo></mrow><annotation encoding="application/x-tex">每轮产生8个lastbit,lastbit取决于r按位与上mask后结果中1的个数，因为按位与性质，都为1时才为1,mask已知,</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">轮</span><span class="mord cjk_fallback">产</span><span class="mord cjk_fallback">生</span><span class="mord">8</span><span class="mord cjk_fallback">个</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">取</span><span class="mord cjk_fallback">决</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord cjk_fallback">按</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">与</span><span class="mord cjk_fallback">上</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">中</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">个</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span><span class="mord cjk_fallback">按</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">与</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">质</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">都</span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">才</span><span class="mord cjk_fallback">为</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mpunct">,</span></span></span></span>$</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>只需考虑</mtext><mi>m</mi><mi>a</mi><mi>s</mi><mi>k</mi><mtext>中是</mtext><mn>1</mn><mtext>的位置</mtext></mrow><annotation encoding="application/x-tex">只需考虑mask中是1的位置</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">需</span><span class="mord cjk_fallback">考</span><span class="mord cjk_fallback">虑</span><span class="mord mathdefault">m</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">是</span><span class="mord">1</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">置</span></span></span></span>（从右边数</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>每次产生</mtext><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>b</mi><mi>i</mi><mi>t</mi><mtext>后，</mtext><mi>R</mi><mtext>值更新为</mtext><mi>o</mi><mi>u</mi><mi>t</mi><mi>p</mi><mi>u</mi><mi>t</mi><mo stretchy="false">(</mo><mo>=</mo><mi>R</mi><mtext>去掉最高位第</mtext><mn>32</mn><mtext>位是</mtext><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>b</mi><mi>i</mi><mi>t</mi><mtext>的值</mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">每次产生lastbit后，R值更新为output(=R去掉最高位第32位是lastbit的值)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">每</span><span class="mord cjk_fallback">次</span><span class="mord cjk_fallback">产</span><span class="mord cjk_fallback">生</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">后</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">值</span><span class="mord cjk_fallback">更</span><span class="mord cjk_fallback">新</span><span class="mord cjk_fallback">为</span><span class="mord mathdefault">o</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mord mathdefault">p</span><span class="mord mathdefault">u</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord cjk_fallback">去</span><span class="mord cjk_fallback">掉</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">第</span><span class="mord">3</span><span class="mord">2</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">是</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">值</span><span class="mclose">)</span></span></span></span></p><p>每轮产生一个结果，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>即</mtext><mn>8</mn><mtext>个</mtext><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>b</mi><mi>i</mi><mi>t</mi><mtext>异或的结果</mtext></mrow><annotation encoding="application/x-tex">即8个lastbit异或的结果</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mord">8</span><span class="mord cjk_fallback">个</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord cjk_fallback">异</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">果</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>l</mi><mi>a</mi><mi>s</mi><mi>t</mi><mi>b</mi><mi>i</mi><mi>t</mi><mo>=</mo><mi>R</mi><mn>3</mn><mo>⊕</mo><mi>R</mi><mn>5</mn><mo>⊕</mo><mi>R</mi><mn>8</mn><mo>⊕</mo><mi>R</mi><mn>12</mn><mo>⊕</mo><mi>R</mi><mn>20</mn><mo>⊕</mo><mi>R</mi><mn>27</mn><mo>⊕</mo><mi>R</mi><mn>30</mn><mo>⊕</mo><mi>R</mi><mn>32</mn></mrow><annotation encoding="application/x-tex">lastbit=R3 \oplus  R5 \oplus  R8 \oplus R12 \oplus R20 \oplus  R27 \oplus  R30 \oplus R32</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault">s</span><span class="mord mathdefault">t</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">2</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">2</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">3</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">3</span><span class="mord">2</span></span></span></span></p><p><img src="/post/0/image-20230717154506365.png" alt="LL"></p><p><img src="/post/0/image-20230717170435075.png" alt="image-20230717170435075"></p><p><img src="/post/0/image-20230717170350582.png" alt="image-20230717170350582"></p><h4 id="wp">WP</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python">f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>f<span class="token punctuation">)</span>bin_out <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>R <span class="token operator">=</span> bin_out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span>    <span class="token comment">#获取输出序列中与掩码msk长度相同的值</span>mask <span class="token operator">=</span> <span class="token string">'10100100000010000000100010010100'</span>key <span class="token operator">=</span> <span class="token string">'00100000111111011110111011111000'</span>tmp<span class="token operator">=</span>keyR <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token string">'?'</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">]</span>    ans <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key2<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token operator">-</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">12</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">20</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">27</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    R <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">31</span><span class="token punctuation">]</span>R <span class="token operator">=</span> <span class="token builtin">format</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">'x'</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">"flag&#123;"</span> <span class="token operator">+</span> R <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token keyword">print</span> flag<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2018-强网杯-线上赛-streamgame1">2018 强网杯 线上赛 streamgame1</h3><h4 id="题目">题目</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">assert</span> flag<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> flag<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">25</span><span class="token keyword">def</span> <span class="token function">lfsr</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffff</span>    i <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffff</span>    lastbit <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        lastbit <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> i <span class="token operator">>></span> <span class="token number">1</span>    output <span class="token operator">^</span><span class="token operator">=</span> lastbit    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">,</span> lastbit<span class="token punctuation">)</span>R <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>mask <span class="token operator">=</span> <span class="token number">0b1010011000100011100</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span> <span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>R<span class="token punctuation">,</span> out<span class="token punctuation">)</span> <span class="token operator">=</span> lfsr<span class="token punctuation">(</span>R<span class="token punctuation">,</span> mask<span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> out    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题解">题解</h4><h5 id="方法一">方法一</h5><p>和第一题一样</p><h5 id="方法二">方法二</h5><p>因为flag不是很长（19bit)，所以可以爆破</p><h4 id="wp">WP</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#方法一 </span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>f<span class="token punctuation">)</span>bin_out <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>R <span class="token operator">=</span> bin_out<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span>    <span class="token comment">#获取输出序列中与掩码msk长度相同的值</span><span class="token keyword">print</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>mask <span class="token operator">=</span> <span class="token string">'1010011000100011100'</span>key <span class="token operator">=</span>  <span class="token string">'0101010100111000111'</span> R <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token string">'x'</span><span class="token operator">+</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span>    out <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">4</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">9</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">13</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">14</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">^</span><span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    R <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token operator">+</span>key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'flag&#123;'</span><span class="token operator">+</span>R<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">+</span><span class="token string">'&#125;'</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#方法二</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span><span class="token keyword">import</span> os<span class="token punctuation">,</span>sysos<span class="token punctuation">.</span>chdir<span class="token punctuation">(</span>sys<span class="token punctuation">.</span>path<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>f<span class="token punctuation">)</span>bin_out <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">.</span>zfill<span class="token punctuation">(</span><span class="token number">12</span><span class="token operator">*</span><span class="token number">8</span><span class="token punctuation">)</span>   <span class="token comment">#将key文本内容转换为 2 进制数，每个字节占 8 位</span> R <span class="token operator">=</span> bin_out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span>  <span class="token comment">#取输出序列的前19位</span>mask <span class="token operator">=</span> <span class="token number">0b1010011000100011100</span> <span class="token keyword">def</span> <span class="token function">lfsr</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffffff</span>    i<span class="token operator">=</span><span class="token punctuation">(</span>R<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffffff</span>    lastbit<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span>    output<span class="token operator">^</span><span class="token operator">=</span>lastbit    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">,</span>lastbit<span class="token punctuation">)</span> <span class="token comment">#根据生成规则，初始状态最后一位拼接输出序列</span><span class="token comment">#我们可以猜测seed的第19位（0或1），如果seed19+R[:18]输出值等于R[:19]，那么就可以确定seed值了</span><span class="token keyword">def</span> <span class="token function">decry</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cur <span class="token operator">=</span> bin_out<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">19</span><span class="token punctuation">]</span>      <span class="token comment">#前19位 2 进制数</span>    res <span class="token operator">=</span> <span class="token string">''</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">19</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> lfsr<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">'0'</span><span class="token operator">+</span>cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">==</span> <span class="token builtin">int</span><span class="token punctuation">(</span>cur<span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">'0'</span>            cur <span class="token operator">=</span> <span class="token string">'0'</span><span class="token operator">+</span>cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            res <span class="token operator">+=</span> <span class="token string">'1'</span>            cur <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">+</span> cur<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">:</span><span class="token number">18</span><span class="token punctuation">]</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span> r <span class="token operator">=</span> decry<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2018-强网杯-线上赛-streamgame2">2018 强网杯 线上赛 streamgame2</h3><h4 id="题目">题目</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">assert</span> flag<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> flag<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">27</span> <span class="token keyword">def</span> <span class="token function">lfsr</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffff</span>    i<span class="token operator">=</span><span class="token punctuation">(</span>R<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffff</span>    lastbit<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span>    output<span class="token operator">^</span><span class="token operator">=</span>lastbit    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">,</span>lastbit<span class="token punctuation">)</span>   R<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>mask<span class="token operator">=</span><span class="token number">0x100002</span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>R<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token operator">=</span>lfsr<span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span>        tmp<span class="token operator">=</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>out    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题解">题解</h4><p>同1，2，len(flag)==27</p><h4 id="wp">WP</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span>bin_out <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'key.txt'</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span>bin_out<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment"># print(key[0:21])</span><span class="token comment"># print(bin(int('0x100002',16)))</span>key <span class="token operator">=</span> <span class="token string">'101100101110100100001'</span>mask<span class="token operator">=</span> <span class="token string">'100000000000000000010'</span> R <span class="token operator">=</span> <span class="token string">''</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">21</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token string">'?'</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span>    ans <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>key<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">int</span><span class="token punctuation">(</span>output<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    R <span class="token operator">+=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span> <span class="token operator">+</span> key<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">20</span><span class="token punctuation">]</span> <span class="token keyword">print</span><span class="token punctuation">(</span>R<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2019-0ctf-tctf-线上赛-zer0lfsr">2019 0CTF/TCTF 线上赛 zer0lfsr</h3><h4 id="题目">题目</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> secret <span class="token keyword">import</span> init1<span class="token punctuation">,</span>init2<span class="token punctuation">,</span>init3<span class="token punctuation">,</span>FLAG<span class="token keyword">import</span> hashlib<span class="token keyword">assert</span><span class="token punctuation">(</span>FLAG<span class="token operator">==</span><span class="token string">"flag&#123;"</span><span class="token operator">+</span>hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>init1<span class="token operator">+</span>init2<span class="token operator">+</span>init3<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">class</span> <span class="token class-name">lfsr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> init<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>init <span class="token operator">=</span> init        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> mask        self<span class="token punctuation">.</span>lengthmask <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        nextdata <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>init <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>lengthmask         i <span class="token operator">=</span> self<span class="token punctuation">.</span>init <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>mask <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>lengthmask         output <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">while</span> i <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>            output <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> i <span class="token operator">>></span> <span class="token number">1</span>        nextdata <span class="token operator">^</span><span class="token operator">=</span> output        self<span class="token punctuation">.</span>init <span class="token operator">=</span> nextdata        <span class="token keyword">return</span> output<span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x1<span class="token operator">*</span>x2<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>x2<span class="token operator">*</span>x3<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>x1<span class="token operator">*</span>x3<span class="token punctuation">)</span><span class="token keyword">if</span> __name__<span class="token operator">==</span><span class="token string">"__main__"</span><span class="token punctuation">:</span>    l1 <span class="token operator">=</span> lfsr<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>init1<span class="token punctuation">,</span><span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0b100000000000000000000000010000000000000000000000</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span>    l2 <span class="token operator">=</span> lfsr<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>init2<span class="token punctuation">,</span><span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0b100000000000000000000000000000000010000000000000</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span>    l3 <span class="token operator">=</span> lfsr<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>init3<span class="token punctuation">,</span><span class="token string">"big"</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">0b100000100000000000000000000000000000000000000000</span><span class="token punctuation">,</span><span class="token number">48</span><span class="token punctuation">)</span>    <span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"keystream"</span><span class="token punctuation">,</span><span class="token string">"wb"</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8192</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            b <span class="token operator">=</span> <span class="token number">0</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                b <span class="token operator">=</span> <span class="token punctuation">(</span>b<span class="token operator">&lt;&lt;</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">+</span>combine<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span>l3<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题解">题解</h4><h5 id="方法一：fast-correlation-attacks">方法一：Fast Correlation Attacks</h5><p><strong>Fast Correlation Attacks（快速相关攻击）</strong></p><p><a href="https://www.anquanke.com/post/id/184828#h3-4">深入分析CTF中的LFSR类题目（二）-安全客 - 安全资讯平台 (anquanke.com)</a></p><p><a href="https://link.springer.com/content/pdf/10.1007/978-3-642-21702-9_4.pdf">Title (springer.com)</a></p><p><strong>Correlation Attacks（相关攻击）</strong></p><p><strong>利用单个LFSR的输出序列和combine之后的LFSR的输出序列之间具有的一定的相关性这一特点，来还原LFSR的初始状态</strong></p><p>两种重要的快速相关攻击的手法:Algorithm A和Algorithm B</p><p>使用该攻击的满足条件：单个LFSR的输出序列和combine之后的LFSR的输出序列之间的相关性大于0.53\</p><p>例子：</p><p><img src="/post/0/image-20230717193605594.png" alt="image-20230717193605594"></p><table><thead><tr><th style="text-align:center">x1</th><th style="text-align:center">x2</th><th style="text-align:center">x3</th><th style="text-align:center">combine(x1,x2,x3)</th></tr></thead><tbody><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">0</td><td style="text-align:center">0</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">0</td><td style="text-align:center">1</td></tr><tr><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td><td style="text-align:center">1</td></tr></tbody></table><p>当x1=0时，会对应四个result（即<code>combine(x1,x2,x3)</code>）值，其中3个result值为0，一个为1，即x1和result相同的概率为0.75。同理，x2和x3也满足这一规律，这样一来我们就找到了一个很关键的要素，那就是<strong>单个x的值和combine之后的值相同的概率有0.75</strong>。</p><p>Meier-Staffelbach模型</p><p>两种重要的快速相关攻击的手法:Algorithm A和Algorithm B，都默认建立在该模型之下。</p><p>两种算法的比较：</p><p>1.算法<strong>A</strong>:</p><p>优点：错误率接近0.75时攻击效果显著。</p><p>缺点：当抽头数量较多时，该攻击将逐渐退化为穷举攻击。</p><p>2.算法<strong>B</strong>:</p><p>优点：错误率接近0.5时攻击效果显著。</p><p>缺点：该攻击需要进行大量的双精度计算，计算量较大</p><p>脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">BLOCK <span class="token operator">=</span> <span class="token number">48</span><span class="token keyword">class</span> <span class="token class-name">LFSR</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> init<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> length<span class="token operator">=</span>BLOCK<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>init <span class="token operator">=</span> init        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length        self<span class="token punctuation">.</span>lengthmask <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">**</span> length <span class="token operator">-</span> <span class="token number">1</span>        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> mask <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>lengthmask    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        nextdata <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>init <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>lengthmask        output <span class="token operator">=</span> parity<span class="token punctuation">(</span>self<span class="token punctuation">.</span>init <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>mask<span class="token punctuation">)</span>        nextdata <span class="token operator">^</span><span class="token operator">=</span> output        self<span class="token punctuation">.</span>init <span class="token operator">=</span> nextdata        <span class="token keyword">return</span> output    <span class="token keyword">def</span> <span class="token function">step_back</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        output <span class="token operator">=</span> self<span class="token punctuation">.</span>init <span class="token operator">&amp;</span> <span class="token number">1</span>        predata <span class="token operator">=</span> self<span class="token punctuation">.</span>init <span class="token operator">>></span> <span class="token number">1</span>        high_bit <span class="token operator">=</span> parity<span class="token punctuation">(</span>predata <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>mask<span class="token punctuation">)</span> <span class="token operator">^</span> output        self<span class="token punctuation">.</span>init <span class="token operator">=</span> <span class="token punctuation">(</span>high_bit <span class="token operator">&lt;&lt;</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>length <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">|</span> predata<span class="token keyword">def</span> <span class="token function">parity</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    res <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">while</span> x<span class="token punctuation">:</span>        x <span class="token operator">-=</span> x <span class="token operator">&amp;</span> <span class="token punctuation">(</span><span class="token operator">-</span>x<span class="token punctuation">)</span>        res <span class="token operator">^</span><span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">get_data</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    data <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"keystream"</span><span class="token punctuation">,</span> <span class="token string">"rb"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span>    result <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>data<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        x <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>data<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            result<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>x <span class="token operator">>></span> <span class="token punctuation">(</span><span class="token number">7</span> <span class="token operator">-</span> j<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>result<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">bit_stream_to_int</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> a<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">S</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> p    <span class="token keyword">return</span> p <span class="token operator">*</span> S<span class="token punctuation">(</span>p<span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> p<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> S<span class="token punctuation">(</span>p<span class="token punctuation">,</span> t <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">C</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> n <span class="token operator">&lt;</span> m<span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token keyword">if</span> m <span class="token operator">></span> n <span class="token operator">/</span> <span class="token number">2</span><span class="token punctuation">:</span>        m <span class="token operator">=</span> n <span class="token operator">-</span> m    res <span class="token operator">=</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">*=</span> n <span class="token operator">-</span> i    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">//=</span> i <span class="token operator">+</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">calc_eq</span><span class="token punctuation">(</span>loc<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> z<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span>    t <span class="token operator">=</span> <span class="token number">0</span>    tap <span class="token operator">=</span> <span class="token punctuation">[</span>n<span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>            tap<span class="token punctuation">.</span>append<span class="token punctuation">(</span>n <span class="token operator">-</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>            t <span class="token operator">+=</span> <span class="token number">1</span>    tap<span class="token punctuation">.</span>reverse<span class="token punctuation">(</span><span class="token punctuation">)</span>    eqs <span class="token operator">=</span> <span class="token punctuation">[</span>tap<span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>tap<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">>=</span> l<span class="token punctuation">:</span>            <span class="token keyword">break</span>        tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tap<span class="token punctuation">)</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>tap<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            tmp<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> tap<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">1</span>        eqs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>        tap <span class="token operator">=</span> tmp    shift_eqs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> eq <span class="token keyword">in</span> eqs<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            offset <span class="token operator">=</span> loc <span class="token operator">-</span> eq<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">if</span> eq<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> offset <span class="token operator">&lt;</span> <span class="token number">0</span> <span class="token keyword">or</span> eq<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">+</span> offset <span class="token operator">>=</span> l<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token builtin">len</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span>            <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>eq<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                tmp<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> eq<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">+</span> offset            shift_eqs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    m <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>shift_eqs<span class="token punctuation">)</span>    <span class="token keyword">if</span> m <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span>    h <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> eq <span class="token keyword">in</span> shift_eqs<span class="token punctuation">:</span>        <span class="token comment"># print(eq)</span>        xor_sum <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> eq<span class="token punctuation">:</span>            xor_sum <span class="token operator">^</span><span class="token operator">=</span> z<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">if</span> xor_sum <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            h <span class="token operator">+=</span> <span class="token number">1</span>    s <span class="token operator">=</span> S<span class="token punctuation">(</span>p<span class="token punctuation">,</span> t<span class="token punctuation">)</span>    p1 <span class="token operator">=</span> C<span class="token punctuation">(</span>m<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> s<span class="token punctuation">,</span> m <span class="token operator">-</span> h<span class="token punctuation">)</span>    p0 <span class="token operator">=</span> C<span class="token punctuation">(</span>m<span class="token punctuation">,</span> h<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> m <span class="token operator">-</span> h<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">-</span> s<span class="token punctuation">,</span> h<span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token punctuation">,</span> h<span class="token punctuation">,</span> p1 <span class="token operator">/</span> <span class="token punctuation">(</span>p1 <span class="token operator">+</span> p0<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">gen_linear_eq</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> n<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span>length<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    tap <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>mask <span class="token operator">>></span> i<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>            tap<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>    eqs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        eqs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token number">1</span> <span class="token operator">&lt;&lt;</span> i<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> tap<span class="token punctuation">:</span>            res <span class="token operator">^</span><span class="token operator">=</span> eqs<span class="token punctuation">[</span>i <span class="token operator">-</span> j<span class="token punctuation">]</span>        eqs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>res<span class="token punctuation">)</span>    <span class="token keyword">return</span> eqs<span class="token keyword">def</span> <span class="token function">solve</span><span class="token punctuation">(</span>assume<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    eq_len <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>assume<span class="token punctuation">)</span>    mat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>eq_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        mat<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> n<span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> eq_len    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>eq_len<span class="token punctuation">)</span><span class="token punctuation">:</span>        b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> assume<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>            mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>assume<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">>></span> j<span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">1</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">1</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> eq_len<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> mat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">:</span>                tmp <span class="token operator">=</span> j                <span class="token keyword">break</span>        <span class="token keyword">if</span> tmp <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        mat<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">,</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> mat<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span>        b<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">,</span> b<span class="token punctuation">[</span>tmp<span class="token punctuation">]</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>eq_len<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> <span class="token keyword">not</span> mat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">or</span> i <span class="token operator">==</span> j<span class="token punctuation">:</span>                <span class="token keyword">continue</span>            b<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> b<span class="token punctuation">[</span>i<span class="token punctuation">]</span>            <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>i<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>                mat<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span> <span class="token operator">^</span><span class="token operator">=</span> mat<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span>k<span class="token punctuation">]</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">any</span><span class="token punctuation">(</span>mat<span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> b<span class="token punctuation">[</span><span class="token punctuation">:</span>n<span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">get_init_stat</span><span class="token punctuation">(</span>locs<span class="token punctuation">,</span> linear_eq<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> n<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>    assume <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>linear_eq<span class="token punctuation">[</span>x<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">,</span> x<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> locs<span class="token punctuation">]</span>    b <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    idx <span class="token operator">=</span> n    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----- try solve equations -----"</span><span class="token punctuation">)</span>    <span class="token keyword">while</span> <span class="token keyword">not</span> b<span class="token punctuation">:</span>  <span class="token comment"># try again if linear correlation</span>        b <span class="token operator">=</span> solve<span class="token punctuation">(</span>assume<span class="token punctuation">[</span><span class="token punctuation">:</span>idx<span class="token punctuation">]</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span>        idx <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----- solve success -----"</span><span class="token punctuation">)</span>    stat <span class="token operator">=</span> bit_stream_to_int<span class="token punctuation">(</span>b<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----- genrate original LFSR -----"</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> LFSR<span class="token punctuation">(</span>stat<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> n<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>        l<span class="token punctuation">.</span>step_back<span class="token punctuation">(</span><span class="token punctuation">)</span>    init_stat <span class="token operator">=</span> l<span class="token punctuation">.</span>init    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"init:"</span><span class="token punctuation">,</span> init_stat<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----- genrate original LFSR finished -----"</span><span class="token punctuation">)</span>    z_new <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    same_cnt <span class="token operator">=</span> <span class="token number">0</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        z_new<span class="token punctuation">.</span>append<span class="token punctuation">(</span>l<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        same_cnt <span class="token operator">+=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>z<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> z_new<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> loc <span class="token keyword">in</span> locs<span class="token punctuation">[</span><span class="token punctuation">:</span>idx<span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">assert</span><span class="token punctuation">(</span>z_new<span class="token punctuation">[</span>loc<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span> <span class="token operator">==</span> loc<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"match rate:"</span><span class="token punctuation">,</span> same_cnt <span class="token operator">/</span> <span class="token builtin">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> init_stat<span class="token keyword">def</span> <span class="token function">crack</span><span class="token punctuation">(</span>mask<span class="token punctuation">,</span> n<span class="token punctuation">,</span> z<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----- select candidates -----"</span><span class="token punctuation">)</span>    candidates <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        m<span class="token punctuation">,</span> h<span class="token punctuation">,</span> p_star <span class="token operator">=</span> calc_eq<span class="token punctuation">(</span>i<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> z<span class="token punctuation">,</span> n<span class="token punctuation">,</span> p<span class="token punctuation">)</span>        tmp <span class="token operator">=</span> <span class="token punctuation">(</span>p_star<span class="token punctuation">,</span> i<span class="token punctuation">,</span> m<span class="token punctuation">,</span> h<span class="token punctuation">)</span>        candidates<span class="token punctuation">.</span>append<span class="token punctuation">(</span>tmp<span class="token punctuation">)</span>    candidates<span class="token punctuation">.</span>sort<span class="token punctuation">(</span>reverse<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>candidates<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"----- select candidates finished -----"</span><span class="token punctuation">)</span>    linear_eq <span class="token operator">=</span> gen_linear_eq<span class="token punctuation">(</span>mask<span class="token punctuation">,</span> BLOCK<span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span>    locs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">(</span>cand<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> z<span class="token punctuation">[</span>cand<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> cand <span class="token keyword">in</span> candidates<span class="token punctuation">]</span>    <span class="token keyword">return</span> get_init_stat<span class="token punctuation">(</span>locs<span class="token punctuation">,</span> linear_eq<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> n<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">"__main__"</span><span class="token punctuation">:</span>    z <span class="token operator">=</span> get_data<span class="token punctuation">(</span><span class="token punctuation">)</span>    mask <span class="token operator">=</span> <span class="token number">0b100000000000000000000000010000000000000000000000</span>    init1 <span class="token operator">=</span> crack<span class="token punctuation">(</span>mask<span class="token punctuation">,</span> BLOCK<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">)</span>    mask <span class="token operator">=</span> <span class="token number">0b100000000000000000000000000000000010000000000000</span>    init2 <span class="token operator">=</span> crack<span class="token punctuation">(</span>mask<span class="token punctuation">,</span> BLOCK<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">)</span>    mask <span class="token operator">=</span> <span class="token number">0b100000100000000000000000000000000000000000000000</span>    init3 <span class="token operator">=</span> crack<span class="token punctuation">(</span>mask<span class="token punctuation">,</span> BLOCK<span class="token punctuation">,</span> z<span class="token punctuation">,</span> <span class="token number">0.75</span><span class="token punctuation">)</span>    init <span class="token operator">=</span> <span class="token punctuation">[</span>init1<span class="token punctuation">,</span> init2<span class="token punctuation">,</span> init3<span class="token punctuation">]</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span>            <span class="token comment">#根据反馈函数在进行flag的求解</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>init<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        init<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span>init<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>    init_bytes <span class="token operator">=</span> <span class="token string">b""</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> init<span class="token punctuation">:</span>        init_bytes <span class="token operator">+=</span> i    <span class="token keyword">import</span> hashlib    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"flag&#123;"</span> <span class="token operator">+</span> hashlib<span class="token punctuation">.</span>sha256<span class="token punctuation">(</span>init_bytes<span class="token punctuation">)</span><span class="token punctuation">.</span>hexdigest<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="方法二：z3约束求解">方法二：z3约束求解</h5><p>z3约约束求解的核心是<strong>列方程和解方程</strong>，如果能解，z3就会给你一组解（<strong>注意：如果方程有多组解，z3只会给你其中的一组解，所以这组解虽然满足题意但未必是正确答案，这个时候我们可以尝试能否继续为方程添加约束条件，进一步限制解的范围，从而获得我们预期的一组解</strong>）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#声明，inter1未知数</span>init1 <span class="token operator">=</span> BitVec<span class="token punctuation">(</span><span class="token string">'init1'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span>s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>outputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> combine<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l3<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>Solver添加方程的时候，只添加了200个方程，按理来讲，我们应该有<code>len(outputs)</code>个方程，为什么只添加200个呢？实际上在这里200并不是一个精确数字，而是一个大概的数字，意思是当添加够200个方程的时候，得到的解就已经固定了，即我们需要的那组解，我们把它改到300，得到的还是这组解，所以就不用继续添加没有必要的方程了。那么既然我们说反正都一样，我直接给他添加<code>len(outputs)</code>个方程，不是更省事吗，也不用去关它多少个方程之后解就固定了，其实大家可以动手去试一下，这样虽然理论上是一样的，但是实际操作的时候计算机反而解不出来，原因就是约束的方程过多了，计算机反而解不出来了，因此我们需要手动测试一下，找到一个合适的数值，来使得我们的脚本既能求出我们希望的一组解，又能让计算机正常跑出来。</p><h4 id="wp">wp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> z3 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">class</span> <span class="token class-name">lfsr</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> init<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> length<span class="token punctuation">)</span><span class="token punctuation">:</span>        self<span class="token punctuation">.</span>init <span class="token operator">=</span> init        self<span class="token punctuation">.</span>mask <span class="token operator">=</span> mask        self<span class="token punctuation">.</span>lengthmask <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>length<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span>        self<span class="token punctuation">.</span>length <span class="token operator">=</span> length    <span class="token keyword">def</span> <span class="token function">next</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        nextdata <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>init <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>lengthmask        i <span class="token operator">=</span> self<span class="token punctuation">.</span>init <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>mask <span class="token operator">&amp;</span> self<span class="token punctuation">.</span>lengthmask        output <span class="token operator">=</span> <span class="token number">0</span>        <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>length<span class="token punctuation">)</span><span class="token punctuation">:</span>            output <span class="token operator">^</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            i <span class="token operator">=</span> i <span class="token operator">>></span> <span class="token number">1</span>        nextdata <span class="token operator">^</span><span class="token operator">=</span> output        self<span class="token punctuation">.</span>init <span class="token operator">=</span> nextdata        <span class="token keyword">return</span> output<span class="token keyword">def</span> <span class="token function">combine</span><span class="token punctuation">(</span>x1<span class="token punctuation">,</span>x2<span class="token punctuation">,</span>x3<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>x1<span class="token operator">*</span>x2<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>x2<span class="token operator">*</span>x3<span class="token punctuation">)</span><span class="token operator">^</span><span class="token punctuation">(</span>x1<span class="token operator">*</span>x3<span class="token punctuation">)</span>init1 <span class="token operator">=</span> BitVec<span class="token punctuation">(</span><span class="token string">'init1'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>init2 <span class="token operator">=</span> BitVec<span class="token punctuation">(</span><span class="token string">'init2'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>init3 <span class="token operator">=</span> BitVec<span class="token punctuation">(</span><span class="token string">'init3'</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>l1 <span class="token operator">=</span> lfsr<span class="token punctuation">(</span>init1<span class="token punctuation">,</span> <span class="token number">0b100000000000000000000000010000000000000000000000</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>l2 <span class="token operator">=</span> lfsr<span class="token punctuation">(</span>init2<span class="token punctuation">,</span> <span class="token number">0b100000000000000000000000000000000010000000000000</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span>l3 <span class="token operator">=</span> lfsr<span class="token punctuation">(</span>init3<span class="token punctuation">,</span> <span class="token number">0b100000100000000000000000000000000000000000000000</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">)</span><span class="token comment">#创建一个解的声明对象</span>s <span class="token operator">=</span> Solver<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">with</span> codecs<span class="token punctuation">.</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'keystream'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">,</span> <span class="token string">'utf8'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    keystream <span class="token operator">=</span> f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span>outputs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> keystream<span class="token punctuation">:</span>    a <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>    b <span class="token operator">=</span> <span class="token string">'0'</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">8</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> b<span class="token punctuation">:</span>        outputs<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>j<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#添加条件（即方程）</span>    s<span class="token punctuation">.</span>add<span class="token punctuation">(</span>outputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">==</span> combine<span class="token punctuation">(</span>l1<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l2<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> l3<span class="token punctuation">.</span><span class="token builtin">next</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#判断是否有解：</span>s<span class="token punctuation">.</span>check<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>s<span class="token punctuation">.</span>model<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>解出init1,init2,init3</p><h3 id="2018-强网杯-线上赛-streamgame3">2018 强网杯 线上赛 streamgame3</h3><h4 id="题目">题目</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">assert</span> flag<span class="token punctuation">.</span>startswith<span class="token punctuation">(</span><span class="token string">"flag&#123;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> flag<span class="token punctuation">.</span>endswith<span class="token punctuation">(</span><span class="token string">"&#125;"</span><span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">27</span> <span class="token keyword">def</span> <span class="token function">nlfsr</span><span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span><span class="token punctuation">:</span>    output <span class="token operator">=</span> <span class="token punctuation">(</span>R <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xffffff</span>    i<span class="token operator">=</span><span class="token punctuation">(</span>R<span class="token operator">&amp;</span>mask<span class="token punctuation">)</span><span class="token operator">&amp;</span><span class="token number">0xffffff</span>    lastbit<span class="token operator">=</span><span class="token number">0</span>    changesign<span class="token operator">=</span><span class="token boolean">True</span>    <span class="token keyword">while</span> i<span class="token operator">!=</span><span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> changesign<span class="token punctuation">:</span>            lastbit <span class="token operator">&amp;</span><span class="token operator">=</span> <span class="token punctuation">(</span>i <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span>            changesign<span class="token operator">=</span><span class="token boolean">False</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            lastbit<span class="token operator">^</span><span class="token operator">=</span><span class="token punctuation">(</span>i<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">)</span>        i<span class="token operator">=</span>i<span class="token operator">>></span><span class="token number">1</span>    output<span class="token operator">^</span><span class="token operator">=</span>lastbit    <span class="token keyword">return</span> <span class="token punctuation">(</span>output<span class="token punctuation">,</span>lastbit<span class="token punctuation">)</span> R<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span>mask<span class="token operator">=</span><span class="token number">0b110110011011001101110</span> f<span class="token operator">=</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"key"</span><span class="token punctuation">,</span><span class="token string">"ab"</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">*</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token punctuation">(</span>R<span class="token punctuation">,</span>out<span class="token punctuation">)</span><span class="token operator">=</span>nlfsr<span class="token punctuation">(</span>R<span class="token punctuation">,</span>mask<span class="token punctuation">)</span>        tmp<span class="token operator">=</span><span class="token punctuation">(</span>tmp <span class="token operator">&lt;&lt;</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">^</span>out    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">chr</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><a href="https://rhythmmark.github.io/StreamGame3-Writeup/">【复现】强网杯-StreamGame3-Writeup – Rhy7hm (rhythmmark.github.io)</a></p><p><strong>Fast Correlation Attacks（快速相关攻击）</strong></p><h2 id="b-m-算法">B-M 算法</h2><p><a href="https://wiki.x10sec.org/crypto/streamcipher/fsr/lfsr-zh/">https://wiki.x10sec.org/crypto/streamcipher/fsr/lfsr-zh/</a></p>]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>MT19937</title>
      <link href="/post/59a1b91b.html"/>
      <url>/post/59a1b91b.html</url>
      
        <content type="html"><![CDATA[<p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/">流密码 | Lazzaro (lazzzaro.github.io)</a></p><h1>逆extract_number（求后随机数）</h1><p>extract_number是对从state中提取的伪随机数做异或处理，而逆extract_number是恢复梅森算法的内部状态（即state)</p><h2 id="extract-number"><strong>extract_number</strong></h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">extract_number</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>       <span class="token keyword">if</span> self<span class="token punctuation">.</span>mti <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>           self<span class="token punctuation">.</span>twist<span class="token punctuation">(</span><span class="token punctuation">)</span>       y <span class="token operator">=</span> self<span class="token punctuation">.</span>mt<span class="token punctuation">[</span>self<span class="token punctuation">.</span>mti<span class="token punctuation">]</span>       y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">>></span> <span class="token number">11</span>       y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">7</span> <span class="token operator">&amp;</span> <span class="token number">2636928640</span>       y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">15</span> <span class="token operator">&amp;</span> <span class="token number">4022730752</span>       y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">>></span> <span class="token number">18</span>       self<span class="token punctuation">.</span>mti <span class="token operator">=</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>mti <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">624</span>       <span class="token keyword">return</span> _int32<span class="token punctuation">(</span>y<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆extract-number"><strong>逆extract_number</strong></h2><p><img src="/post/59a1b91b/image-20230718133951216.png" alt="image-20230718133951216"></p><p><img src="/post/59a1b91b/image-20230718133918552.png" alt="image-20230718133918552"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># right shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">>></span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># right shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right_mask</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">>></span> shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token comment"># left shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># left shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left_mask</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token keyword">def</span> <span class="token function">extract_number</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">>></span> <span class="token number">11</span>    y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">7</span> <span class="token operator">&amp;</span> <span class="token number">2636928640</span>    y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">&lt;&lt;</span> <span class="token number">15</span> <span class="token operator">&amp;</span> <span class="token number">4022730752</span>    y <span class="token operator">=</span> y <span class="token operator">^</span> y <span class="token operator">>></span> <span class="token number">18</span>    <span class="token keyword">return</span> y<span class="token operator">&amp;</span><span class="token number">0xffffffff</span><span class="token keyword">def</span> <span class="token function">recover</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> inverse_left_mask<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4022730752</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> inverse_left_mask<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2636928640</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y<span class="token operator">&amp;</span><span class="token number">0xffffffff</span>y <span class="token operator">=</span> extract_number<span class="token punctuation">(</span> <span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题">例题</h2><h3 id="2020网鼎杯白虎组random">2020网鼎杯白虎组random</h3><h4 id="题目">题目</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">generate</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    fw <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"random"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        fw<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"n"</span><span class="token punctuation">)</span>    fw<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span>generate<span class="token punctuation">(</span><span class="token punctuation">)</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.txt"</span><span class="token punctuation">,</span> <span class="token string">"w"</span><span class="token punctuation">)</span>key <span class="token operator">=</span> <span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>ciphertext <span class="token operator">=</span> encryption<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> key<span class="token punctuation">)</span>f<span class="token punctuation">.</span>write<span class="token punctuation">(</span>ciphertext<span class="token punctuation">)</span>f<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题解">题解</h4><p>预测出下一个随机数</p><h4 id="wp">wp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> random <span class="token keyword">import</span> Random<span class="token keyword">def</span> <span class="token function">invert_right</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>val<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token number">32</span>    mx <span class="token operator">=</span> <span class="token number">0xffffffff</span>    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> mx    i<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">*</span>l<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>        mask <span class="token operator">=</span> <span class="token punctuation">(</span>mx<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>length<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">&amp;</span>mx<span class="token punctuation">)</span><span class="token operator">>></span>i<span class="token operator">*</span>l        tmp <span class="token operator">=</span> m <span class="token operator">&amp;</span> mask        m <span class="token operator">=</span> m<span class="token operator">^</span>tmp<span class="token operator">>></span>l<span class="token operator">&amp;</span>val        res <span class="token operator">+=</span> tmp        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">invert_left</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token number">32</span>    mx <span class="token operator">=</span> <span class="token number">0xffffffff</span>    i<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">*</span>l <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>        mask <span class="token operator">=</span> <span class="token punctuation">(</span>mx<span class="token operator">>></span><span class="token punctuation">(</span>length<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">&amp;</span>mx<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">*</span>l        tmp <span class="token operator">=</span> m <span class="token operator">&amp;</span> mask        m <span class="token operator">^</span><span class="token operator">=</span> tmp<span class="token operator">&lt;&lt;</span>l<span class="token operator">&amp;</span>val        res <span class="token operator">|</span><span class="token operator">=</span> tmp        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">invert_temper</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> invert_right<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_left<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4022730752</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_left<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2636928640</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_right<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">clone_mt</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> <span class="token punctuation">[</span>invert_temper<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> record<span class="token punctuation">]</span>    gen <span class="token operator">=</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    gen<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> gen<span class="token comment">#读取所有组随机数</span>f <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"random"</span><span class="token punctuation">,</span><span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>prng <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> f<span class="token punctuation">:</span>    i <span class="token operator">=</span> i<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token string">'n'</span><span class="token punctuation">)</span>    prng<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#克隆一个MT19937伪随机数生成器</span>g <span class="token operator">=</span> clone_mt<span class="token punctuation">(</span>prng<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    g<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token comment">#使用一个随机数生成器对象g生成700个32位的随机数，并将最后一个生成的随机数存储在变量key中</span><span class="token comment">#预测下一个随机数</span>key <span class="token operator">=</span> g<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token comment">#2990136190</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脚本">脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 脚本1</span><span class="token comment"># right shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">>></span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># right shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right_mask</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">>></span> shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token comment"># left shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># left shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left_mask</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> mask<span class="token punctuation">,</span> bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits <span class="token operator">//</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token keyword">def</span> <span class="token function">recover</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">:</span>    y <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> inverse_left_mask<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4022730752</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> inverse_left_mask<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2636928640</span><span class="token punctuation">)</span>    y <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>y<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> y<span class="token operator">&amp;</span><span class="token number">0xffffffff</span>random_number <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>state <span class="token operator">=</span> <span class="token punctuation">[</span>recover<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> random_number<span class="token punctuation">]</span><span class="token comment">## 脚本2</span><span class="token keyword">from</span> random <span class="token keyword">import</span> Random<span class="token keyword">def</span> <span class="token function">invert_right</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>val<span class="token operator">=</span><span class="token string">''</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token number">32</span>    mx <span class="token operator">=</span> <span class="token number">0xffffffff</span>    <span class="token keyword">if</span> val <span class="token operator">==</span> <span class="token string">''</span><span class="token punctuation">:</span>        val <span class="token operator">=</span> mx    i<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">*</span>l<span class="token operator">&lt;</span>length<span class="token punctuation">:</span>        mask <span class="token operator">=</span> <span class="token punctuation">(</span>mx<span class="token operator">&lt;&lt;</span><span class="token punctuation">(</span>length<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">&amp;</span>mx<span class="token punctuation">)</span><span class="token operator">>></span>i<span class="token operator">*</span>l        tmp <span class="token operator">=</span> m <span class="token operator">&amp;</span> mask        m <span class="token operator">=</span> m<span class="token operator">^</span>tmp<span class="token operator">>></span>l<span class="token operator">&amp;</span>val        res <span class="token operator">+=</span> tmp        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">invert_left</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>l<span class="token punctuation">,</span>val<span class="token punctuation">)</span><span class="token punctuation">:</span>    length <span class="token operator">=</span> <span class="token number">32</span>    mx <span class="token operator">=</span> <span class="token number">0xffffffff</span>    i<span class="token punctuation">,</span>res <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span>    <span class="token keyword">while</span> i<span class="token operator">*</span>l <span class="token operator">&lt;</span> length<span class="token punctuation">:</span>        mask <span class="token operator">=</span> <span class="token punctuation">(</span>mx<span class="token operator">>></span><span class="token punctuation">(</span>length<span class="token operator">-</span>l<span class="token punctuation">)</span><span class="token operator">&amp;</span>mx<span class="token punctuation">)</span><span class="token operator">&lt;&lt;</span>i<span class="token operator">*</span>l        tmp <span class="token operator">=</span> m <span class="token operator">&amp;</span> mask        m <span class="token operator">^</span><span class="token operator">=</span> tmp<span class="token operator">&lt;&lt;</span>l<span class="token operator">&amp;</span>val        res <span class="token operator">|</span><span class="token operator">=</span> tmp        i <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> res<span class="token keyword">def</span> <span class="token function">invert_temper</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> invert_right<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_left<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">4022730752</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_left<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2636928640</span><span class="token punctuation">)</span>    m <span class="token operator">=</span> invert_right<span class="token punctuation">(</span>m<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> m<span class="token keyword">def</span> <span class="token function">clone_mt</span><span class="token punctuation">(</span>record<span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> <span class="token punctuation">[</span>invert_temper<span class="token punctuation">(</span>i<span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> record<span class="token punctuation">]</span>    gen <span class="token operator">=</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    gen<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> genprng <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>g <span class="token operator">=</span> clone_mt<span class="token punctuation">(</span>prng<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">700</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    g<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>key <span class="token operator">=</span> g<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>逆twist函数（求前随机数）</h1><h2 id="twist函数">twist函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">twist</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            y <span class="token operator">=</span> _int32<span class="token punctuation">(</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x80000000</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token punctuation">(</span>self<span class="token punctuation">.</span>mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">624</span><span class="token punctuation">]</span> <span class="token operator">&amp;</span> <span class="token number">0x7fffffff</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            self<span class="token punctuation">.</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">(</span>y <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">^</span> self<span class="token punctuation">.</span>mt<span class="token punctuation">[</span><span class="token punctuation">(</span>i <span class="token operator">+</span> <span class="token number">397</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">624</span><span class="token punctuation">]</span>            <span class="token keyword">if</span> y <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>                self<span class="token punctuation">.</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> self<span class="token punctuation">.</span>mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token number">0x9908b0df</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆twist函数">逆twist函数</h2><p><img src="/post/59a1b91b/774a3cc0f03991f2925ed2b0d6090c4.jpg" alt="774a3cc0f03991f2925ed2b0d6090c4"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">backtrace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">0x80000000</span><span class="token comment">#0b10000000000000000000000000000000</span>    low <span class="token operator">=</span> <span class="token number">0x7fffffff</span><span class="token comment">#'0b1111111111111111111111111111111'</span>    mask <span class="token operator">=</span> <span class="token number">0x9908b0df</span><span class="token comment">#0b10011001000010001011000011011111'</span>    state <span class="token operator">=</span> cur    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">623</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token operator">^</span>state<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">397</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">624</span><span class="token punctuation">]</span>        <span class="token comment"># recover Y,tmp = Y</span>        <span class="token comment">#检查tmp的最高位是否为1。</span>        <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> high <span class="token operator">==</span> high<span class="token punctuation">:</span>            tmp <span class="token operator">^</span><span class="token operator">=</span> mask            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token comment"># recover highest bit</span>        <span class="token comment">#state[i]的最高位保留</span>        res <span class="token operator">=</span> tmp<span class="token operator">&amp;</span>high        <span class="token comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span>        <span class="token comment">#同理求state[i-1]</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">^</span>state<span class="token punctuation">[</span><span class="token punctuation">(</span>i<span class="token operator">+</span><span class="token number">396</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">624</span><span class="token punctuation">]</span>        <span class="token comment"># recover Y,tmp = Y</span>        <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> high <span class="token operator">==</span> high<span class="token punctuation">:</span>            tmp <span class="token operator">^</span><span class="token operator">=</span> mask            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>            <span class="token comment">#(tmp)&amp;low保留后31位</span>        res <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&amp;</span>low        state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res        <span class="token keyword">return</span> state<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="例题">例题</h2><h3 id="2020-v-n-招新赛-backtrace">2020 V&amp;N 招新赛 Backtrace</h3><h4 id="题目">题目</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># !/usr/bin/env/python3</span><span class="token keyword">import</span> randomflag <span class="token operator">=</span> <span class="token string">"flag&#123;"</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">,</span> <span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"n"</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="题解">题解</h4><p>flag是前四个随机数，这里给出1000个随机数，根据1000个随机数恢复初始state,但恢复的state缺少四个。根据624，625，626，627逆twist恢复前四位</p><h4 id="wp">wp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/python3</span><span class="token keyword">from</span> random <span class="token keyword">import</span> Random<span class="token comment"># right shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">>></span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># right shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right_values</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>mask<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp<span class="token operator">>></span>shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token comment"># left shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># left shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left_values</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>mask<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token keyword">def</span> <span class="token function">backtrace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">0x80000000</span>    low <span class="token operator">=</span> <span class="token number">0x7fffffff</span>    mask <span class="token operator">=</span> <span class="token number">0x9908b0df</span>    state <span class="token operator">=</span> cur    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token operator">^</span>state<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">397</span><span class="token punctuation">]</span>        <span class="token comment"># recover Y,tmp = Y</span>        <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> high <span class="token operator">==</span> high<span class="token punctuation">:</span>            tmp <span class="token operator">^</span><span class="token operator">=</span> mask            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token comment"># recover highest bit</span>        res <span class="token operator">=</span> tmp<span class="token operator">&amp;</span>high        <span class="token comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token operator">^</span>state<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">396</span><span class="token punctuation">]</span>        <span class="token comment"># recover Y,tmp = Y</span>        <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> high <span class="token operator">==</span> high<span class="token punctuation">:</span>            tmp <span class="token operator">^</span><span class="token operator">=</span> mask            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>        res <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&amp;</span>low        state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res    <span class="token keyword">return</span> state<span class="token keyword">def</span> <span class="token function">recover_state</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> out<span class="token punctuation">:</span>        i <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> inverse_left_values<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0xefc60000</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> inverse_left_values<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x9d2c5680</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>        state<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> statef <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"output.txt"</span><span class="token punctuation">,</span><span class="token string">"r"</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>f<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>partS <span class="token operator">=</span> recover_state<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token comment">#[0]*4长度为4的列表，其中元素都为0</span>state <span class="token operator">=</span> backtrace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">4</span><span class="token operator">+</span>partS<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token comment"># print(state)</span>prng <span class="token operator">=</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>prng<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">"flag&#123;"</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>prng<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="脚本">脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 脚本</span><span class="token keyword">from</span> random <span class="token keyword">import</span> Random<span class="token comment"># right shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">>></span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># right shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_right_values</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>mask<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp<span class="token operator">>></span>shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token comment"># left shift inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift    <span class="token keyword">return</span> tmp<span class="token comment"># left shift with mask inverse</span><span class="token keyword">def</span> <span class="token function">inverse_left_values</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">,</span>mask<span class="token punctuation">,</span>bits<span class="token operator">=</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>bits<span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> res <span class="token operator">^</span> tmp <span class="token operator">&lt;&lt;</span> shift <span class="token operator">&amp;</span> mask    <span class="token keyword">return</span> tmp<span class="token keyword">def</span> <span class="token function">backtrace</span><span class="token punctuation">(</span>cur<span class="token punctuation">)</span><span class="token punctuation">:</span>    high <span class="token operator">=</span> <span class="token number">0x80000000</span>    low <span class="token operator">=</span> <span class="token number">0x7fffffff</span>    mask <span class="token operator">=</span> <span class="token number">0x9908b0df</span>    state <span class="token operator">=</span> cur    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token operator">^</span>state<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">397</span><span class="token punctuation">]</span>        <span class="token comment"># recover Y,tmp = Y</span>        <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> high <span class="token operator">==</span> high<span class="token punctuation">:</span>            tmp <span class="token operator">^</span><span class="token operator">=</span> mask            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>        <span class="token comment"># recover highest bit</span>        res <span class="token operator">=</span> tmp<span class="token operator">&amp;</span>high        <span class="token comment"># recover other 31 bits,when i =0,it just use the method again it so beautiful!!!!</span>        tmp <span class="token operator">=</span> state<span class="token punctuation">[</span>i<span class="token operator">-</span><span class="token number">1</span><span class="token operator">+</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token operator">^</span>state<span class="token punctuation">[</span>i<span class="token operator">+</span><span class="token number">396</span><span class="token punctuation">]</span>        <span class="token comment"># recover Y,tmp = Y</span>        <span class="token keyword">if</span> tmp <span class="token operator">&amp;</span> high <span class="token operator">==</span> high<span class="token punctuation">:</span>            tmp <span class="token operator">^</span><span class="token operator">=</span> mask            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span> <span class="token number">1</span>            tmp <span class="token operator">|</span><span class="token operator">=</span> <span class="token number">1</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            tmp <span class="token operator">&lt;&lt;</span><span class="token operator">=</span><span class="token number">1</span>        res <span class="token operator">|</span><span class="token operator">=</span> <span class="token punctuation">(</span>tmp<span class="token punctuation">)</span><span class="token operator">&amp;</span>low        state<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> res    <span class="token keyword">return</span> state<span class="token keyword">def</span> <span class="token function">recover_state</span><span class="token punctuation">(</span>out<span class="token punctuation">)</span><span class="token punctuation">:</span>    state <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> out<span class="token punctuation">:</span>        i <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">18</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> inverse_left_values<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">15</span><span class="token punctuation">,</span><span class="token number">0xefc60000</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> inverse_left_values<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">0x9d2c5680</span><span class="token punctuation">)</span>        i <span class="token operator">=</span> inverse_right<span class="token punctuation">(</span>i<span class="token punctuation">,</span><span class="token number">11</span><span class="token punctuation">)</span>        state<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">return</span> statec <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>partS <span class="token operator">=</span> recover_state<span class="token punctuation">(</span>c<span class="token punctuation">)</span>state <span class="token operator">=</span> backtrace<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">6</span><span class="token operator">+</span>partS<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token comment"># print(state)</span><span class="token comment"># state[0]不准确，因state[0]==seed，单推</span><span class="token comment"># inv = invert(1812433253,1&lt;&lt;32)</span><span class="token comment"># seed = inverse_right(((state[1]-1)*inv)%(1&lt;&lt;32),30)</span><span class="token comment"># state[0] = int(seed)</span>prng <span class="token operator">=</span> Random<span class="token punctuation">(</span><span class="token punctuation">)</span>prng<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token builtin">tuple</span><span class="token punctuation">(</span>state<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">"flag&#123;"</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>prng<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">"&#125;"</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>逆向init（求seed)</h1><p>根据第一次的state，逆向seed。</p><h2 id="init函数">init函数</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">_int32</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0xFFFFFFFF</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">:</span>    mt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">624</span>    mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> seed    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _int32<span class="token punctuation">(</span><span class="token number">1812433253</span> <span class="token operator">*</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    <span class="token keyword">return</span> mt<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>=</mo></mrow><annotation encoding="application/x-tex">mt[i] =</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span></span></span>_ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>i</mi><mi>n</mi><mi>t</mi><mn>32</mn><mo stretchy="false">(</mo><mn>1812433253</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">int32(1812433253 * (mt[i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mord">3</span><span class="mord">2</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">8</span><span class="mord">1</span><span class="mord">2</span><span class="mord">4</span><span class="mord">3</span><span class="mord">3</span><span class="mord">2</span><span class="mord">5</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ^ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mo>&gt;</mo><mn>30</mn><mo stretchy="false">)</mo><mo>+</mo><mi>i</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">mt[i - 1] &gt;&gt; 30) + i)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></p><p><em>int32相当于在模  <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mn>32</mn></msup></mrow><annotation encoding="application/x-tex">2^{32}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8141079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></em>,<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>g</mi><mi>c</mi><mi>d</mi><mo stretchy="false">(</mo><mn>1812433253</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>32</mn></msup><mo stretchy="false">)</mo><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">gcd(1812433253,2^{32})=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.064108em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord mathdefault">c</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord">1</span><span class="mord">8</span><span class="mord">1</span><span class="mord">2</span><span class="mord">4</span><span class="mord">3</span><span class="mord">3</span><span class="mord">2</span><span class="mord">5</span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">3</span><span class="mord mtight">2</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>,求出1812433253的逆元inv</p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo stretchy="false">]</mo><mo>∗</mo><mi>i</mi><mi>n</mi><mi>v</mi><mo>−</mo><mi>i</mi><mo>≡</mo><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mt[i] *inv -i\equiv mt[i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.74285em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ^ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mo>&gt;</mo><mn>30</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">mt[i - 1] &gt;&gt; 30)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mord">0</span><span class="mclose">)</span></span></span></span></p><p><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mt[i - 1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> ^ <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo><mo>&gt;</mo><mo>&gt;</mo><mn>30</mn></mrow><annotation encoding="application/x-tex">mt[i - 1] &gt;&gt; 30</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">0</span></span></span></span>可知<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mt[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 的高30位，可推出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mt[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> &gt;&gt;30的高60位，计算出<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mt[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span> 的高60位…依次恢复<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi><mi>t</mi><mo stretchy="false">[</mo><mi>i</mi><mo>−</mo><mn>1</mn><mo stretchy="false">]</mo></mrow><annotation encoding="application/x-tex">mt[i-1]</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord mathdefault">t</span><span class="mopen">[</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">]</span></span></span></span></p><h2 id="脚本">脚本</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invert<span class="token keyword">def</span> <span class="token function">_int32</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">0xFFFFFFFF</span> <span class="token operator">&amp;</span> x<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">init</span><span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token punctuation">:</span>    mt <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> <span class="token number">624</span>    mt<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">=</span> seed    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        mt<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">=</span> _int32<span class="token punctuation">(</span><span class="token number">1812433253</span> <span class="token operator">*</span> <span class="token punctuation">(</span>mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">^</span> mt<span class="token punctuation">[</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">>></span> <span class="token number">30</span><span class="token punctuation">)</span> <span class="token operator">+</span> i<span class="token punctuation">)</span>    <span class="token keyword">return</span> mtseed <span class="token operator">=</span> <span class="token number">2080737669</span><span class="token keyword">def</span> <span class="token function">invert_right</span><span class="token punctuation">(</span>res<span class="token punctuation">,</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp <span class="token operator">=</span> res    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token operator">//</span>shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> tmp<span class="token operator">^</span>res<span class="token operator">>></span>shift    <span class="token keyword">return</span> _int32<span class="token punctuation">(</span>res<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">recover</span><span class="token punctuation">(</span>last<span class="token punctuation">)</span><span class="token punctuation">:</span>    n <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">32</span>    inv <span class="token operator">=</span> invert<span class="token punctuation">(</span><span class="token number">1812433253</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">623</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        last <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>last<span class="token operator">-</span>i<span class="token punctuation">)</span><span class="token operator">*</span>inv<span class="token punctuation">)</span><span class="token operator">%</span>n        last <span class="token operator">=</span> invert_right<span class="token punctuation">(</span>last<span class="token punctuation">,</span><span class="token number">30</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> laststate <span class="token operator">=</span> init<span class="token punctuation">(</span>seed<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>recover<span class="token punctuation">(</span>state<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> seed<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>python3</h1><h2 id="逆extract-number-求后随机数">逆extract_number（求后随机数）</h2><h3 id="mersenne-twister-predictor"><strong>Mersenne Twister Predictor</strong></h3><p><code>mt19937predictor</code> 是一个用于对 Mersenne Twister 进行状态预测的库，它允许用户根据已观察到的输出，推测 Mersenne Twister 的内部状态，从而预测未来的随机输出。使用 <code>setrandbits</code> 方法来更新内部状态，使用 <code>getrandbits</code> 方法来进行状态预测（获取随机数）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> mt19937predictor <span class="token keyword">import</span> MT19937Predictorpredictor <span class="token operator">=</span> MT19937Predictor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x <span class="token operator">=</span> random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span>    <span class="token comment">#更新 Mersenne Twister 预测器的内部状态，传入一个给定的 32 位随机整数 x</span>    predictor<span class="token punctuation">.</span>setrandbits<span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">)</span><span class="token keyword">assert</span> random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">==</span> predictor<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="randcrack"><strong>randcrack</strong></h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> randcrack <span class="token keyword">import</span> RandCrack<span class="token comment">#random预测的时候默认以当前时间作为随机数种子</span>rc <span class="token operator">=</span> RandCrack<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#实例化randcrack类</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#循环624次</span>    rc<span class="token punctuation">.</span>submit<span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#每次循环提交一个32位random生成的随机数</span><span class="token keyword">print</span><span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#利用random库获取一个64位的随机数（你可以修改为任意位数）</span><span class="token keyword">print</span><span class="token punctuation">(</span>rc<span class="token punctuation">.</span>predict_getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#利用randcrack获取的下一个随机数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="逆-twist-求前随机数">逆 <code>twist()</code>（求前随机数）</h2><ul><li><p><strong>Extend MT19937 Predictor</strong></p><p><a href="https://github.com/NonupleBroken/ExtendMT19937Predictor">https://github.com/NonupleBroken/ExtendMT19937Predictor</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> random<span class="token keyword">from</span> extend_mt19937_predictor <span class="token keyword">import</span> ExtendMT19937Predictor<span class="token comment">#生成1024个64位的伪随机数并存储在列表numbers中：</span>numbers <span class="token operator">=</span> <span class="token punctuation">[</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">]</span>predictor <span class="token operator">=</span> ExtendMT19937Predictor<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#使用256位的随机数值(随机种子)来初始化预测器状态</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#循环78次，每次迭代都会使用256位的随机数值来初始化预测器状态</span>    predictor<span class="token punctuation">.</span>setrandbits<span class="token punctuation">(</span>random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">256</span><span class="token punctuation">)</span><span class="token comment">#回溯78次</span>_ <span class="token operator">=</span> <span class="token punctuation">[</span>predictor<span class="token punctuation">.</span>backtrack_getrandbits<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">78</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token comment">#验证回溯是否正确</span><span class="token keyword">for</span> x <span class="token keyword">in</span> numbers<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> x <span class="token operator">==</span> predictor<span class="token punctuation">.</span>backtrack_getrandbits<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></li></ul>]]></content>
      
      
      <categories>
          
          <category> 刷题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> MT19937 流密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>流密码</title>
      <link href="/post/fb8b77a1.html"/>
      <url>/post/fb8b77a1.html</url>
      
        <content type="html"><![CDATA[<h1>流密码（<strong>Stream cipher</strong>）</h1><p><a href="https://lazzzaro.github.io/2020/11/07/crypto-%E6%B5%81%E5%AF%86%E7%A0%81/">流密码 | Lazzaro (lazzzaro.github.io)</a></p><p><a href="https://developer.aliyun.com/article/803607#slide-0">密码学复习——第二章（流密码）-阿里云开发者社区 (aliyun.com)</a></p><p><a href="https://blog.csdn.net/weixin_46733442/article/details/107413687">(144条消息) 流密码（一次一密、流密码/序列密码、LFSR、RC4)_Yongliang Xu的博客-CSDN博客</a></p><ul><li>明文逐位与密钥流进行异或运算，生成密文流</li><li>又称序列密码</li><li>对称加密算法，加密和解密双方使用相同伪随机加密数据流（pseudo-random stream）作为密钥</li><li>流密码的安全性依赖于生成高质量的密钥流。</li><li>密钥流应该是伪随机的，不可预测的，并且对于同一个密钥，不应该重复出现。</li></ul><h2 id="二元加法流密码">二元加法流密码</h2><p>一种基于二进制加法运算的流密码算法。它使用一个密钥流和明文流进行逐位的二进制加法运算，生成密文流</p><p><img src="/post/fb8b77a1/8128be7b4e454f89aab7f8d2ce984b0b.png" alt="img"></p><h2 id="一次一密-one-time-pad">一次一密（one-time pad）</h2><ul><li><p>又称Vernam加密法</p></li><li><p>将明文与随机生成的密钥进行异或运算来实现加密和解密</p></li><li><p>密钥：与明文等长、完全随机、只使用一次，并且发送者和接收者在事先共享同一密钥。</p></li><li><p>不能提供完整性验证和认证</p><p><img src="/post/fb8b77a1/1.png" alt="在这里插入图片描述"></p></li></ul><p>一次一密的密钥长度和明文一样长，流密码不是，需要种子密钥通过密钥生成器产生密钥流</p><h2 id="多次一密-many-time-pad-attack">多次一密（Many Time Pad Attack）</h2><p><a href="https://www.ruanx.net/many-time-pad/">Many-Time-Pad 攻击 (ruanx.net)</a></p><p>多次一密攻击的关键在于密钥重复使用。由于密钥序列在多次加密中重复使用，攻击者可以通过异或运算的性质，推断出密钥流的一部分或全部内容，从而破解密钥和解密密文。</p><h3 id="异或运算性质">异或运算性质</h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>异或运算的性质</mtext><mspace linebreak="newline"></mspace><mtext>交换律                     </mtext><mi>a</mi><mo>⊕</mo><mi>b</mi><mo>=</mo><mi>b</mi><mo>⊕</mo><mi>a</mi><mspace linebreak="newline"></mspace><mtext>结合律    </mtext><mi>a</mi><mo>⊕</mo><mi>b</mi><mo>⊕</mo><mi>c</mi><mo>=</mo><mi>a</mi><mo>⊕</mo><mo stretchy="false">(</mo><mi>b</mi><mo>⊕</mo><mi>c</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>规定        </mtext><mi>a</mi><mo>⊕</mo><mi>a</mi><mo>=</mo><mn>0</mn><mtext>      </mtext><mi>a</mi><mo>⊕</mo><mn>0</mn><mo>=</mo><mi>a</mi><mspace linebreak="newline"></mspace><mtext>自反性      </mtext><mi>a</mi><mo>⊕</mo><mi>b</mi><mo>⊕</mo><mi>b</mi><mo>=</mo><mi>a</mi><mo>⊕</mo><mn>0</mn><mo>=</mo><mi>a</mi><mspace linebreak="newline"></mspace><mtext>可移项性  </mtext><mi>a</mi><mo>⊕</mo><mi>b</mi><mo>=</mo><mi>c</mi><mo>−</mo><mo>&gt;</mo><mi>a</mi><mo>=</mo><mi>b</mi><mo>⊕</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">异或运算的性质\\交换律\ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \ \  a⊕b=b⊕a\\结合律\ \ \ \  a⊕b⊕c=a⊕(b⊕c)\\规定  \ \ \ \ \ \ \ \ a⊕a=0\ \ \ \ \ \ a⊕0=a\\自反性\ \ \ \  \ \ a⊕b⊕b=a⊕0=a\\可移项性\ \ a⊕b = c -&gt; a = b⊕c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">异</span><span class="mord cjk_fallback">或</span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">性</span><span class="mord cjk_fallback">质</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">交</span><span class="mord cjk_fallback">换</span><span class="mord cjk_fallback">律</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">律</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">c</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">规</span><span class="mord cjk_fallback">定</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">自</span><span class="mord cjk_fallback">反</span><span class="mord cjk_fallback">性</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">移</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">性</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></span></p><p>这个攻击的原理是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>c</mi><mn>2</mn></msub><mo>=</mo><mo stretchy="false">(</mo><msub><mi>m</mi><mn>1</mn></msub><mo>⊕</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mo>⊕</mo><mo stretchy="false">(</mo><msub><mi>m</mi><mn>2</mn></msub><mo>⊕</mo><mi>k</mi><mi>e</mi><mi>y</mi><mo stretchy="false">)</mo><mo>=</mo><msub><mi>m</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>m</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_1⊕c_2 =(m_1⊕key)⊕(m_2⊕key)= m_1⊕m_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，而通过 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>c</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>c</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">c_1⊕c_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 可以分析出 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>m</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">m_1⊕m_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span>，因此 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msub><mi>m</mi><mn>1</mn></msub><mo>⊕</mo><msub><mi>m</mi><mn>2</mn></msub></mrow><annotation encoding="application/x-tex">m_1⊕m_2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.73333em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.58056em;vertical-align:-0.15em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 不再安全。</p><p>两个密文的异或，就等于对应明文的异或,可以通过频率分析，来破译这些密文。</p><h3 id="ascii表">ascii表</h3><p>ascii 码表在 Linux 下可以通过 <code>man ascii</code> 指令查看。它的性质有：</p><ul><li><code>0x20</code> 是空格。 低于 <code>0x20</code> 的，全部是起特殊用途的字符； <code>0x20~0x7E</code> 的，是可打印字符。</li><li><code>0x30~0x39</code> 是数字 <code>0,1,2...9</code>。</li><li><code>0x41~0x5A</code> 是大写字母 <code>A-Z</code>； <code>0x61~0x7A</code> 是小写字母 <code>a-z</code></li></ul><p>小写字母 ⊕ 空格，会得到对应的大写字母；大写字母 ⊕ 空格，会得到小写字母！所以，如果x ⊕ y得到一个英文字母，那么中的某一个有很大概率是空格</p><h3 id="例题-afctf2018-你听过一次一密么？">例题–[AFCTF2018]你听过一次一密么？</h3><h4 id="题目">题目</h4><pre class="line-numbers language-none"><code class="language-none">25030206463d3d393131555f7f1d061d4052111a19544e2e5d0f020606150f203f307f5c0a7f24070747130e16545000035d1203075429152a7020365c167f390f1013170b1006481e13140f4610170e1e2235787f7853372c0f065752111b15454e0e09081543000e1e6f3f3a3348533a270d064a02111a1b5f4e0a180909075412132e247436425332281a1c561f04071d520f0b114116111b101e2170203011113a69001b475206011552050219041006064612297020375453342c17545a01451811411a470e021311114a5b0335207f7c167f22001b44520c15544801125d06140611460c26243c7f5c167f3d015446010053005907145d0f05110d160f263f3a7f4210372c03111313090415481d49<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>攻击击过程显而易见：对于每一条密文c1，拿去异或其他所有密文。然后去数每一列有多少个英文字符，作为c1在这一位是空格的评分。</p><p>上面的事情做完时候，依据评分从大到小排序，依次利用 “某个明文的某一位是空格” 这种信息恢复出所有明文的那一列。如果产生冲突，则舍弃掉评分小的。</p><p>脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#脚本1</span><span class="token keyword">import</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>strxor <span class="token keyword">as</span> xo<span class="token keyword">import</span> libnum<span class="token punctuation">,</span> codecs<span class="token punctuation">,</span> numpy <span class="token keyword">as</span> np<span class="token keyword">def</span> <span class="token function">isChr</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'a'</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> x <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'z'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">if</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'A'</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> x <span class="token keyword">and</span> x <span class="token operator">&lt;=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">'Z'</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token keyword">return</span> <span class="token boolean">True</span>    <span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">def</span> <span class="token function">infer</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> msg<span class="token punctuation">[</span>index<span class="token punctuation">,</span> pos<span class="token punctuation">]</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span>    msg<span class="token punctuation">[</span>index<span class="token punctuation">,</span> pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> index<span class="token punctuation">:</span>            msg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> xo<span class="token punctuation">.</span>strxor<span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span><span class="token string">' '</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">know</span><span class="token punctuation">(</span>index<span class="token punctuation">,</span> pos<span class="token punctuation">,</span> ch<span class="token punctuation">)</span><span class="token punctuation">:</span>    msg<span class="token punctuation">[</span>index<span class="token punctuation">,</span> pos<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> x <span class="token operator">!=</span> index<span class="token punctuation">:</span>            msg<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">=</span> xo<span class="token punctuation">.</span>strxor<span class="token punctuation">(</span>c<span class="token punctuation">[</span>x<span class="token punctuation">]</span><span class="token punctuation">,</span> c<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>ch<span class="token punctuation">)</span>dat <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">def</span> <span class="token function">getSpace</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> index<span class="token punctuation">,</span> x <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> <span class="token punctuation">[</span>xo<span class="token punctuation">.</span>strxor<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">for</span> y <span class="token keyword">in</span> c <span class="token keyword">if</span> x<span class="token operator">!=</span>y<span class="token punctuation">]</span>        f <span class="token operator">=</span> <span class="token keyword">lambda</span> pos<span class="token punctuation">:</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">filter</span><span class="token punctuation">(</span>isChr<span class="token punctuation">,</span> <span class="token punctuation">[</span>s<span class="token punctuation">[</span>pos<span class="token punctuation">]</span> <span class="token keyword">for</span> s <span class="token keyword">in</span> res<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        cnt <span class="token operator">=</span> <span class="token punctuation">[</span>f<span class="token punctuation">(</span>pos<span class="token punctuation">)</span> <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> pos <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            dat<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">(</span>f<span class="token punctuation">(</span>pos<span class="token punctuation">)</span><span class="token punctuation">,</span> index<span class="token punctuation">,</span> pos<span class="token punctuation">)</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token punctuation">[</span>codecs<span class="token punctuation">.</span>decode<span class="token punctuation">(</span>x<span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token string">'hex'</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'Problem.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>readlines<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">]</span>msg <span class="token operator">=</span> np<span class="token punctuation">.</span>zeros<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span> dtype<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">)</span>getSpace<span class="token punctuation">(</span><span class="token punctuation">)</span>dat <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span>dat<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">for</span> w<span class="token punctuation">,</span> index<span class="token punctuation">,</span> pos <span class="token keyword">in</span> dat<span class="token punctuation">:</span>    infer<span class="token punctuation">(</span>index<span class="token punctuation">,</span> pos<span class="token punctuation">)</span>know<span class="token punctuation">(</span><span class="token number">10</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token string">'y'</span><span class="token punctuation">)</span>know<span class="token punctuation">(</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token string">'n'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'\n'</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> x<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> msg<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key <span class="token operator">=</span> xo<span class="token punctuation">.</span>strxor<span class="token punctuation">(</span>c<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span> <span class="token keyword">for</span> c <span class="token keyword">in</span> msg<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>key<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#脚本2</span><span class="token comment">#!/usr/bin/python</span><span class="token comment">## OTP - Recovering the private key from a set of messages that were encrypted w/ the same private key (Many time pad attack) - crypto100-many_time_secret @ alexctf 2017</span><span class="token comment"># Original code by jwomers: https://github.com/Jwomers/many-time-pad-attack/blob/master/attack.py)</span><span class="token keyword">import</span> string<span class="token keyword">import</span> collections<span class="token keyword">import</span> sets<span class="token punctuation">,</span> sys<span class="token comment"># 11 unknown ciphertexts (in hex format), all encrpyted with the same key</span>c1<span class="token operator">=</span><span class="token string">'daaa4b4e8c996dc786889cd63bc4df4d1e7dc6f3f0b7a0b61ad48811f6f7c9bfabd7083c53ba54'</span>c2<span class="token operator">=</span><span class="token string">'c5a342468c8c7a88999a9dd623c0cc4b0f7c829acaf8f3ac13c78300b3b1c7a3ef8e193840bb'</span>c3<span class="token operator">=</span><span class="token string">'dda342458c897a8285df879e3285ce511e7c8d9afff9b7ff15de8a16b394c7bdab920e7946a05e9941d8308e'</span>c4<span class="token operator">=</span><span class="token string">'d9b05b4cd5ce7c8f938bd39e24d0df191d7694dfeaf8bfbb56e28900e1b8dff1bb985c2d5aa154'</span>c5<span class="token operator">=</span><span class="token string">'d9aa4b00c88b7fc79d99d38223c08d54146b88d3f0f0f38c03df8d52f0bfc1bda3d7133712a55e9948c32c8a'</span>c6<span class="token operator">=</span><span class="token string">'c4b60e46c9827cc79e9698936bd1c55c5b6e87c8f0febdb856fe8052e4bfc9a5efbe5c3f57ad4b9944de34'</span>c7<span class="token operator">=</span><span class="token string">'d9aa5700da817f94d29e81936bc4c1555b7b94d5f5f2bdff37df8252ffbecfb9bbd7152a12bc4fc00ad7229090'</span>c8<span class="token operator">=</span><span class="token string">'c4e24645cd9c28939a86d3982ac8c819086989d1fbf9f39e18d5c601fbb6dab4ef9e12795bbc549959d9229090'</span>c9<span class="token operator">=</span><span class="token string">'d9aa4b598c80698a97df879e2ec08d5b1e7f89c8fbb7beba56f0c619fdb2c4bdef8313795fa149dc0ad4228f'</span>c10<span class="token operator">=</span><span class="token string">'cce25d48d98a6c8280df909926c0de19143983c8befab6ff21d99f52e4b2daa5ef83143647e854d60ad5269c87'</span>c11<span class="token operator">=</span><span class="token string">'d9aa4b598c85668885df9d993f85e419107783cdbee3bbba1391b11afcf7c3bfaa805c2d5aad42995ede2cdd82977244'</span>ciphers <span class="token operator">=</span> <span class="token punctuation">[</span>c1<span class="token punctuation">,</span> c2<span class="token punctuation">,</span> c3<span class="token punctuation">,</span> c4<span class="token punctuation">,</span> c5<span class="token punctuation">,</span> c6<span class="token punctuation">,</span> c7<span class="token punctuation">,</span> c8<span class="token punctuation">,</span> c9<span class="token punctuation">,</span> c10<span class="token punctuation">,</span> c11<span class="token punctuation">]</span><span class="token comment"># The target ciphertext we want to crack</span><span class="token comment"># XORs two string</span><span class="token keyword">def</span> <span class="token function">strxor</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>     <span class="token comment"># xor two strings (trims the longer input)</span>    <span class="token keyword">return</span> <span class="token string">""</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">chr</span><span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token operator">^</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>y<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">target_fix</span><span class="token punctuation">(</span>target_cipher<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span> <span class="token string">'-------begin-------'</span>    <span class="token comment"># To store the final key</span>    final_key <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token boolean">None</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token number">150</span>    <span class="token comment"># To store the positions we know are broken</span>    known_key_positions <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment"># For each ciphertext</span>    <span class="token keyword">for</span> current_index<span class="token punctuation">,</span> ciphertext <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>ciphers<span class="token punctuation">)</span><span class="token punctuation">:</span>        counter <span class="token operator">=</span> collections<span class="token punctuation">.</span>Counter<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token comment"># for each other ciphertext</span>        <span class="token keyword">for</span> index<span class="token punctuation">,</span> ciphertext2 <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>ciphers<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> current_index <span class="token operator">!=</span> index<span class="token punctuation">:</span> <span class="token comment"># don't xor a ciphertext with itself</span>                <span class="token keyword">for</span> indexOfChar<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>strxor<span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span> ciphertext2<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment"># Xor the two ciphertexts</span>                    <span class="token comment"># If a character in the xored result is a alphanumeric character, it means there was probably a space character in one of the plaintexts (we don't know which one)</span>                    <span class="token keyword">if</span> char <span class="token keyword">in</span> string<span class="token punctuation">.</span>printable <span class="token keyword">and</span> char<span class="token punctuation">.</span>isalpha<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span> counter<span class="token punctuation">[</span>indexOfChar<span class="token punctuation">]</span> <span class="token operator">+=</span> <span class="token number">1</span> <span class="token comment"># Increment the counter at this index</span>        knownSpaceIndexes <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token comment"># Loop through all positions where a space character was possible in the current_index cipher</span>        <span class="token keyword">for</span> ind<span class="token punctuation">,</span> val <span class="token keyword">in</span> counter<span class="token punctuation">.</span>items<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment"># If a space was found at least 7 times at this index out of the 9 possible XORS, then the space character was likely from the current_index cipher!</span>            <span class="token keyword">if</span> val <span class="token operator">>=</span> <span class="token number">7</span><span class="token punctuation">:</span> knownSpaceIndexes<span class="token punctuation">.</span>append<span class="token punctuation">(</span>ind<span class="token punctuation">)</span>        <span class="token comment">#print knownSpaceIndexes # Shows all the positions where we now know the key!</span>        <span class="token comment"># Now Xor the current_index with spaces, and at the knownSpaceIndexes positions we get the key back!</span>        xor_with_spaces <span class="token operator">=</span> strxor<span class="token punctuation">(</span>ciphertext<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token string">' '</span><span class="token operator">*</span><span class="token number">150</span><span class="token punctuation">)</span>        <span class="token keyword">for</span> index <span class="token keyword">in</span> knownSpaceIndexes<span class="token punctuation">:</span>            <span class="token comment"># Store the key's value at the correct position</span>            final_key<span class="token punctuation">[</span>index<span class="token punctuation">]</span> <span class="token operator">=</span> xor_with_spaces<span class="token punctuation">[</span>index<span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span>            <span class="token comment"># Record that we known the key at this position</span>            known_key_positions<span class="token punctuation">.</span>add<span class="token punctuation">(</span>index<span class="token punctuation">)</span>    <span class="token comment"># Construct a hex key from the currently known key, adding in '00' hex chars where we do not know (to make a complete hex string)</span>    final_key_hex <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>val <span class="token keyword">if</span> val <span class="token keyword">is</span> <span class="token keyword">not</span> <span class="token boolean">None</span> <span class="token keyword">else</span> <span class="token string">'00'</span> <span class="token keyword">for</span> val <span class="token keyword">in</span> final_key<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment"># Xor the currently known key with the target cipher</span>    output <span class="token operator">=</span> strxor<span class="token punctuation">(</span>target_cipher<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">,</span>final_key_hex<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span> <span class="token string">"Fix this sentence:"</span>    <span class="token keyword">print</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span>char <span class="token keyword">if</span> index <span class="token keyword">in</span> known_key_positions <span class="token keyword">else</span> <span class="token string">'*'</span> <span class="token keyword">for</span> index<span class="token punctuation">,</span> char <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>output<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">"\n"</span>    <span class="token comment"># WAIT.. MANUAL STEP HERE </span>    <span class="token comment"># This output are printing a * if that character is not known yet</span>    <span class="token comment"># fix the missing characters like this: "Let*M**k*ow if *o&#123;*a" = "cure, Let Me know if you a"</span>    <span class="token comment"># if is too hard, change the target_cipher to another one and try again</span>    <span class="token comment"># and we have our key to fix the entire text!</span>    <span class="token comment">#sys.exit(0) #comment and continue if u got a good key</span>    <span class="token keyword">print</span> <span class="token string">'------end------'</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> ciphers<span class="token punctuation">:</span>    target_fix<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="伪随机密钥流">伪随机密钥流</h2><h3 id="伪随机序列"><strong>伪随机序列</strong></h3><p>伪随机序列也就是，即使截获其中一段,也无法推测后面是什么。（只能要求截获比周期短的一段密钥流时不会泄露更多信息, 这样的序列称为伪随机序列。）</p><h3 id="伪随机数生成器">伪随机数生成器</h3><h4 id="线性同余生成器-线性同余方法-lcg">线性同余生成器 / 线性同余方法（LCG）</h4><p>线性同余方法（LCG）是个产生伪随机数的方法</p><p><img src="/post/fb8b77a1/%E7%BA%BF%E6%80%A7%E5%90%8C%E4%BD%99%E6%B3%95.png" alt="《图解密码技术》笔记（二） | yucs's Blog"></p><p>LCG的性能和随机性取决于选取的参数。如果选择恰当的参数，LCG可以生成长周期和均匀分布的伪随机数序列。然而，不恰当的参数选择可能导致序列的周期较短或者存在可预测的模式，从而影响其随机性和安全性</p><p>LCG的周期最大为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>，但大部分情况都会少于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span>。要令LCG达到最大周期，应符合以下条件：</p><ol><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>B</mi><mo separator="true">,</mo><mi>M</mi></mrow><annotation encoding="application/x-tex">B,M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 互质；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 的所有质因数都能整除 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">A-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>；</li><li>若 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 是4的倍数，<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">A-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">A</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span> 也是；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi><mo separator="true">,</mo><msub><mi>N</mi><mn>0</mn></msub></mrow><annotation encoding="application/x-tex">A,B,N_{0}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.10903em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">0</span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span></span></span></span> 都比 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi></mrow><annotation encoding="application/x-tex">M</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span></span></span></span> 小；</li><li><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>A</mi><mo separator="true">,</mo><mi>B</mi></mrow><annotation encoding="application/x-tex">A,B</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">A</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.05017em;">B</span></span></span></span> 是正整数。</li></ol><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> functools <span class="token keyword">import</span> <span class="token builtin">reduce</span><span class="token keyword">from</span> math <span class="token keyword">import</span> gcd<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">egcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>b<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        g<span class="token punctuation">,</span> y<span class="token punctuation">,</span> x <span class="token operator">=</span> egcd<span class="token punctuation">(</span>b <span class="token operator">%</span> a<span class="token punctuation">,</span> a<span class="token punctuation">)</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>g<span class="token punctuation">,</span> x <span class="token operator">-</span> <span class="token punctuation">(</span>b <span class="token operator">//</span> a<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">modinv</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    g<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> egcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span> m<span class="token punctuation">)</span>    <span class="token keyword">if</span> g <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">'modular inverse does not exist'</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> x <span class="token operator">%</span> m<span class="token keyword">def</span> <span class="token function">crack_unknown_increment</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> modulus<span class="token punctuation">,</span> multiplier<span class="token punctuation">)</span><span class="token punctuation">:</span>    increment <span class="token operator">=</span> <span class="token punctuation">(</span>states<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> states<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token operator">*</span>multiplier<span class="token punctuation">)</span> <span class="token operator">%</span> modulus    <span class="token keyword">return</span> modulus<span class="token punctuation">,</span> multiplier<span class="token punctuation">,</span> increment<span class="token keyword">def</span> <span class="token function">crack_unknown_multiplier</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> modulus<span class="token punctuation">)</span><span class="token punctuation">:</span>    multiplier <span class="token operator">=</span> <span class="token punctuation">(</span>states<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">-</span> states<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> modinv<span class="token punctuation">(</span>states<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">-</span> states<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> modulus<span class="token punctuation">)</span> <span class="token operator">%</span> modulus    <span class="token keyword">return</span> crack_unknown_increment<span class="token punctuation">(</span>states<span class="token punctuation">,</span> modulus<span class="token punctuation">,</span> multiplier<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">crack_unknown_modulus</span><span class="token punctuation">(</span>states<span class="token punctuation">)</span><span class="token punctuation">:</span>    diffs <span class="token operator">=</span> <span class="token punctuation">[</span>s1 <span class="token operator">-</span> s0 <span class="token keyword">for</span> s0<span class="token punctuation">,</span> s1 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>states<span class="token punctuation">,</span> states<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    zeroes <span class="token operator">=</span> <span class="token punctuation">[</span>t2<span class="token operator">*</span>t0 <span class="token operator">-</span> t1<span class="token operator">*</span>t1 <span class="token keyword">for</span> t0<span class="token punctuation">,</span> t1<span class="token punctuation">,</span> t2 <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>diffs<span class="token punctuation">,</span> diffs<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> diffs<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span>    modulus <span class="token operator">=</span> <span class="token builtin">abs</span><span class="token punctuation">(</span><span class="token builtin">reduce</span><span class="token punctuation">(</span>gcd<span class="token punctuation">,</span> zeroes<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> crack_unknown_multiplier<span class="token punctuation">(</span>states<span class="token punctuation">,</span> modulus<span class="token punctuation">)</span><span class="token comment"># N[i+1] = (A*N[i]+B) % M</span><span class="token comment"># A,B,N均未知</span>sequence <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>modulus<span class="token punctuation">,</span> multiplier<span class="token punctuation">,</span> increment <span class="token operator">=</span> crack_unknown_modulus<span class="token punctuation">(</span>sequence<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'A = '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>multiplier<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'B = '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>increment<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'N = '</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>modulus<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="线性反馈移位寄存器-linear-feedback-shift-register-简称lfsr">线性反馈移位寄存器（Linear Feedback Shift Register，简称LFSR）</h4><p>用于生成一个伪随机的比特序列，常用于加密、编码、通信等领域。</p><p>移位寄存器是流密码产生密钥流的一个主要组成部分，GF（2）上一个n级反馈移位寄存器由n个二元存储器与一个反馈函数组成。</p><p><img src="/post/fb8b77a1/FSR.png" alt="img"></p><p>移位寄存器三要素：</p><ol><li>初始状态：由用户确定</li><li>反馈函数：<span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo stretchy="false">(</mo><msub><mi>a</mi><mn>1</mn></msub><mo separator="true">,</mo><msub><mi>a</mi><mn>2</mn></msub><mo separator="true">,</mo><mo>⋯</mo><mtext> </mtext><mo separator="true">,</mo><msub><mi>a</mi><mi>n</mi></msub><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f(a_1,a_2,\cdots,a_n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner">⋯</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mclose">)</span></span></span></span> 是 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 元布尔函数，即函数的自变量和因变量只取0和1这两个可能值（题目给出）</li><li>输出序列</li></ol><p><img src="/post/fb8b77a1/image-20230715153526370.png" alt="image-20230715153526370"></p><p>对于 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi></mrow><annotation encoding="application/x-tex">n</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span></span></span> 级线性反馈移位寄存器</p><ul><li><strong>最长周期</strong>为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^n-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.747722em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">n</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>（排除全0），达到最长周期的序列一般称为 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>m</mi></mrow><annotation encoding="application/x-tex">m</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">m</span></span></span></span> 序列。</li><li>完全由其反馈函数决定。</li><li>n级LFSR状态数：最多有2^n个</li><li>输出序列的周期 = 状态周期 &lt;= 2^n - 1</li></ul><h3 id="mt19937-梅森旋转算法-mersenne-twister-algorithm-简称-mt">MT19937（<strong>梅森旋转算法</strong>（<strong>Mersenne Twister</strong> Algorithm，简称 MT））</h3><p>​为了解决过去伪随机数发生器（Pseudo-Random Number Generator，简称 PRNG）产生的伪随机数质量不高而提出的新算法。常见的两种为基于32位的 MT19937和基于64位的 MT19937-64。</p><p>由于梅森旋转算法是利用**线性反馈移位寄存器（LFSR）**产生随机数的，对于LFRS有结论：一个 k 位的移位寄存器，选取合适的特征多项式（即加1为本原多项式）时，取得最大周期 <span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mn>2</mn><mi>k</mi></msup><mo>−</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">2^k-1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.932438em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.849108em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03148em;">k</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span>.</p><p>而MT19937梅森旋转算法的周期为$ 2^{19937}−1$ （正如算法名，这是一个梅森素数），说明它是一个19937级的线性反馈移位寄存器，梅森旋转算法是利用线性反馈寄存器一直进行移位旋转，因此实际上 MT19937-32只需要用32位就能做到。它能做到在 $1≤k≤623 $都可以均匀分布。</p><p>Mersenne Twister 最常见的实现方式使用 624 个 32 bits 的初始状态。这些整数按顺序分发（分发前对每个初始数进行转换），分发完后对该状态应用某种算法以获取下一组 624 个整数。以及可以通过得到连续的 624 个输出，还原出原来的 624 个 states，再根据原算法推算出接下来每个 state 下一次的 value，从而算出接下来的输出</p><h4 id="算法">算法</h4><p>整个算法主要分为三个阶段：</p><ul><li><p>第一阶段：获得基础的梅森旋转链；</p></li><li><p>第二阶段：对于旋转链进行旋转算法；</p></li><li><p>第三阶段：对于旋转算法所得的结果进行处理；</p></li></ul><h5 id="第一阶段">第一阶段</h5><p>导入seed，初始化伪随机数发生器</p><p>使用一个循环从索引1到623的范围，为 <code>mt</code> 列表的其他元素赋值。赋值的方式基于 Mersenne Twister 算法的核心公式。</p><ul><li><code>_int32()</code> 是一个辅助函数，用于确保结果是32位有符号整数。</li><li><code>(self.mt[i - 1] ^ self.mt[i - 1] &gt;&gt; 30)</code> 表示对 <code>mt</code> 列表中前一个元素进行右移30位的操作，然后与前一个元素进行异或运算。</li><li><code>1812433253</code> 是一个常数。</li><li><code>+ i</code> 表示将索引值加到结果中，以产生不同的种子序列。</li></ul><h5 id="第二阶段">第二阶段</h5><p>进行 <code>twist()</code> 函数</p><p>==<code>twist()</code> 方法==用于对生成器的状态进行旋转操作。它的操作步骤如下：</p><ol><li>使用一个循环从索引0到623的范围，依次处理每个状态元素。</li><li>根据状态元素的索引，获取当前元素和下一个元素的值。</li><li>对获取的值进行位操作，包括按位与和按位异或，以改变当前元素的值。（</li><li><code>(self.mt[i] &amp; 0x80000000)</code> 获取当前元素的最高位，<code>(self.mt[(i + 1) % 624] &amp; 0x7fffffff)</code> 获取下一个元素的其余31位。这样可以将当前元素的最高位和下一个元素的其余31位合并成一个32位的值。将获取的值存储到变量 <code>y</code> 中，并使用 <code>_int32()</code> 函数将其转换为32位有符号整数。对当前元素进行状态扭曲操作。首先，使用右移运算符将 <code>y</code> 的值向右移动1位，然后与索引为 <code>(i + 397) % 624</code> 的状态元素进行按位异或运算。如果 <code>y</code> 的值除以2的余数不为0，即 <code>y % 2 != 0</code>，则将当前元素与常数 <code>0x9908b0df</code> 进行按位异或运算。）</li><li>将结果存储回 <code>mt</code> 列表的当前元素位置。</li></ol><h5 id="第三阶段">第三阶段</h5><p>==<code>extract_number()</code> 方法==用于从生成器中提取一个伪随机数。它的操作步骤如下：</p><ol><li>首先，检查 <code>mti</code><em>（mti 是用于追踪 mt 列表中当前使用的元素的索引)</em> 是否等于0，如果等于0，则调用 <code>twist()</code> 方法进行状态的扭曲操作，以生成新的伪随机数序列。</li><li>接下来，从 <code>mt</code> 列表中获取当前的随机数，存储到变量 <code>y</code> 中。</li><li>对 <code>y</code> 执行一系列的位运算操作，包括右移、异或、左移和按位与，以改变 <code>y</code> 的值。</li><li>更新 <code>mti</code> 的值，将其加1并对624取模，以确保它在0到623之间循环。</li><li>返回 <code>_int32(y)</code>，其中 <code>_int32()</code> 是一个辅助函数，用于确保结果是32位有符号整数。</li></ol><p>实现</p><p>使用MT19937算法生成范围在 [232−1]<br>的均匀分布的32位整数。</p><pre class="line-numbers language-none"><code class="language-none">def _int32(x):    return int(0xFFFFFFFF &amp; x)  class MT19937:    # 用于初始化伪随机数生成器的类的构造函数    # 根据seed初始化624的state    def __init__(self, seed):   #创建一个名为 mt 的列表，包含624个元素，初始值都为0。这是用于存储生成器状态的主要数据结构。        self.mt &#x3D; [0] * 624   #将输入参数 seed 的值赋给 mt 列表的第一个元素。它用于初始化生成器的种子。        self.mt[0] &#x3D; seed   #mti 是用于追踪 mt 列表中当前使用的元素的索引。        self.mti &#x3D; 0        for i in range(1, 624):            self.mt[i] &#x3D; _int32(1812433253 * (self.mt[i - 1] ^ self.mt[i - 1] &gt;&gt; 30) + i)      # 提取伪随机数    def extract_number(self):        if self.mti &#x3D;&#x3D; 0:            self.twist()        y &#x3D; self.mt[self.mti]        y &#x3D; y ^ y &gt;&gt; 11        y &#x3D; y ^ y &lt;&lt; 7 &amp; 2636928640        y &#x3D; y ^ y &lt;&lt; 15 &amp; 4022730752        y &#x3D; y ^ y &gt;&gt; 18        self.mti &#x3D; (self.mti + 1) % 624        return _int32(y)      # 对状态进行旋转    def twist(self):        for i in range(0, 624):            y &#x3D; _int32((self.mt[i] &amp; 0x80000000) + (self.mt[(i + 1) % 624] &amp; 0x7fffffff))            self.mt[i] &#x3D; (y &gt;&gt; 1) ^ self.mt[(i + 397) % 624]            if y % 2 !&#x3D; 0:                self.mt[i] &#x3D; self.mt[i] ^ 0x9908b0df<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h4 id="破解">破解</h4><p><a href="https://hasegawaazusa.github.io/mersenne-twister-note.html#mt19937-%E5%88%9D%E5%A7%8B%E5%8C%96">Mersenne Twister 梅森旋转算法笔记 | 独奏の小屋 (hasegawaazusa.github.io)</a></p><h5 id="右移位后异或逆向">右移位后异或逆向</h5><pre class="line-numbers language-none"><code class="language-none">def unshiftRight(self, x, shift):    res &#x3D; x    for i in range(32):        res &#x3D; x ^ res &gt;&gt; shift    return res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="左移位后异或逆向">左移位后异或逆向</h5><pre class="line-numbers language-none"><code class="language-none">def unshiftLeft(self, x, shift, mask):    res &#x3D; x    for i in range(32):        res &#x3D; x ^ (res &lt;&lt; shift &amp; mask)    return res<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="提取伪随机数逆向">提取伪随机数逆向</h5><pre class="line-numbers language-none"><code class="language-none">b &#x3D; 0x9d2c5680c &#x3D; 0xefc60000def untemper(self, v):    v &#x3D; self.unshiftRight(v, 18)    v &#x3D; self.unshiftLeft(v, 15, self.c)    v &#x3D; self.unshiftLeft(v, 7, self.b)    v &#x3D; self.unshiftRight(v, 11)    return v<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="通过输出参数逆向">通过输出参数逆向</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># forward 表示是否需要回到目前状态</span><span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> forward<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment"># 还原的寄存器状态</span>    result_state <span class="token operator">=</span> <span class="token boolean">None</span>    <span class="token comment"># 至少需要 624 个寄存器状态</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>outputs<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">624</span>    ivals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        ivals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>untemper<span class="token punctuation">(</span>outputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>outputs<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">625</span><span class="token punctuation">:</span>        <span class="token comment"># 此时可以使用后面的数据进行验证</span>        challenge <span class="token operator">=</span> outputs<span class="token punctuation">[</span><span class="token number">624</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">626</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>ivals<span class="token operator">+</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>            r <span class="token operator">=</span> random<span class="token punctuation">.</span>Random<span class="token punctuation">(</span><span class="token punctuation">)</span>            r<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span>state<span class="token punctuation">)</span>            <span class="token keyword">if</span> challenge <span class="token operator">==</span> r<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                result_state <span class="token operator">=</span> state                <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token comment"># 如果刚好是 624 个寄存器状态</span>        result_state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>ivals<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>    <span class="token comment"># 利用 python 自带的 mt19937 random 库</span>    rand <span class="token operator">=</span> random<span class="token punctuation">.</span>Random<span class="token punctuation">(</span><span class="token punctuation">)</span>    rand<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span>result_state<span class="token punctuation">)</span>    <span class="token comment"># 如果需要到输出后的状态，则进行比较判断</span>    <span class="token keyword">if</span> forward<span class="token punctuation">:</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>outputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">assert</span> rand<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">==</span> outputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>    <span class="token keyword">return</span> rand<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h5 id="完整代码">完整代码</h5><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">class</span> <span class="token class-name">MT19937Recover</span><span class="token punctuation">:</span>    <span class="token keyword">def</span> <span class="token function">unshiftRight</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> shift<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> x        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> x <span class="token operator">^</span> res <span class="token operator">>></span> shift        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">unshiftLeft</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> shift<span class="token punctuation">,</span> mask<span class="token punctuation">)</span><span class="token punctuation">:</span>        res <span class="token operator">=</span> x        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            res <span class="token operator">=</span> x <span class="token operator">^</span> <span class="token punctuation">(</span>res <span class="token operator">&lt;&lt;</span> shift <span class="token operator">&amp;</span> mask<span class="token punctuation">)</span>        <span class="token keyword">return</span> res    <span class="token keyword">def</span> <span class="token function">untemper</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>unshiftRight<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">)</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>unshiftLeft<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">0xefc60000</span><span class="token punctuation">)</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>unshiftLeft<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">0x9d2c5680</span><span class="token punctuation">)</span>        v <span class="token operator">=</span> self<span class="token punctuation">.</span>unshiftRight<span class="token punctuation">(</span>v<span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">)</span>        <span class="token keyword">return</span> v    <span class="token keyword">def</span> <span class="token function">go</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> outputs<span class="token punctuation">,</span> forward<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        result_state <span class="token operator">=</span> <span class="token boolean">None</span>        <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>outputs<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">624</span>        ivals <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            ivals<span class="token punctuation">.</span>append<span class="token punctuation">(</span>self<span class="token punctuation">.</span>untemper<span class="token punctuation">(</span>outputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>outputs<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">625</span><span class="token punctuation">:</span>            challenge <span class="token operator">=</span> outputs<span class="token punctuation">[</span><span class="token number">624</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">626</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>ivals<span class="token operator">+</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>                r <span class="token operator">=</span> random<span class="token punctuation">.</span>Random<span class="token punctuation">(</span><span class="token punctuation">)</span>                r<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span>state<span class="token punctuation">)</span>                <span class="token keyword">if</span> challenge <span class="token operator">==</span> r<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    result_state <span class="token operator">=</span> state                    <span class="token keyword">break</span>        <span class="token keyword">else</span><span class="token punctuation">:</span>            result_state <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">,</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>ivals<span class="token operator">+</span><span class="token punctuation">[</span><span class="token number">624</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token boolean">None</span><span class="token punctuation">)</span>        rand <span class="token operator">=</span> random<span class="token punctuation">.</span>Random<span class="token punctuation">(</span><span class="token punctuation">)</span>        rand<span class="token punctuation">.</span>setstate<span class="token punctuation">(</span>result_state<span class="token punctuation">)</span>        <span class="token keyword">if</span> forward<span class="token punctuation">:</span>            <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">624</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>outputs<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">assert</span> rand<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span> <span class="token operator">==</span> outputs<span class="token punctuation">[</span>i<span class="token punctuation">]</span>        <span class="token keyword">return</span> randmtc <span class="token operator">=</span> MT19937Recover<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>流密码的分类</h1><p>依据流密码密钥序列产生的方式，可以将流密码分为<strong>同步流密码</strong>和<strong>自同步流密码</strong>两类。</p><p>同步流密码：如果密钥流产生的算法和产生的密钥序列都与明文或密文无关，我们称这类流密码为同步流密码。</p><p>自同步流密码：密钥流产生的算法与明文相关，则所产生的密钥序列也与明文相关，称这类流密码为自同步流密码</p><h2 id="同步流密码">同步流密码</h2><p>同步流密码可以分为密钥流产生器和加密变换器两部分</p><p>在同步流密码中，<strong>前面出现的加解密错误不会影响到后面的加解密</strong>，这是因为相邻两位明文的加密是相互独立，没有关系的。</p><p>同步流密码在加密或解密时，需要使两者密钥流生成器的状态一致（这里的状态可以决定密钥流生成器产生的密钥），否则会导致加解密密钥不一致，使解密失败。当两者密钥流生成器的状态不一致时，必须借助外接手段来同步，<strong>同步流密码本身不具有自同步功能</strong>，<strong>FB、CTR模式就属于同步流密码</strong></p><h2 id="自同步流密码">自同步流密码</h2><p>密钥产生算法是密钥和以往密文序列的函数，则称这种流密码为自同步流密码。</p><p>自同步流密码中，<strong>密钥序列的产生与明文的加密是不独立的</strong>，也是不能分割的。很多情况下，明文或者密文都需要给密钥序列的产生提供反馈。</p><p><strong>自同步流密码具有自同步功能</strong>。因为密钥序列的产生与明密文序列有关，所以加密和解密密钥生成器的状态不一致时，是可以自己进行同步的，无需认为同步。</p><p><strong>自同步流密码可能会对错误进行传播</strong>。因为密钥序列的产生与明文序列有关，所以前边明文的加密错误，会导致后边密钥序列生成出错，导致后边明文序列也加密错误。</p><p><strong>CFB模式就属于同步流密码</strong></p><h1>常见流密码</h1><h2 id="rc4">RC4</h2><ul><li>RC4由伪随机数生成器和异或运算组成。</li><li>RC4的密钥长度可变，范围是[1,255]。</li><li>RC4一个字节一个字节地加解密。</li><li>给定一个密钥，伪随机数生成器接受密钥并产生一个S盒。S盒用来加密数据，而且在加密过程中S盒会变化。</li><li>由于异或运算的对合性，RC4加密解密使用同一套算法。</li></ul><p>RC4产生非线性的密钥流序列，先密钥调度算法初始化S表，再伪随机生成算法修改S表选取随机元素作为k<br>密钥调度算法</p><ol><li><p>对S表线性填充，S(0)=0,S(1)=1,⋯ \cdots⋯,S(255)=255.   S盒（0-255）</p></li><li><p>种子密钥重复填充K表，K(0)=1,K(1)=2,K(3)=3,K(4)=1,K(5)=2,⋯ ⋯(  K 表只有（1，模)）</p></li><li><pre><code class="language-python">#密钥调度算法int j=0for i in range(256):<pre class="line-numbers language-none"><code class="language-none">  j&#x3D;j+S(i)+K(i)(mod256)  t&#x3D;S(i)    #&#x2F;交换S(i)、S(j)、swap(S(i),S(j));  S(i)&#x3D;S(j)  S(j)&#x3D;t  #伪随机生成算法  i&#x3D;0,j&#x3D;0  i&#x3D;i+1(mod256)  j&#x3D;j+S(i)(mod256)  #交换S(i)、S(j)  t&#x3D;S(i)+S(j)(mod256)  #输出密钥字  k&#x3D;S(t)    &#96;&#96;&#96;python  伪随机生成算法4. i&#x3D;0,j&#x3D;05. i&#x3D;i+1(mod256)6. j&#x3D;j+S(i)(mod256)7. 交换S(i)、S(j)8. t&#x3D;S(i)+S(j)(mod256)9. 输出密钥字k&#x3D;S(t)<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre></code></pre></li></ol>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 流密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CISCN 2021华南 matryoshka</title>
      <link href="/post/1bc219ca.html"/>
      <url>/post/1bc219ca.html</url>
      
        <content type="html"><![CDATA[<h1>CISCN 2021华南 matryoshka</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> os <span class="token keyword">import</span> urandom<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagKEY_SIZE <span class="token operator">=</span> <span class="token number">1024</span><span class="token keyword">def</span> <span class="token function">genkey</span><span class="token punctuation">(</span>size<span class="token punctuation">,</span> t<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">0</span> <span class="token operator">&lt;</span> t <span class="token operator">&lt;</span> <span class="token number">4</span>    p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>size<span class="token punctuation">)</span>    N <span class="token operator">=</span> p <span class="token operator">*</span> q    e <span class="token operator">=</span> <span class="token number">0x10001</span>    d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> t <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>        hint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">*</span> p <span class="token operator">+</span> q<span class="token punctuation">,</span> <span class="token number">114514</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1919810</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">elif</span> t <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        hint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2021</span> <span class="token operator">*</span> q<span class="token punctuation">,</span> <span class="token number">114514</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2020</span> <span class="token operator">*</span> q<span class="token punctuation">,</span> <span class="token number">1919810</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        hint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2021</span> <span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">114514</span> <span class="token operator">*</span> p <span class="token operator">^</span> <span class="token number">1919810</span> <span class="token operator">*</span> q<span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>N<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> d<span class="token punctuation">,</span> <span class="token punctuation">(</span>t<span class="token punctuation">,</span> hint<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">enc</span><span class="token punctuation">(</span>pub<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> m<span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">2</span> <span class="token operator">*</span> KEY_SIZE    N<span class="token punctuation">,</span> e <span class="token operator">=</span> pub    <span class="token keyword">return</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> N<span class="token punctuation">)</span>flag <span class="token operator">=</span> urandom<span class="token punctuation">(</span>KEY_SIZE <span class="token operator">//</span> <span class="token number">4</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">+</span> flagrsa <span class="token operator">=</span> <span class="token builtin">sorted</span><span class="token punctuation">(</span><span class="token punctuation">[</span>genkey<span class="token punctuation">(</span>KEY_SIZE<span class="token punctuation">,</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span>  <span class="token comment">#sorted() 函数对所有可迭代的对象进行排序操作</span>flag_enc <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'data.txt'</span><span class="token punctuation">,</span> <span class="token string">'wb'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> rsa<span class="token punctuation">:</span>        flag_enc <span class="token operator">=</span> enc<span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> flag_enc<span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>        f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token string">b'\n'</span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>flag_enc<span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>pub1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">24456175739252870981581304595776265527580789354213705889514952622571517606615114014188604745480170064884744121665565461123709681135639261156228877797071437235270313935911710221224013214915625521692560168949226457147281956984016511425475569268340377366044912267078389493114774100457759766335494350723513026446153945967724342242760621535317132948637634137447086603157015714032353577491928694502480219162762778796278713726251839741877316320235482409453804557071811850426024239156530979675855531682790219949292249941429289527189548079020217829644155388264712919506101927204762836581916556029054227410446755012434149523907</span><span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">)</span>hint1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">11194465651039338849668860869391382916187008521235968873517376368240647328279131694653159098981230189704943450639829474437841557500486114536592080297683997535761940313989700600817228546006587472449457304552982786077160967073392582663936582588118937240188929199967250897282390048562161876751613871197407166477824543070810778252591137875016328367811716543410776297999072466559766190913915977401225038801060442468940698866837193956782386171511951931682053791362247163079318658714261330160865206450361831549706202639425780809540915268985715250365703973111554668392956698101729371088903902815510126969270813545846688878436</span><span class="token punctuation">,</span> <span class="token number">17575070452074464968464685888900584354082785587206854480058886334188834706711415687264090704483844609219317713370414939396981502545596215072289555215091489192108532218049617347807551176215194871046323246728002191092916073981616822792354983756933224599484679560364811927584511005706319025781495049828339597673027877101791731056858973125008661282473657841024159863183351507673377590268873433502386113510478904860352139244577603001748728561603049367350110219194912719879634057029598389600256986603045226717856411851889319411855611708924815208140438436916832300183220697580376028000547937684072248421737385425073258720879</span><span class="token punctuation">)</span>pub2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">13352993434427612839250316087785373276111208822469810289866230193050170450794518181524598596966732188313549407048113550870223210852868050710461561040494395497666484751449645654832663242629975744541261760904104435281673411928307820840973290405335643983719305080838974901164831483267113861801494547226604608135486183955701869196416917286071817136304800254632296106100074356642224268864874382078852593360452317741619723807878207224194923792068333599501962967884857831789945522028206464288781915473239132326142121842810669566524661433159250738510228607082295815009339289374198865356079365915953452551403546701744884064031</span><span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">)</span>hint2 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">12890454835618057216693283154646295256547993419556349278949288547311899373637190048162618130021278574478039832361601927559315546568221037567751487507728339403821182254910702454208494226298434503487024254131784176237935900995801007317666642180650429259314744306390330668165601734196955036118294838073626269485626603885590730480357754106581924490566571344879282982046951044765811976989875623163040628948409259410684423744057580350283369203075946877294024798358704270660191627929717423150978437710495236596009273495917723464083875298899299815030715084594745073018225744460660615583487132081494166204388641238149852094282</span><span class="token punctuation">,</span> <span class="token number">5892408960381393528929593894651709615387581968353636159772633906426675297650446939320873266449295420205620763150305529063257622079310711487381382868719233236245025724747453509230625510620424980310897414070432626951515255232242771606639145042677799112785849387727676897186903325574833200683661029697944196376539651575260283766098453523648743118163620885932748072014281721761491193499807903263636079336252182167396970170725734497688434577734178943260300047959649325673029043456664907935333740888039464474939932273320942354044042704907294868361621446456851700392150350003616197937536799424476834000764643527704625551853</span><span class="token punctuation">)</span>pub3 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">17177053664151806966121535982668901650446682095529000259014198321136965019483091916429100475246231867407340941754503516531164820854385489464670165994696842071709734917114309259104249964267442714558765555584583520230752931342668691556368988933368994298297834977992320617384955207871810834341958411445188648501483054131597044846869875850883593132672192435646701163895505576384723670421411576000182052110843472310892999443824985303491836371881071964076722792533675980383851694245221642510740670849302644321865778633169382807278959043510095767110855843398842297006177198956163900617493945356507206065454258413827755371801</span><span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">)</span>hint3 <span class="token operator">=</span>  <span class="token number">147564891156965292570696641342786452967360558121846098369357496719617601560966075535844427511017634445477003040401277027744788338595455729157718988227300863747068990924632491626486738327303794592458847930011281160213485429927564274159502656423511772354731728435252276421509371486371394150666126917491611566956437946526209935472892335326237922914832796135688923286993574647671267302996798652989809515575022082187659205790764278843387967061089270632617702993227950803598681057112120714439423855370869638071696031110503568236428236133214903903157588140761228266767061485354562520190608269059861310771018326290187980067226585095472</span>enc <span class="token operator">=</span> <span class="token number">20818657741891295009893467743486158046601577833299329286355550851753497934767078082575000447225431087153800273576479954045498696738072232128407856203084431844186969858378450688523614741895535502018303247701703926903139480866938097432973872747078712177106506261992487913959871048823244157318990793901548356586648331630170444584271860937814077903454713790143481303987556135668221166092998434608685761181886184919877083574064873239648350240049295532703196970506874978843404737444703538215594641220650638006499013356385328001373661638736451619668301281773633736621211207476777867400720407439055814403559159725102449059529</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><h3 id="t-1时">t=1时</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">hint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">*</span> p <span class="token operator">+</span> q<span class="token punctuation">,</span> <span class="token number">114514</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1919810</span><span class="token punctuation">,</span> q<span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/post/1bc219ca/20230714195350.png" alt="20230714195350"></p><h4 id="wp">wp</h4><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#t=1</span>i0<span class="token operator">=</span>inverse<span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span>n1<span class="token punctuation">)</span>t<span class="token operator">=</span><span class="token punctuation">(</span>hint1<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">-</span><span class="token number">1919810</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2020</span><span class="token operator">*</span>i0tmp1 <span class="token operator">=</span> t<span class="token operator">**</span><span class="token number">114514</span> <span class="token operator">-</span> hint1<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>q1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>tmp1<span class="token punctuation">,</span>n1<span class="token punctuation">)</span>p1 <span class="token operator">=</span> n1<span class="token operator">//</span>q1<span class="token keyword">print</span><span class="token punctuation">(</span>q1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p1<span class="token punctuation">)</span><span class="token comment">#158348905332839544537711729673813168060148142971293394847528702305103458737666052305025004146307872508261327535984723739882900675282993365832627641052404279861076243876879878646665656512157785200009289041769333736566118405957398721081293470314871018967687104420488820993734108473323238868133844546572769659889</span><span class="token comment">#154444867729571679389153556486323157532577140978675777090725819427023455964213236152863764917732765288319002449639337160459966528167327386280914152445216627323877725305237304184435638084496987554404675517581531918827703768948170867363598114384956129368042904041453530044545354299811120395452716027640392658163</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="t-2时">t=2时</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">hint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2021</span> <span class="token operator">*</span> q<span class="token punctuation">,</span> <span class="token number">114514</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2021</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2020</span> <span class="token operator">*</span> q<span class="token punctuation">,</span> <span class="token number">1919810</span><span class="token punctuation">,</span> N<span class="token punctuation">)</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p><img src="/post/1bc219ca/IMG20230715111554.jpg" alt="IMG20230715111554"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">k1<span class="token operator">=</span><span class="token number">114514</span>k2<span class="token operator">=</span><span class="token number">1919810</span>k3<span class="token operator">=</span>k1<span class="token operator">*</span>k2h20<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>hint2<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>h21<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>hint2<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span>k1<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>i1<span class="token operator">=</span>inverse<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token punctuation">,</span>k3<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token punctuation">)</span>i2<span class="token operator">=</span>inverse<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2021</span><span class="token punctuation">,</span>k3<span class="token punctuation">,</span>n2<span class="token punctuation">)</span><span class="token punctuation">,</span>n2<span class="token punctuation">)</span>q2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>i1<span class="token operator">*</span>h20<span class="token operator">-</span>i2<span class="token operator">*</span>h21<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>p2<span class="token operator">=</span>n2<span class="token operator">//</span>q2<span class="token keyword">assert</span> n2<span class="token operator">==</span>q2<span class="token operator">*</span>p2<span class="token keyword">print</span><span class="token punctuation">(</span>q2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p2<span class="token punctuation">)</span><span class="token comment">#112604275612978513523046704848333944070992858909556102508088764902051807456644170969755495753526047899334730561715084535572080520587727995337341854710655940152119853594124610045727830917583423202302459516112564428465023407102998406867458207348578682338765328787788350735172686643863312802511262283233941256539</span><span class="token comment">#118583360727099931616143038309774420557484849452296151604423754672864299487877418075351113083763032866802950509787266656232869620846778204490228723176260335624995933128686816247048065363288322570474202424232531677079833785557213104207891923750312645124476628650891498347399714297641990551124186174929796159629</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="t-3时">t=3时</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">hint <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">2020</span> <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">2021</span> <span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token number">114514</span> <span class="token operator">*</span> p <span class="token operator">^</span> <span class="token number">1919810</span> <span class="token operator">*</span> q<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>爆破p,q</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> itertools<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmn3 <span class="token operator">=</span> <span class="token number">17177053664151806966121535982668901650446682095529000259014198321136965019483091916429100475246231867407340941754503516531164820854385489464670165994696842071709734917114309259104249964267442714558765555584583520230752931342668691556368988933368994298297834977992320617384955207871810834341958411445188648501483054131597044846869875850883593132672192435646701163895505576384723670421411576000182052110843472310892999443824985303491836371881071964076722792533675980383851694245221642510740670849302644321865778633169382807278959043510095767110855843398842297006177198956163900617493945356507206065454258413827755371801</span>x3 <span class="token operator">=</span> <span class="token number">147564891156965292570696641342786452967360558121846098369357496719617601560966075535844427511017634445477003040401277027744788338595455729157718988227300863747068990924632491626486738327303794592458847930011281160213485429927564274159502656423511772354731728435252276421509371486371394150666126917491611566956437946526209935472892335326237922914832796135688923286993574647671267302996798652989809515575022082187659205790764278843387967061089270632617702993227950803598681057112120714439423855370869638071696031110503568236428236133214903903157588140761228266767061485354562520190608269059861310771018326290187980067226585095472</span>a_list<span class="token punctuation">,</span> b_list <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>cur_mod <span class="token operator">=</span> <span class="token number">1</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cur_mod <span class="token operator">*=</span> <span class="token number">2</span>    nxt_as<span class="token punctuation">,</span> nxt_bs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> al<span class="token punctuation">,</span> bl <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a_list<span class="token punctuation">,</span> b_list<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">for</span> ah<span class="token punctuation">,</span> bh <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            aa<span class="token punctuation">,</span> bb <span class="token operator">=</span> ah <span class="token operator">*</span> <span class="token punctuation">(</span>cur_mod <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> al<span class="token punctuation">,</span> bh <span class="token operator">*</span> <span class="token punctuation">(</span>cur_mod <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">+</span> bl            <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>aa <span class="token operator">*</span> bb <span class="token operator">%</span> cur_mod <span class="token operator">==</span> n3 <span class="token operator">%</span> cur_mod<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">114514</span><span class="token operator">*</span>aa <span class="token operator">^</span> <span class="token number">1919810</span><span class="token operator">*</span>bb<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token operator">*</span>aa<span class="token operator">+</span><span class="token number">2021</span><span class="token operator">*</span>bb<span class="token punctuation">)</span> <span class="token operator">%</span>cur_mod <span class="token operator">==</span> x3 <span class="token operator">%</span> cur_mod<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                nxt_as<span class="token punctuation">.</span>append<span class="token punctuation">(</span>aa<span class="token punctuation">)</span>                nxt_bs<span class="token punctuation">.</span>append<span class="token punctuation">(</span>bb<span class="token punctuation">)</span>    a_list<span class="token punctuation">,</span> b_list <span class="token operator">=</span> nxt_as<span class="token punctuation">,</span> nxt_bs<span class="token keyword">for</span> a<span class="token punctuation">,</span> b <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>a_list<span class="token punctuation">,</span> b_list<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> b <span class="token operator">==</span> n3<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">break</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>b<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a <span class="token operator">*</span> b <span class="token operator">-</span> n3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">114514</span><span class="token operator">*</span>a <span class="token operator">^</span> <span class="token number">1919810</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token number">2020</span><span class="token operator">*</span>a<span class="token operator">+</span><span class="token number">2021</span><span class="token operator">*</span>b<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">-</span> x3<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 复现 CISCN 2021华南 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>中国剩余定理</title>
      <link href="/post/2cf738e6.html"/>
      <url>/post/2cf738e6.html</url>
      
        <content type="html"><![CDATA[<h1>[ 强网杯2022]ASR</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token keyword">from</span> secret <span class="token keyword">import</span> falgpad <span class="token operator">=</span> <span class="token keyword">lambda</span> s<span class="token punctuation">:</span>s <span class="token operator">+</span> <span class="token builtin">bytes</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">*</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">16</span><span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>n <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> getPrime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> getPrime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span> <span class="token operator">*</span> getPrime<span class="token punctuation">(</span><span class="token number">128</span><span class="token punctuation">)</span><span class="token operator">**</span><span class="token number">2</span>e <span class="token operator">=</span> <span class="token number">3</span>flag <span class="token operator">=</span> pad<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">assert</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">>=</span> <span class="token number">48</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token string">'big'</span><span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'n = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'e = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>e<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'c = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''n = 8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001e = 3c = 945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>给出了n,e,c在线网站分解出n</p><p>p=218566259296037866647273372633238739089<br>q=223213222467584072959434495118689164399<br>r=225933944608558304529179430753170813347<br>s=260594583349478633632570848336184053653</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>n</mi><mn>2</mn></msup><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo>∗</mo><mi>r</mi><mo>∗</mo><mi>s</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup></mrow><annotation encoding="application/x-tex">n^2=(p*q*r*s)^2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">s</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span></span></span></p><p>不能直接求e在phi下的逆元</p><pre class="line-numbers language-none"><code class="language-none">#phi&#x3D;p*(p-1)*q*(q-1)*r*(r-1)*s*(s-1)#print(gmpy2.gcd(e,phi))#3<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mi>p</mi></msub><mo>≡</mo><msup><mi>c</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mi>q</mi></msub><mo>≡</mo><msup><mi>c</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mi>r</mi></msub><mo>≡</mo><msup><mi>c</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>r</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>m</mi><mi>s</mi></msub><mo>≡</mo><msup><mi>c</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>s</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}m_p\equiv c^e (mod\ \ p)\\m_q\equiv c^e (mod\ \ q)\\m_r\equiv c^e (mod\ \ r)\\m_s\equiv c^e (mod\ \ s)\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000008em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.5949900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8899900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1849900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.905010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1300000000000003em;"><span style="top:-5.130000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span><span style="top:-3.6900000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span><span style="top:-0.8100000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.151392em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">s</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>e很小，直接有限域开方得到m1(mod p),m2(mod q),m3(mod r),m4(mod s)</p><p>利用中国剩余定理求解m</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>≡</mo><mi>m</mi><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>≡</mo><mi>m</mi><mn>2</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>≡</mo><mi>m</mi><mn>3</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>r</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>≡</mo><mi>m</mi><mn>4</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>s</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}m\equiv m1 (mod\ \ p)\\m\equiv m2 (mod\ \ q)\\m\equiv m3 (mod\ \ r)\\m\equiv m4 (mod\ \ s)\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:5.76em;vertical-align:-2.63em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.9500200000000008em;"><span style="top:-1.59999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.5949900000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8899900000000003em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.1849900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.905010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.20002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.45002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.1300000000000003em;"><span style="top:-5.130000000000001em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span><span style="top:-3.6900000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span><span style="top:-2.2500000000000004em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord">3</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose">)</span></span></span><span style="top:-0.8100000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mord">4</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">s</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.63em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h2 id="wp">wp</h2><pre class="line-numbers language-none"><code class="language-none">import gmpy2from Crypto.Util.number import long_to_bytesn &#x3D; 8250871280281573979365095715711359115372504458973444367083195431861307534563246537364248104106494598081988216584432003199198805753721448450911308558041115465900179230798939615583517756265557814710419157462721793864532239042758808298575522666358352726060578194045804198551989679722201244547561044646931280001e &#x3D; 3c &#x3D; 945272793717722090962030960824180726576357481511799904903841312265308706852971155205003971821843069272938250385935597609059700446530436381124650731751982419593070224310399320617914955227288662661442416421725698368791013785074809691867988444306279231013360024747585261790352627234450209996422862329513284149p&#x3D;218566259296037866647273372633238739089q&#x3D;223213222467584072959434495118689164399r&#x3D;225933944608558304529179430753170813347s&#x3D;260594583349478633632570848336184053653assert p*q*s*r*p*q*s*r&#x3D;&#x3D;n#phi&#x3D;p*(p-1)*q*(q-1)*r*(r-1)*s*(s-1)#print(gmpy2.gcd(e,phi))#3R.&lt;x&gt; &#x3D; Zmod(p)[]f &#x3D; x^e-cf &#x3D; f.monic()results1 &#x3D; f.roots()print(results1)R.&lt;x&gt; &#x3D; Zmod(q)[]f &#x3D; x^e-cf &#x3D; f.monic()results2 &#x3D; f.roots()print(results2)R.&lt;x&gt; &#x3D; Zmod(r)[]f &#x3D; x^e-cf &#x3D; f.monic()results3 &#x3D; f.roots()print(results3)R.&lt;x&gt; &#x3D; Zmod(s)[]f &#x3D; x^e-cf &#x3D; f.monic()results4 &#x3D; f.roots()print(results4)&#39;&#39;&#39;[(159183122833201520722281740271702531008, 1), (54017009972585088360569997378772209006, 1), (5366126490251257564421634982763999075, 1)][(61230132932186378005663689217798805559, 1)][(97828969479259149226856141068289169207, 1), (84132055525449472521332928867042183796, 1), (43972919603849682780990360817839460344, 1)][(127287570627900634195349274487282947698, 1)]&#39;&#39;&#39;#x&#x3D;a(mod b)   a是残基列表， b 是模数列表#crt(a, b, m&#x3D;None, n&#x3D;None)for i in results1:    for j in results2:        for m in results3:            for n in results4:            #i[0]在sage里是gmp格式，需要转化位int类型                m&#x3D;crt([int(i[0]),int(j[0]),int(m[0]),int(n[0])],[p,q,r,s])                print(long_to_bytes(m))#flag&#123;Fear_can_hold_you_prisoner_Hope_can_set_you_free&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[0ctf 2016] rsa</h1><h2 id="题目">题目</h2><pre class="line-numbers language-none"><code class="language-none">-----BEGIN PUBLIC KEY-----MEEwDQYJKoZIhvcNAQEBBQADMAAwLQIoAsqpwJ3BBh5Qflt&#x2F;Od3jRV&#x2F;P4SeixptiHIP9nT0+qjqsQhR81xiMUwIBAw&#x3D;&#x3D;-----END PUBLIC KEY-----<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>给出公钥和    文件</p><h2 id="题解">题解</h2><p>公钥在线网站解析下，得到n,e</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">e<span class="token operator">=</span><span class="token number">3</span>n<span class="token operator">=</span><span class="token number">23292710978670380403641273270002884747060006568046290011918413375473934024039715180540887338067</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><p>factordb在线分解n</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token operator">=</span><span class="token number">26440615366395242196516853423447</span>q<span class="token operator">=</span><span class="token number">27038194053540661979045656526063</span>r<span class="token operator">=</span><span class="token number">32581479300404876772405716877547</span><span class="token keyword">assert</span> p<span class="token operator">*</span>q<span class="token operator">*</span>r<span class="token operator">==</span>n<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token number">3</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p>不能求逆元，Crt</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token punctuation">,</span> bytes_to_longe<span class="token operator">=</span><span class="token number">3</span>n<span class="token operator">=</span><span class="token number">23292710978670380403641273270002884747060006568046290011918413375473934024039715180540887338067</span>p<span class="token operator">=</span><span class="token number">26440615366395242196516853423447</span>q<span class="token operator">=</span><span class="token number">27038194053540661979045656526063</span>r<span class="token operator">=</span><span class="token number">32581479300404876772405716877547</span><span class="token keyword">assert</span> p<span class="token operator">*</span>q<span class="token operator">*</span>r<span class="token operator">==</span>n<span class="token comment">#phi=(p-1)*(q-1)*(r-1)</span><span class="token comment">#print(gmpy2.gcd(e,phi))</span><span class="token comment">#3</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"D:\\浏览器下载\\flag\\flag.enc"</span><span class="token punctuation">,</span><span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token keyword">as</span> f<span class="token punctuation">:</span>    c<span class="token operator">=</span>bytes_to_long<span class="token punctuation">(</span>f<span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>R<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> Zmod<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> x<span class="token operator">^</span>e<span class="token operator">-</span>cf <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>results1 <span class="token operator">=</span> f<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results1<span class="token punctuation">)</span>R<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> Zmod<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> x<span class="token operator">^</span>e<span class="token operator">-</span>cf <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>results2 <span class="token operator">=</span> f<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results2<span class="token punctuation">)</span>R<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> Zmod<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> x<span class="token operator">^</span>e<span class="token operator">-</span>cf <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>results3 <span class="token operator">=</span> f<span class="token punctuation">.</span>roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>results3<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> results1<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> results2<span class="token punctuation">:</span>        <span class="token keyword">for</span> m <span class="token keyword">in</span> results3<span class="token punctuation">:</span>            m<span class="token operator">=</span>crt<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>i<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>j<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>r<span class="token punctuation">]</span><span class="token punctuation">)</span>            m<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span>            <span class="token keyword">if</span> <span class="token string">b'0ctf&#123;'</span><span class="token keyword">in</span> m<span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>                <span class="token keyword">break</span><span class="token comment">#b'\x02\xd1^\xcb\x84\x84RC\xf3J\x000ctf&#123;HahA!Thi5_1s_n0T_rSa~&#125;\n'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[NepCTF 2022] signin</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getStrongPrime<span class="token punctuation">,</span>bytes_to_long<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> powmod<span class="token punctuation">,</span>is_prime<span class="token punctuation">,</span>invert<span class="token punctuation">,</span>bit_length<span class="token punctuation">,</span> next_prime<span class="token keyword">from</span> FLAG <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">gen_key</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">0</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    p <span class="token operator">=</span> getStrongPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>    q <span class="token operator">=</span> next_prime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token comment">#     q = p + 1</span><span class="token comment">#     while(True):</span><span class="token comment">#         q += 2 if q &amp; 1 else 1</span><span class="token comment">#         if is_prime(q, 30):</span><span class="token comment">#             break</span>    n <span class="token operator">=</span> p<span class="token operator">*</span>q    e <span class="token operator">=</span> <span class="token number">0x10001</span>    <span class="token comment">#65537</span>    d <span class="token operator">=</span> invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    par <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>d<span class="token punctuation">)</span>    <span class="token keyword">return</span> par<span class="token keyword">def</span> <span class="token function">leak</span><span class="token punctuation">(</span>par<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>par<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span>    <span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> par    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"Here's something for you."</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e ="</span><span class="token punctuation">,</span>e<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c_mod_p ="</span><span class="token punctuation">,</span>c <span class="token operator">%</span> p<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c_mod_q ="</span><span class="token punctuation">,</span>c <span class="token operator">%</span> q<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">enc</span><span class="token punctuation">(</span>message<span class="token punctuation">,</span> par<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>par<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">5</span>    <span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e<span class="token punctuation">,</span>d<span class="token punctuation">)</span> <span class="token operator">=</span> par    m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>message<span class="token punctuation">)</span>    c <span class="token operator">=</span> powmod<span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>    <span class="token keyword">return</span> c<span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>    par <span class="token operator">=</span> gen_key<span class="token punctuation">(</span><span class="token punctuation">)</span>    c <span class="token operator">=</span> enc<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> par<span class="token punctuation">)</span>    leak<span class="token punctuation">(</span>par<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token triple-quoted-string string">"""Here's something for you.n = 19955580242010925349026385826277356862322608500430230515928936214328341334162349408990409245298441768036250429913772953915537485025323789254947881868366911379717813713406996010824562645958646441589124825897348626601466594149743648589703323284919806371555688798726766034226044561171215392728880842964598154362131942585577722616354074267803330013886538511795383890371097812191816934883393255463554256887559394146851379087386846398690114807642170885445050850978579391063585254346364297374019309370189128443081285875218288166996242359495992824824109894071316525623741755423467173894812627595135675814789191820979950786791e = 65537c_mod_p = 32087476819370469840242617415402189007173583393431940289526096277088796498999849060235750455260897143027010566292541554247738211165214410052782944239055659645055068913404216441100218886028415095562520911677409842046139862877354601487378542714918065194110094824176055917454013488494374453496445104680546085816c_mod_q = 59525076096565721328350936302014853798695106815890830036017737946936659488345231377005951566231961079087016626410792549096788255680730275579842963019533111895111371299157077454009624496993522735647049730706272867590368692485377454608513865895352910757518148630781337674813729235453169946609851250274688614922"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>yafu分解n</p><p><img src="/post/2cf738e6/image-20230714164516814.png" alt="image-20230714164516814"></p><p>这里需要注意p和q的取值</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> <span class="token number">141264221379693044160345378758459195879285464451894666001807667429134348549398732060237738374405784248735752195059908618618110595213605790125890251970818437656069617772772793421437649079362238861287098916200835889507111259332056471215428085418047179545017193159169629731673653136069647622114441162534727202901</span>q <span class="token operator">=</span> <span class="token number">141264221379693044160345378758459195879285464451894666001807667429134348549398732060237738374405784248735752195059908618618110595213605790125890251970818437656069617772772793421437649079362238861287098916200835889507111259332056471215428085418047179545017193159169629731673653136069647622114441162534727202891</span><span class="token keyword">assert</span> n<span class="token operator">==</span>p<span class="token operator">*</span>q<span class="token comment">#  q = p + 1</span><span class="token keyword">if</span> q<span class="token operator">&lt;</span>p<span class="token punctuation">:</span>    t<span class="token operator">=</span>q    q<span class="token operator">=</span>p    p<span class="token operator">=</span>t<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>p,q取反会影响后面的crt结果</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>gg<span class="token operator">=</span>gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">)</span><span class="token comment">#1</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><p>可以求出d，但是缺少c</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mi>p</mi></msub><mo>≡</mo><mi>c</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>p</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><msub><mi>c</mi><mi>q</mi></msub><mo>≡</mo><mi>c</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>q</mi><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}c_p\equiv c (mod\ \ p)\\c_q\equiv c (mod\ \ q)\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.15139200000000003em;"><span style="top:-2.5500000000000003em;margin-left:0em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.286108em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">c</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>利用crt求解出c</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesn <span class="token operator">=</span> <span class="token number">19955580242010925349026385826277356862322608500430230515928936214328341334162349408990409245298441768036250429913772953915537485025323789254947881868366911379717813713406996010824562645958646441589124825897348626601466594149743648589703323284919806371555688798726766034226044561171215392728880842964598154362131942585577722616354074267803330013886538511795383890371097812191816934883393255463554256887559394146851379087386846398690114807642170885445050850978579391063585254346364297374019309370189128443081285875218288166996242359495992824824109894071316525623741755423467173894812627595135675814789191820979950786791</span>e <span class="token operator">=</span> <span class="token number">65537</span>c_mod_p <span class="token operator">=</span> <span class="token number">32087476819370469840242617415402189007173583393431940289526096277088796498999849060235750455260897143027010566292541554247738211165214410052782944239055659645055068913404216441100218886028415095562520911677409842046139862877354601487378542714918065194110094824176055917454013488494374453496445104680546085816</span>c_mod_q <span class="token operator">=</span> <span class="token number">59525076096565721328350936302014853798695106815890830036017737946936659488345231377005951566231961079087016626410792549096788255680730275579842963019533111895111371299157077454009624496993522735647049730706272867590368692485377454608513865895352910757518148630781337674813729235453169946609851250274688614922</span>p <span class="token operator">=</span> <span class="token number">141264221379693044160345378758459195879285464451894666001807667429134348549398732060237738374405784248735752195059908618618110595213605790125890251970818437656069617772772793421437649079362238861287098916200835889507111259332056471215428085418047179545017193159169629731673653136069647622114441162534727202901</span>q <span class="token operator">=</span> <span class="token number">141264221379693044160345378758459195879285464451894666001807667429134348549398732060237738374405784248735752195059908618618110595213605790125890251970818437656069617772772793421437649079362238861287098916200835889507111259332056471215428085418047179545017193159169629731673653136069647622114441162534727202891</span><span class="token keyword">assert</span> n<span class="token operator">==</span>p<span class="token operator">*</span>q<span class="token comment">#  q = p + 1</span><span class="token keyword">if</span> q<span class="token operator">&lt;</span>p<span class="token punctuation">:</span>    t<span class="token operator">=</span>q    q<span class="token operator">=</span>p    p<span class="token operator">=</span>tphi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>gg<span class="token operator">=</span>gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>gg<span class="token punctuation">)</span><span class="token comment">#1</span>d<span class="token operator">=</span>inverse_mod<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span><span class="token comment">#1252990107815050396131095071106875863839625463162341861437776714252424196867083751438050781152678454544290561348477588314424473974689219719915628330383292496262245806653795391680166551537602119522395725446199697857165189662727850129646294082998077471030893379415607095699225984851603694723276083262879311002929800558428024700747018831268269585502183294987547669372754175415834581968714034535861714455512875208618004858007748676310828573704007774858023825900743373244384093983022857223181677619286464710238287796148593564498619278346936626883260434122906742989245858429095035901635408963549294384055658232382801968473d</span>c<span class="token operator">=</span>crt<span class="token punctuation">(</span><span class="token punctuation">[</span>c_mod_q<span class="token punctuation">,</span>c_mod_p<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>q<span class="token punctuation">,</span>p<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#8369827206646471725648221280443642913388486837857749422377443709344056256739630346534533146105632597070721439934856655940395342623231741478262231476476895787866760088192669327162635088142879029056171991584770144825818324801483521699151523102578319030073063876821271650020632690304932408057713155174759408880939994952627594837104668073211723138636793527906462930731423037213763838952491695586071368029327643093468179086573397581451391513348430378745870919639874205430206113452479543035880405912439274954646894037894109316588387682278704190062477033823342378579047291423599761218381843437513666136897007886110262414183</span><span class="token keyword">print</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span>m<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#NepCTF&#123;ju5t_d0_f4ct_4nd_crt_th3n_d3crypt&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>中国剩余定理</h1><h2 id="构造mp-mq-求解出q">构造mp,mq,求解出q</h2><p><img src="/post/2cf738e6/image-20230718124254862.png" alt="image-20230718124254862"></p>]]></content>
      
      
      <categories>
          
          <category> 练习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 中国剩余定理 crt </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>CryptoCTF2023</title>
      <link href="/post/946059d.html"/>
      <url>/post/946059d.html</url>
      
        <content type="html"><![CDATA[<p>[CryptoCTF2023 (part1) - ZimaB1ue - 博客园 (<a href="http://cnblogs.com">cnblogs.com</a>)</p><p>[<a href="https://lov2.netlify.app/cryptoctf/">CryptoCTF 2023 | LOV3 (lov2.netlify.app)</a>](<a href="https://www.cnblogs.com/ZimaBlue/articles/17538563.html">https://www.cnblogs.com/ZimaBlue/articles/17538563.html</a>)</p><h1>Easy</h1><h2 id="did-it">Did it!</h2><h3 id="题目">题目</h3><p>Finding the intersection among subsets can sometimes be a challenging endeavor, as it requires meticulous comparison and analysis of overlapping elements within each set. But she did it! Try doing it yourself too.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">import</span> sys<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pr</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">did</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> K<span class="token punctuation">,</span> A<span class="token punctuation">)</span><span class="token punctuation">:</span>A<span class="token punctuation">,</span> K <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span>A<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">set</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span>R <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">pow</span><span class="token punctuation">(</span>_<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span> <span class="token operator">+</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> A <span class="token operator">-</span> K<span class="token punctuation">]</span><span class="token keyword">return</span> R<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>border <span class="token operator">=</span> <span class="token string">"+"</span>pr<span class="token punctuation">(</span>border<span class="token operator">*</span><span class="token number">72</span><span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">".::   Hi all, she DID it, you should do it too! Are you ready? ::.  "</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token operator">*</span><span class="token number">72</span><span class="token punctuation">)</span>_flag <span class="token operator">=</span> <span class="token boolean">False</span>n<span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">20</span>N <span class="token operator">=</span> <span class="token builtin">set</span><span class="token punctuation">(</span><span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>K <span class="token operator">=</span> <span class="token punctuation">[</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> n<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span class="token punctuation">]</span>cnt<span class="token punctuation">,</span> STEP <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">*</span> n <span class="token operator">//</span> l <span class="token operator">-</span> <span class="token number">1</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>ans <span class="token operator">=</span> sc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>_A <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token builtin">int</span><span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">for</span> _  <span class="token keyword">in</span> ans<span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>_A<span class="token punctuation">)</span> <span class="token operator">&lt;=</span> l <span class="token keyword">and</span> <span class="token builtin">set</span><span class="token punctuation">(</span>_A<span class="token punctuation">)</span><span class="token punctuation">.</span>issubset<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">:</span>DID <span class="token operator">=</span> did<span class="token punctuation">(</span>n<span class="token punctuation">,</span> l<span class="token punctuation">,</span> K<span class="token punctuation">,</span> _A<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'DID = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>DID<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">set</span><span class="token punctuation">(</span>_A<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">set</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">:</span>_flag <span class="token operator">=</span> <span class="token boolean">True</span><span class="token keyword">else</span><span class="token punctuation">:</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">'Exception! Bye!!'</span><span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">'Your input is not valid! Bye!!'</span><span class="token punctuation">)</span><span class="token keyword">if</span> _flag<span class="token punctuation">:</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'Congrats! the flag: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> cnt <span class="token operator">></span> STEP<span class="token punctuation">:</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'Too many tries, bye!'</span></span><span class="token punctuation">)</span>cnt <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>这是一道有远端的题，需要找到一组集合A与预设的K集合相同。</p><p>每次输入长度不大于20的集合AA，可以返回K-AA集合中元素i^2+randint(0,1)的结果。</p><p>做题的时候，一开始没有考虑到不同数字有相同的结果，直接将0-126数字分7组,手撸出的结果，然后没给出flag，就想到不同数字有相同的结果，还要重来，不会用pwntools库,哭死，不想写了</p><p>正解：</p><p><img src="/post/946059d/Cryptoctf1.png" alt="image-20230710114150369"></p><p>所以要将0-126正确分组，使每一组中的元素，不再存在误解（即返回的i**2（mod 127）结果相同），而且保证每组长度不大于20。</p><p>先分组</p><p>1.按照item中的元素与（1，len(item））无干扰元素分组</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n<span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token number">127</span><span class="token punctuation">,</span> <span class="token number">20</span>q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> item <span class="token keyword">in</span> q<span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span> <span class="token operator">>=</span> l<span class="token punctuation">:</span>            <span class="token keyword">continue</span>        okIn <span class="token operator">=</span> <span class="token boolean">True</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>item<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#按照item中的元素与（1，len(item））无干扰元素分组</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>i<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> k<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">%</span> n <span class="token keyword">in</span> <span class="token punctuation">[</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>                okIn <span class="token operator">=</span> <span class="token boolean">False</span>                <span class="token keyword">break</span>        <span class="token keyword">if</span> okIn<span class="token punctuation">:</span>            item<span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        q<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">>=</span> l<span class="token punctuation">:</span>        a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span>        q <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>a<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''[[[0, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 13, 14, 15, 18, 19, 20, 21, 22, 23],[1, 12, 17, 24, 25, 26, 27, 28, 29, 30, 31, 33, 34, 38, 39, 40, 41, 42, 43, 44], [16, 32, 35, 36, 37, 45, 46, 47, 48, 49, 50, 51, 55, 56, 57, 58, 59, 60, 61, 63], [52, 53, 54, 62, 64, 65, 66, 67, 68, 69, 70, 71, 72, 76, 77, 78, 81, 83, 84, 85], [73, 74, 75, 79, 80, 82, 86, 87, 88, 89, 90, 93, 94, 96, 97, 98, 99, 100, 102, 104],[91, 92, 95, 101, 103, 105, 106, 107, 108, 109, 112, 113, 114], [110, 111, 115, 116, 117, 118, 119, 120], [121, 122, 123, 124], [125],[126]]]'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>2.找到did处理后返回的值对应的数字，相同返回值作为一个列表,依次从不同列表（长度最大开始）挑选一个值作为一组，每组 长度不超过20</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">127</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">[</span>i <span class="token operator">*</span> i <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i <span class="token operator">*</span> i <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">#a中存的是经过did后可能返回的值对应的数字（0，126）</span><span class="token comment">##[[0], [0, 1, 126], [1, 16, 111, 126], [16, 111], [2, 125], [2, 125], [], [], [32, 95], [3, 32, 95, 124], [3, 124], [30, 97], [30, 97], [34, 93], [34, 93], [53, 74], [4, 53, 74, 123], [4, 12, 115, 123], [12, 48, 79, 115], [20, 48, 79, 107], [20, 107], [23, 104], [23, 28, 99, 104], [28, 99], [], [5, 122], [5, 36, 91, 122], [36, 91], [], [], [41, 86], [41, 44, 83, 86], [44, 63, 64, 83], [63, 64], [62, 65], [17, 62, 65, 110], [6, 17, 110, 121], [6, 52, 75, 121], [52, 61, 66, 75], [61, 66], [], [26, 101], [13, 26, 101, 114], [13, 114], [60, 67], [60, 67], [], [38, 89], [38, 89], [7, 120], [7, 47, 80, 120], [47, 80], [59, 68], [59, 68], [], [], [], [], [], [], [21, 106], [21, 51, 76, 106], [51, 58, 69, 76], [58, 69], [8, 119], [8, 119], [], [], [24, 103], [14, 24, 103, 113], [14, 18, 109, 113], [18, 43, 84, 109], [31, 43, 84, 96], [31, 33, 94, 96], [33, 57, 70, 94], [57, 70], [40, 87], [40, 87], [], [29, 98], [29, 98], [9, 118], [9, 35, 92, 118], [35, 92], [46, 81], [46, 81], [], [50, 77], [50, 56, 71, 77], [56, 71], [], [], [], [], [27, 100], [27, 100], [], [], [15, 112], [15, 37, 90, 112], [10, 37, 90, 117], [10, 117], [], [22, 105], [22, 55, 72, 105], [55, 72], [], [19, 108], [19, 108], [], [], [], [], [42, 85], [42, 85], [49, 78], [49, 78], [25, 102], [25, 102], [], [45, 82], [11, 45, 82, 116], [11, 54, 73, 116], [54, 73], [39, 88], [39, 88], []]</span><span class="token comment">#a[1]，经过did处理后可能返回1的数字：0，1，126</span><span class="token comment"># [len(a[i]) for i in range(127)]</span><span class="token comment"># 从最大长度里取值</span>K <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#记录每组互不干扰的值</span>    tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">#use记录did处理后的值</span>    used <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token comment">#找到未使用的最大长度列表</span>        l <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> used<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#将其中的元素添加到临时列表 tmp 中，并记录已使用的元素值。</span>            <span class="token comment"># 同时，移除其他列表中与已使用元素值相同的元素，并更新 used 列表。</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> l <span class="token keyword">and</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> used<span class="token punctuation">:</span>                <span class="token comment">#移除列表最后一个元素，并赋值给v</span>                v <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                used<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v <span class="token operator">*</span> v <span class="token operator">%</span> n<span class="token punctuation">)</span>                used<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v <span class="token operator">*</span> v <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> v <span class="token keyword">in</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>ii <span class="token keyword">for</span> ii <span class="token keyword">in</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">if</span> ii <span class="token operator">!=</span> v<span class="token punctuation">]</span>                <span class="token keyword">break</span>    <span class="token comment">#print(tmp)</span>                <span class="token comment"># K.append(','.join([str(i) for i in tmp]))</span>    K<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wp">WP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">n <span class="token operator">=</span> <span class="token number">127</span>a <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    a<span class="token punctuation">[</span>i <span class="token operator">*</span> i <span class="token operator">%</span> n<span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    a<span class="token punctuation">[</span>i <span class="token operator">*</span> i <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>append<span class="token punctuation">(</span>i<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token comment">#a中存的是经过did后可能返回的值对应的数字（0，126）</span><span class="token comment">##[[0], [0, 1, 126], [1, 16, 111, 126], [16, 111], [2, 125], [2, 125], [], [], [32, 95], [3, 32, 95, 124], [3, 124], [30, 97], [30, 97], [34, 93], [34, 93], [53, 74], [4, 53, 74, 123], [4, 12, 115, 123], [12, 48, 79, 115], [20, 48, 79, 107], [20, 107], [23, 104], [23, 28, 99, 104], [28, 99], [], [5, 122], [5, 36, 91, 122], [36, 91], [], [], [41, 86], [41, 44, 83, 86], [44, 63, 64, 83], [63, 64], [62, 65], [17, 62, 65, 110], [6, 17, 110, 121], [6, 52, 75, 121], [52, 61, 66, 75], [61, 66], [], [26, 101], [13, 26, 101, 114], [13, 114], [60, 67], [60, 67], [], [38, 89], [38, 89], [7, 120], [7, 47, 80, 120], [47, 80], [59, 68], [59, 68], [], [], [], [], [], [], [21, 106], [21, 51, 76, 106], [51, 58, 69, 76], [58, 69], [8, 119], [8, 119], [], [], [24, 103], [14, 24, 103, 113], [14, 18, 109, 113], [18, 43, 84, 109], [31, 43, 84, 96], [31, 33, 94, 96], [33, 57, 70, 94], [57, 70], [40, 87], [40, 87], [], [29, 98], [29, 98], [9, 118], [9, 35, 92, 118], [35, 92], [46, 81], [46, 81], [], [50, 77], [50, 56, 71, 77], [56, 71], [], [], [], [], [27, 100], [27, 100], [], [], [15, 112], [15, 37, 90, 112], [10, 37, 90, 117], [10, 117], [], [22, 105], [22, 55, 72, 105], [55, 72], [], [19, 108], [19, 108], [], [], [], [], [42, 85], [42, 85], [49, 78], [49, 78], [25, 102], [25, 102], [], [45, 82], [11, 45, 82, 116], [11, 54, 73, 116], [54, 73], [39, 88], [39, 88], []]</span><span class="token comment">#a[1]，经过did处理后可能返回1的数字：0，1，126</span><span class="token comment"># [len(a[i]) for i in range(127)]</span><span class="token comment"># 从最大长度里取值</span>K <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">7</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#记录每组互不干扰的值</span>    tmp <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">#use记录did处理后的值</span>    used <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">while</span> <span class="token builtin">len</span><span class="token punctuation">(</span>tmp<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token comment">#找到未使用的最大长度列表</span>        l <span class="token operator">=</span> <span class="token builtin">max</span><span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span> <span class="token keyword">if</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> used<span class="token punctuation">]</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> l <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>        <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token comment">#将其中的元素添加到临时列表 tmp 中，并记录已使用的元素值。</span>            <span class="token comment"># 同时，移除其他列表中与已使用元素值相同的元素，并更新 used 列表。</span>            <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> l <span class="token keyword">and</span> i <span class="token keyword">not</span> <span class="token keyword">in</span> used<span class="token punctuation">:</span>                <span class="token comment">#移除列表最后一个元素，并赋值给v</span>                v <span class="token operator">=</span> a<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>                tmp<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v<span class="token punctuation">)</span>                used<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v <span class="token operator">*</span> v <span class="token operator">%</span> n<span class="token punctuation">)</span>                used<span class="token punctuation">.</span>append<span class="token punctuation">(</span>v <span class="token operator">*</span> v <span class="token operator">%</span> n <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>                <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">127</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">if</span> v <span class="token keyword">in</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span><span class="token punctuation">:</span>                        a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token operator">=</span> <span class="token punctuation">[</span>ii <span class="token keyword">for</span> ii <span class="token keyword">in</span> a<span class="token punctuation">[</span>j<span class="token punctuation">]</span> <span class="token keyword">if</span> ii <span class="token operator">!=</span> v<span class="token punctuation">]</span>                <span class="token keyword">break</span>    <span class="token comment">#print(tmp)</span>                <span class="token comment"># K.append(','.join([str(i) for i in tmp]))</span>    K<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token punctuation">[</span>i <span class="token keyword">for</span> i <span class="token keyword">in</span> tmp<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''for v in K:    t = eval(str(v))    s = []    for i in t:        s.append(i * i % n)        s.append(i * i % n + 1)    print(s)#[1, 2, 9, 10, 16, 17, 17, 18, 19, 20, 21, 22, 25, 26, 30, 31, 31, 32, 35, 36, 36, 37, 37, 38, 42, 43, 49, 50, 60, 61, 61, 62, 69, 70, 70, 71, 72, 73, 73, 74]#[81, 82, 87, 88, 98, 99, 100, 101, 103, 104, 121, 122, 2, 3, 8, 9, 15, 16, 18, 19, 22, 23, 26, 27, 32, 33, 34, 35, 38, 39, 41, 42, 50, 51, 62, 63, 68, 69, 71, 72]#[74, 75, 82, 83, 88, 89, 99, 100, 104, 105, 120, 121, 122, 123, 1, 2, 4, 5, 8, 9, 11, 12, 13, 14, 15, 16, 17, 18, 18, 19, 22, 23, 26, 27, 31, 32, 34, 35, 35, 36]#[37, 38, 41, 42, 44, 45, 47, 48, 50, 51, 52, 53, 61, 62, 64, 65, 68, 69, 70, 71, 71, 72, 73, 74, 76, 77, 79, 80, 82, 83, 84, 85, 88, 89, 94, 95, 99, 100, 104, 105]#[107, 108, 113, 114, 115, 116, 117, 118, 120, 121, 122, 123, 124, 125, 0, 1, 2, 3, 4, 5, 9, 10, 11, 12, 13, 14, 16, 17, 19, 20, 21, 22, 25, 26, 30, 31, 32, 33, 36, 37]#[38, 39, 42, 43, 44, 45, 47, 48, 49, 50, 52, 53, 60, 61, 62, 63, 64, 65, 69, 70, 72, 73, 74, 75, 76, 77, 79, 80, 81, 82, 84, 85, 87, 88, 94, 95, 98, 99, 100, 101]#[103, 104, 107, 108, 113, 114, 115, 116, 117, 118, 121, 122, 124, 125]'''</span><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span>p <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'00.cr.yp.toc.tf'</span><span class="token punctuation">,</span> <span class="token number">11337</span><span class="token punctuation">)</span><span class="token comment">#接收三行</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span>n <span class="token operator">=</span> <span class="token number">127</span>KP <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">126</span><span class="token punctuation">,</span> <span class="token number">124</span><span class="token punctuation">,</span> <span class="token number">123</span><span class="token punctuation">,</span> <span class="token number">115</span><span class="token punctuation">,</span> <span class="token number">107</span><span class="token punctuation">,</span> <span class="token number">104</span><span class="token punctuation">,</span> <span class="token number">122</span><span class="token punctuation">,</span> <span class="token number">86</span><span class="token punctuation">,</span> <span class="token number">83</span><span class="token punctuation">,</span> <span class="token number">110</span><span class="token punctuation">,</span> <span class="token number">121</span><span class="token punctuation">,</span> <span class="token number">75</span><span class="token punctuation">,</span> <span class="token number">114</span><span class="token punctuation">,</span> <span class="token number">120</span><span class="token punctuation">,</span> <span class="token number">106</span><span class="token punctuation">,</span> <span class="token number">76</span><span class="token punctuation">,</span> <span class="token number">113</span><span class="token punctuation">,</span> <span class="token number">109</span><span class="token punctuation">,</span> <span class="token number">96</span><span class="token punctuation">,</span> <span class="token number">94</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">118</span><span class="token punctuation">,</span> <span class="token number">77</span><span class="token punctuation">,</span> <span class="token number">112</span><span class="token punctuation">,</span> <span class="token number">117</span><span class="token punctuation">,</span> <span class="token number">105</span><span class="token punctuation">,</span> <span class="token number">116</span><span class="token punctuation">,</span> <span class="token number">111</span><span class="token punctuation">,</span> <span class="token number">95</span><span class="token punctuation">,</span> <span class="token number">74</span><span class="token punctuation">,</span> <span class="token number">79</span><span class="token punctuation">,</span> <span class="token number">99</span><span class="token punctuation">,</span> <span class="token number">91</span><span class="token punctuation">,</span> <span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">65</span><span class="token punctuation">,</span> <span class="token number">66</span><span class="token punctuation">,</span> <span class="token number">101</span><span class="token punctuation">,</span> <span class="token number">80</span><span class="token punctuation">,</span> <span class="token number">69</span><span class="token punctuation">,</span> <span class="token number">103</span><span class="token punctuation">,</span> <span class="token number">84</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">70</span><span class="token punctuation">,</span> <span class="token number">92</span><span class="token punctuation">,</span> <span class="token number">71</span><span class="token punctuation">,</span> <span class="token number">90</span><span class="token punctuation">,</span> <span class="token number">72</span><span class="token punctuation">,</span> <span class="token number">82</span><span class="token punctuation">,</span> <span class="token number">73</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">125</span><span class="token punctuation">,</span> <span class="token number">32</span><span class="token punctuation">,</span> <span class="token number">97</span><span class="token punctuation">,</span> <span class="token number">93</span><span class="token punctuation">,</span> <span class="token number">53</span><span class="token punctuation">,</span> <span class="token number">12</span><span class="token punctuation">,</span> <span class="token number">48</span><span class="token punctuation">,</span> <span class="token number">28</span><span class="token punctuation">,</span> <span class="token number">36</span><span class="token punctuation">,</span> <span class="token number">44</span><span class="token punctuation">,</span> <span class="token number">62</span><span class="token punctuation">,</span> <span class="token number">17</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">52</span><span class="token punctuation">,</span> <span class="token number">26</span><span class="token punctuation">,</span> <span class="token number">67</span><span class="token punctuation">,</span> <span class="token number">89</span><span class="token punctuation">,</span> <span class="token number">47</span><span class="token punctuation">,</span> <span class="token number">68</span><span class="token punctuation">,</span> <span class="token number">51</span><span class="token punctuation">,</span> <span class="token number">119</span><span class="token punctuation">,</span> <span class="token number">24</span><span class="token punctuation">,</span> <span class="token number">18</span><span class="token punctuation">,</span> <span class="token number">43</span><span class="token punctuation">,</span> <span class="token number">33</span><span class="token punctuation">,</span> <span class="token number">87</span><span class="token punctuation">,</span> <span class="token number">98</span><span class="token punctuation">,</span> <span class="token number">35</span><span class="token punctuation">,</span> <span class="token number">81</span><span class="token punctuation">,</span> <span class="token number">56</span><span class="token punctuation">,</span> <span class="token number">100</span><span class="token punctuation">,</span> <span class="token number">37</span><span class="token punctuation">,</span> <span class="token number">55</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">108</span><span class="token punctuation">,</span> <span class="token number">85</span><span class="token punctuation">,</span> <span class="token number">78</span><span class="token punctuation">,</span> <span class="token number">102</span><span class="token punctuation">,</span> <span class="token number">45</span><span class="token punctuation">,</span> <span class="token number">54</span><span class="token punctuation">,</span> <span class="token number">88</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">,</span> <span class="token number">30</span><span class="token punctuation">,</span> <span class="token number">34</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">,</span> <span class="token number">20</span><span class="token punctuation">,</span> <span class="token number">23</span><span class="token punctuation">,</span> <span class="token number">5</span><span class="token punctuation">,</span> <span class="token number">41</span><span class="token punctuation">,</span> <span class="token number">63</span><span class="token punctuation">,</span> <span class="token number">6</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">61</span><span class="token punctuation">,</span> <span class="token number">13</span><span class="token punctuation">,</span> <span class="token number">60</span><span class="token punctuation">,</span> <span class="token number">38</span><span class="token punctuation">,</span> <span class="token number">7</span><span class="token punctuation">,</span> <span class="token number">59</span><span class="token punctuation">,</span> <span class="token number">21</span><span class="token punctuation">,</span> <span class="token number">58</span><span class="token punctuation">,</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">14</span><span class="token punctuation">,</span> <span class="token number">31</span><span class="token punctuation">,</span> <span class="token number">57</span><span class="token punctuation">,</span> <span class="token number">40</span><span class="token punctuation">,</span> <span class="token number">29</span><span class="token punctuation">,</span> <span class="token number">9</span><span class="token punctuation">,</span> <span class="token number">46</span><span class="token punctuation">,</span> <span class="token number">50</span><span class="token punctuation">,</span> <span class="token number">27</span><span class="token punctuation">,</span> <span class="token number">15</span><span class="token punctuation">,</span> <span class="token number">10</span><span class="token punctuation">]</span><span class="token punctuation">,</span>      <span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token punctuation">,</span> <span class="token number">42</span><span class="token punctuation">,</span> <span class="token number">49</span><span class="token punctuation">,</span> <span class="token number">25</span><span class="token punctuation">,</span> <span class="token number">11</span><span class="token punctuation">,</span> <span class="token number">39</span><span class="token punctuation">]</span><span class="token punctuation">]</span>K <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> kk <span class="token keyword">in</span> KP<span class="token punctuation">:</span>    <span class="token comment">#将列表 kk 中的元素转换为字符串，并以逗号分隔，然后将该字符串编码为字节流并发送</span>    p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> kk<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#读到DID=出现为止</span>    p<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'DID = '</span><span class="token punctuation">)</span>    <span class="token comment">#接收字节流数据，并将其转换为列表v</span>    v <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#筛选出不在交集的元素</span>    <span class="token keyword">for</span> tk <span class="token keyword">in</span> kk<span class="token punctuation">:</span>        r <span class="token operator">=</span> tk <span class="token operator">*</span> tk <span class="token operator">%</span> n        <span class="token keyword">if</span> <span class="token punctuation">(</span>r <span class="token keyword">not</span> <span class="token keyword">in</span> v<span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>r <span class="token operator">+</span> <span class="token number">1</span> <span class="token keyword">not</span> <span class="token keyword">in</span> v<span class="token punctuation">)</span><span class="token punctuation">:</span>            K<span class="token punctuation">.</span>append<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>tk<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'K = '</span><span class="token punctuation">,</span> K<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>K<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">20</span><span class="token punctuation">:</span>        <span class="token keyword">break</span>p<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">','</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span>K<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment"># CCTF&#123;W4rM_Up_CrYpt0_Ch4Ll3n9e!!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/post/946059d/Cryptoctf3.png" alt="image-20230710151730392"></p><p><img src="/post/946059d/Cryptoctf2.png" alt="image-20230710151404019"></p><h2 id="blue-office">blue_office</h2><h3 id="题目">题目</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/enc python3</span><span class="token keyword">import</span> binascii<span class="token keyword">from</span> secret <span class="token keyword">import</span> seed<span class="token punctuation">,</span> flag<span class="token keyword">def</span> <span class="token function">gen_seed</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>i<span class="token punctuation">,</span> j<span class="token punctuation">,</span> k <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span>k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>i <span class="token operator">+=</span> <span class="token number">1</span>i <span class="token operator">=</span> <span class="token number">0</span><span class="token keyword">while</span> i <span class="token operator">&lt;</span> j<span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token punctuation">(</span>i <span class="token operator">%</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>k <span class="token operator">=</span> k <span class="token operator">-</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">else</span><span class="token punctuation">:</span>k <span class="token operator">=</span> k <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token builtin">ord</span><span class="token punctuation">(</span>s<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> i <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>k <span class="token operator">=</span> k <span class="token operator">%</span> <span class="token number">2147483647</span>i <span class="token operator">+=</span> <span class="token number">1</span>k <span class="token operator">=</span> <span class="token punctuation">(</span>k <span class="token operator">*</span> j<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2147483647</span><span class="token keyword">return</span> k<span class="token keyword">def</span> <span class="token function">reseed</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> s <span class="token operator">*</span> <span class="token number">214013</span> <span class="token operator">+</span> <span class="token number">2531011</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> msg<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">assert</span> s <span class="token operator">&lt;=</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">32</span>c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> senc<span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">while</span> c <span class="token operator">&lt;</span> l<span class="token punctuation">:</span>d <span class="token operator">=</span> reseed<span class="token punctuation">(</span>d<span class="token punctuation">)</span>enc <span class="token operator">+=</span> <span class="token punctuation">(</span>msg<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>c <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">return</span> encenc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>seed<span class="token punctuation">,</span> flag<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'enc = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>binascii<span class="token punctuation">.</span>hexlify<span class="token punctuation">(</span>enc<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>爆破seed</p><p>改了d, 写成了d= (s- 2531011)//224013,爆破一天都没出来，不知道当时脑子在干嘛(遍历完都没出结果，很懵，没仔细写代码)</p><p>s &lt;= 2**32</p><p>按照源代码爆破seed</p><h3 id="wp">wp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> binascii<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> trangeenc <span class="token operator">=</span> binascii<span class="token punctuation">.</span>unhexlify<span class="token punctuation">(</span><span class="token string">b'b0cb631639f8a5ab20ff7385926383f89a71bbc4ed2d57142e05f39d434fce'</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">reseed</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">return</span> s <span class="token operator">*</span> <span class="token number">214013</span> <span class="token operator">+</span> <span class="token number">2531011</span><span class="token keyword">def</span> <span class="token function">decrypt</span><span class="token punctuation">(</span>s<span class="token punctuation">,</span> enc<span class="token punctuation">)</span><span class="token punctuation">:</span>    c<span class="token punctuation">,</span> d <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> s    dec<span class="token punctuation">,</span> l <span class="token operator">=</span> <span class="token string">b''</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>enc<span class="token punctuation">)</span>    <span class="token keyword">while</span> c <span class="token operator">&lt;</span> l<span class="token punctuation">:</span>        d <span class="token operator">=</span> reseed<span class="token punctuation">(</span>d<span class="token punctuation">)</span>        dec <span class="token operator">+=</span> <span class="token punctuation">(</span>enc<span class="token punctuation">[</span>c<span class="token punctuation">]</span> <span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>d <span class="token operator">>></span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">&amp;</span> <span class="token number">0xff</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>to_bytes<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token string">'big'</span><span class="token punctuation">)</span>        c <span class="token operator">+=</span> <span class="token number">1</span>    <span class="token keyword">return</span> dec<span class="token keyword">for</span> seed <span class="token keyword">in</span> trange<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    flag <span class="token operator">=</span> decrypt<span class="token punctuation">(</span>seed<span class="token punctuation">,</span> enc<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'CCTF&#123;'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'Found flag: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="suction">suction</h2><h3 id="题目">题目</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">keygen</span><span class="token punctuation">(</span>nbit<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>getPrime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token string">'__'</span><span class="token punctuation">]</span>e<span class="token punctuation">,</span> n <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p <span class="token operator">*</span> qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> GCD<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>N <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span>r<span class="token punctuation">]</span>E <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span>r<span class="token punctuation">]</span>PKEY <span class="token operator">=</span> N <span class="token operator">+</span> Epkey <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">return</span> PKEY<span class="token punctuation">,</span> pkey<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">:</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>n<span class="token punctuation">,</span> e <span class="token operator">=</span> pkeyc <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>C <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span>r<span class="token punctuation">]</span><span class="token keyword">return</span> Cr<span class="token punctuation">,</span> nbit <span class="token operator">=</span> <span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">128</span>PKEY<span class="token punctuation">,</span> pkey <span class="token operator">=</span> keygen<span class="token punctuation">(</span>nbit<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'PKEY = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>PKEY<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>FLAG <span class="token operator">=</span> flag<span class="token punctuation">.</span>lstrip<span class="token punctuation">(</span><span class="token string">b'CCTF&#123;'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">b'&#125;'</span><span class="token punctuation">)</span>enc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>FLAG<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'enc = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">int</span><span class="token punctuation">(</span>enc<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment">#PKEY = 55208723145458976481271800608918815438075571763947979755496510859604544396672=n+e</span><span class="token comment">#ENC = 127194641882350916936065994389482700479720132804140137082316257506737630761</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>N = bin(n)[2:-r]<br>E = bin(e)[2:-r]<br>PKEY = N + E</p><p>以为PKEY是n去掉8位与e去掉八位相加的结果</p><p>结果…</p><p><img src="/post/946059d/Cryptoctf5.png" alt="image-20230710155629038"></p><p>c,n,e后八位未知,爆破n,c,e。爆破n同时需要调用factordb的api来分解n，直到获得2个128位比特的素数因子。</p><p>已知e是16位，去掉八位，he=int(bin(PKEY)[-8:], 2) &lt;&lt; 8</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> ecdsa<span class="token punctuation">.</span>numbertheory <span class="token keyword">import</span> next_primePKEY <span class="token operator">=</span> <span class="token number">55208723145458976481271800608918815438075571763947979755496510859604544396672</span>ENC <span class="token operator">=</span> <span class="token number">127194641882350916936065994389482700479720132804140137082316257506737630761</span><span class="token comment"># 部分nec</span>hn <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>PKEY<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>he <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>PKEY<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span><span class="token comment">#print(int(bin(PKEY)[2:-8], 2))</span><span class="token comment">#215659074786949126879967971128589122804982702202921795919908245545330251549</span><span class="token comment">#print(hn)</span><span class="token comment">#55208723145458976481271800608918815438075571763947979755496510859604544396544</span><span class="token comment"># 可能的n</span>plist <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token comment">#100000以内所有素数</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    plist<span class="token punctuation">.</span>append<span class="token punctuation">(</span>next_prime<span class="token punctuation">(</span>plist<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">8</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tn <span class="token operator">=</span> hn <span class="token operator">+</span> i    <span class="token comment">#步长为2保证n是素数</span>    <span class="token keyword">for</span> v <span class="token keyword">in</span> plist<span class="token punctuation">:</span>        <span class="token keyword">if</span> tn <span class="token operator">%</span> v <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token comment">#保证n能被分解两个128bit的p,q</span>            <span class="token keyword">break</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token keyword">not</span> isPrime<span class="token punctuation">(</span>tn<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>tn<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''#找到所有可能的N552087231454589764812718006089188154380755717639479797554965108596045443965715520872314545897648127180060891881543807557176394797975549651085960454439657755208723145458976481271800608918815438075571763947979755496510859604544396583552087231454589764812718006089188154380755717639479797554965108596045443965895520872314545897648127180060891881543807557176394797975549651085960454439660355208723145458976481271800608918815438075571763947979755496510859604544396613552087231454589764812718006089188154380755717639479797554965108596045443966335520872314545897648127180060891881543807557176394797975549651085960454439664355208723145458976481271800608918815438075571763947979755496510859604544396667'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>找到n</p><p>然后爆破e,和c</p><h3 id="wp">wp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span><span class="token operator">*</span>PKEY <span class="token operator">=</span> <span class="token number">55208723145458976481271800608918815438075571763947979755496510859604544396672</span>ENC <span class="token operator">=</span> <span class="token number">127194641882350916936065994389482700479720132804140137082316257506737630761</span>he <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>PKEY<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">8</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">&lt;&lt;</span> <span class="token number">8</span>n <span class="token operator">=</span> <span class="token number">55208723145458976481271800608918815438075571763947979755496510859604544396613</span>p <span class="token operator">=</span> <span class="token number">292926085409388790329114797826820624883</span>q <span class="token operator">=</span> <span class="token number">188473222069998143349386719941755726311</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>hc <span class="token operator">=</span> ENC<span class="token operator">&lt;&lt;</span><span class="token number">8</span><span class="token comment"># 可能的e</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">8</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        c <span class="token operator">=</span> hc <span class="token operator">+</span> i        e <span class="token operator">=</span> he <span class="token operator">+</span> j        <span class="token keyword">if</span> <span class="token keyword">not</span> isPrime<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>        flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span><span class="token comment"># 6oRYGy&amp;Dc$G2ZS</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Medium</h1><h2 id="derik">Derik</h2><h3 id="题目">题目</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> C<span class="token punctuation">,</span> e<span class="token punctuation">,</span> d<span class="token punctuation">,</span> p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> r<span class="token punctuation">,</span> flagO <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1391526622949983</span><span class="token punctuation">,</span> <span class="token number">2848691279889518</span><span class="token punctuation">,</span> <span class="token number">89200900157319</span><span class="token punctuation">,</span> <span class="token number">31337</span><span class="token punctuation">]</span><span class="token keyword">assert</span> isPrime<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>d<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token keyword">assert</span> C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> q <span class="token operator">>=</span> <span class="token number">0</span><span class="token keyword">assert</span> C<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> q <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> r <span class="token operator">>=</span> <span class="token number">0</span><span class="token keyword">assert</span> C<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> r <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">>=</span> <span class="token number">0</span><span class="token keyword">assert</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token operator">**</span> e <span class="token operator">+</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> q <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token operator">**</span> e <span class="token operator">+</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> r <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">)</span> <span class="token operator">**</span> e <span class="token operator">==</span> d <span class="token operator">*</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> q<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> q <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>C<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> r <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> p<span class="token punctuation">)</span><span class="token keyword">assert</span> C<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">*</span> e <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> d <span class="token operator">==</span> O<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>n <span class="token operator">=</span> e <span class="token operator">*</span> d <span class="token operator">*</span> p <span class="token operator">*</span> q <span class="token operator">*</span> rm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> <span class="token number">65537</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'C = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>C<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'c = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment">#C = [5960650533801939766973431801711817334521794480800845853788489396583576739362531091881299990317357532712965991685855356736023156123272639095501827949743772, 6521307334196962312588683933194431457121496634106944587943458360009084052009954473233805656430247044180398241991916007097053259167347016989949709567530079, 1974144590530162761749719653512492399674271448426179161347522113979158665904709425021321314572814344781742306475435350045259668002944094011342611452228289, 2613994669316609213059728351496129310385706729636898358367479603483933513667486946164472738443484347294444234222189837370548518512002145671578950835894451, 8127380985210701021743355783483366664759506587061015828343032669060653534242331741280215982865084745259496501567264419306697788067646135512747952351628613, 5610271406291656026350079703507496574797593266125358942992954619413518379131260031910808827754539354830563482514244310277292686031300804846114623378588204, 10543, 4]</span><span class="token comment">#c = 80607532565510116966388633842290576008441185412513199071132245517888982730482694498575603226192340250444218146275844981580541820190393565327655055810841864715587561905777565790204415381897361016717820490400344469662479972681922265843907711283466105388820804099348169127917445858990935539611525002789966360469324052731259957798534960845391898385316664884009395500706952606508518095360995300436595374193777531503846662413864377535617876584843281151030183895735511854</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>线性丢番图方程</p><p><a href="https://www.cnblogs.com/luoyj/p/13394962.html">算法竞赛专题解析（21）：数论–线性丢番图方程 - 罗勇军999 - 博客园 (cnblogs.com)</a></p><p><img src="/post/946059d/Cryptoctf7.png" alt="image-20230710200745942"></p><p>求解二元一次线性方程，求出e,d</p><p><img src="/post/946059d/cryptoctf6.png" alt="image-20230710185236881"></p><p><img src="/post/946059d/Ctf8.png" alt="image-20230710201045269"></p><p><img src="/post/946059d/mmexport1688991658703.jpg" alt="mmexport1688991658703"></p><p>由（1）式推出，当a,b，c比较大时，e的取值比较局限，e,d的一组可能解[3,73]</p><p>三次齐次方程等价一个椭圆曲线</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">R<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token operator">></span> <span class="token operator">=</span> QQ<span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#构造F=0 F=x^3 + y^3 + z^3 - 73 * x * y * z</span>cubic <span class="token operator">=</span> x<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> y<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> z<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">-</span> <span class="token number">73</span> <span class="token operator">*</span> x <span class="token operator">*</span> y <span class="token operator">*</span> zP <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token comment">#三次齐次方程转化为椭圆曲线</span>E <span class="token operator">=</span> EllipticCurve_from_cubic<span class="token punctuation">(</span>cubic<span class="token punctuation">,</span> P<span class="token punctuation">,</span> morphism<span class="token operator">=</span><span class="token boolean">False</span><span class="token punctuation">)</span><span class="token comment">#  y^2 - 219*x*y + 3500910*y = x^3 - 47961*x^2 + 766699290*x - 4085456942700</span><span class="token comment">#在椭圆曲线E上找到对应于R的点，并返回该点</span>f <span class="token operator">=</span> EllipticCurve_from_cubic<span class="token punctuation">(</span>cubic<span class="token punctuation">,</span> P<span class="token punctuation">,</span> morphism<span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>finv <span class="token operator">=</span> f<span class="token punctuation">.</span>inverse<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#逆映射可以用于将椭圆曲线上的点映射回原始定义域，并且保持椭圆曲线上的运算关系。</span><span class="token comment">#R为椭圆曲线对象E的生成元（或基点）。</span>R <span class="token operator">=</span> E<span class="token punctuation">.</span>gens<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>finv<span class="token punctuation">(</span>R<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#(2848691279889518/1391526622949983 : 89200900157319/1391526622949983 : 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>结果为(2848691279889518/1391526622949983 : 89200900157319/1391526622949983 : 1)</p><p>恢复（x,y,z)=(A,B,C)=(2848691279889518 : 89200900157319 : 1391526622949983)</p><p>显然A=O[0],B=O[1],C=O[2]</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5960650533801939766973431801711817334521794480800845853788489396583576739362531091881299990317357532712965991685855356736023156123272639095501827949743772</span><span class="token punctuation">,</span> <span class="token number">6521307334196962312588683933194431457121496634106944587943458360009084052009954473233805656430247044180398241991916007097053259167347016989949709567530079</span><span class="token punctuation">,</span> <span class="token number">1974144590530162761749719653512492399674271448426179161347522113979158665904709425021321314572814344781742306475435350045259668002944094011342611452228289</span><span class="token punctuation">,</span> <span class="token number">2613994669316609213059728351496129310385706729636898358367479603483933513667486946164472738443484347294444234222189837370548518512002145671578950835894451</span><span class="token punctuation">,</span> <span class="token number">8127380985210701021743355783483366664759506587061015828343032669060653534242331741280215982865084745259496501567264419306697788067646135512747952351628613</span><span class="token punctuation">,</span> <span class="token number">5610271406291656026350079703507496574797593266125358942992954619413518379131260031910808827754539354830563482514244310277292686031300804846114623378588204</span><span class="token punctuation">,</span> <span class="token number">10543</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>c <span class="token operator">=</span> <span class="token number">80607532565510116966388633842290576008441185412513199071132245517888982730482694498575603226192340250444218146275844981580541820190393565327655055810841864715587561905777565790204415381897361016717820490400344469662479972681922265843907711283466105388820804099348169127917445858990935539611525002789966360469324052731259957798534960845391898385316664884009395500706952606508518095360995300436595374193777531503846662413864377535617876584843281151030183895735511854</span>O <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">1391526622949983</span><span class="token punctuation">,</span> <span class="token number">2848691279889518</span><span class="token punctuation">,</span> <span class="token number">89200900157319</span><span class="token punctuation">,</span> <span class="token number">31337</span><span class="token punctuation">]</span><span class="token comment">#print(C[6],C[7])</span><span class="token comment">#10543 4</span><span class="token keyword">def</span> <span class="token function">ext_euclid</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q <span class="token operator">=</span> ext_euclid<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q<span class="token comment">#print(ext_euclid(10543,-4))</span><span class="token comment">#(1, 2636, -1)</span><span class="token comment">#31337//4=7834</span><span class="token keyword">for</span> k <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">10000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">31337</span> <span class="token operator">+</span> <span class="token number">4</span> <span class="token operator">*</span> k    d <span class="token operator">=</span> <span class="token operator">-</span><span class="token number">82604332</span> <span class="token operator">+</span> <span class="token number">10543</span> <span class="token operator">*</span> k    <span class="token keyword">assert</span> C<span class="token punctuation">[</span><span class="token number">6</span><span class="token punctuation">]</span> <span class="token operator">*</span> e <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">7</span><span class="token punctuation">]</span> <span class="token operator">*</span> d <span class="token operator">==</span> O<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>e<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span>d<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p><img src="/post/946059d/10.png" alt="image-20230710201916582"></p><p>题目的O列表中的前3个元素没有用到，猜一下是a,b,c的值</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>O</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>C</mi><mn>0</mn></msub><mo>∗</mo><mi>p</mi><mo>−</mo><mi>C</mi><mn>1</mn><mo>∗</mo><mi>q</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>O</mi><mo stretchy="false">[</mo><mn>1</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>C</mi><mn>2</mn></msub><mo>∗</mo><mi>q</mi><mo>−</mo><mi>C</mi><mn>3</mn><mo>∗</mo><mi>r</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>O</mi><mo stretchy="false">[</mo><mn>2</mn><mo stretchy="false">]</mo><mo>=</mo><msub><mi>C</mi><mn>4</mn></msub><mo>∗</mo><mi>r</mi><mo>−</mo><mi>C</mi><mn>5</mn><mo>∗</mo><mi>p</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}O[0]=C_0*p-C1*q\\O[1]=C_2*q-C3*r\\O[2]=C_4*r-C5*p\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">0</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">[</span><span class="mord">1</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span><span class="mopen">[</span><span class="mord">2</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="msupsub"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.30110799999999993em;"><span style="top:-2.5500000000000003em;margin-left:-0.07153em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">4</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.15em;"><span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.07153em;">C</span><span class="mord">5</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>sage解方程组（三个方程，三个未知数）</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">C <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token number">5960650533801939766973431801711817334521794480800845853788489396583576739362531091881299990317357532712965991685855356736023156123272639095501827949743772</span><span class="token punctuation">,</span> <span class="token number">6521307334196962312588683933194431457121496634106944587943458360009084052009954473233805656430247044180398241991916007097053259167347016989949709567530079</span><span class="token punctuation">,</span> <span class="token number">1974144590530162761749719653512492399674271448426179161347522113979158665904709425021321314572814344781742306475435350045259668002944094011342611452228289</span><span class="token punctuation">,</span> <span class="token number">2613994669316609213059728351496129310385706729636898358367479603483933513667486946164472738443484347294444234222189837370548518512002145671578950835894451</span><span class="token punctuation">,</span> <span class="token number">8127380985210701021743355783483366664759506587061015828343032669060653534242331741280215982865084745259496501567264419306697788067646135512747952351628613</span><span class="token punctuation">,</span> <span class="token number">5610271406291656026350079703507496574797593266125358942992954619413518379131260031910808827754539354830563482514244310277292686031300804846114623378588204</span><span class="token punctuation">,</span> <span class="token number">10543</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">]</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>r <span class="token operator">=</span> var<span class="token punctuation">(</span><span class="token string">'p q r'</span><span class="token punctuation">)</span>f1 <span class="token operator">=</span> C<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span> <span class="token operator">*</span> q <span class="token operator">-</span> <span class="token number">1391526622949983</span>f2 <span class="token operator">=</span> C<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span> <span class="token operator">*</span> q <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">]</span> <span class="token operator">*</span> r <span class="token operator">-</span> <span class="token number">2848691279889518</span>f3 <span class="token operator">=</span> C<span class="token punctuation">[</span><span class="token number">4</span><span class="token punctuation">]</span> <span class="token operator">*</span> r <span class="token operator">-</span> C<span class="token punctuation">[</span><span class="token number">5</span><span class="token punctuation">]</span> <span class="token operator">*</span> p <span class="token operator">-</span> <span class="token number">89200900157319</span>solve<span class="token punctuation">(</span><span class="token punctuation">[</span>f1<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span>f2<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">,</span>f3<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>r<span class="token punctuation">)</span><span class="token comment">#[[p == 9758621034843917661145412977193922808892309951663464821517963113005483457886774294910761723767526582514514505278091600074371768233672585649562672245905811, q == 8919642442779618620315315582249815126044061421894622037450496385178083791083142991676417756698881509754110765444929271564991855378540939292428839562446571, r == 6736304432663651651650099104581016800112378771266600017972326085742513966258250417227421932482058281545032658577816441378170466639375931780967727070265551]]</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="wp">wp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>e <span class="token operator">=</span> <span class="token number">3</span>d <span class="token operator">=</span> <span class="token number">73</span>p <span class="token operator">=</span> <span class="token number">9758621034843917661145412977193922808892309951663464821517963113005483457886774294910761723767526582514514505278091600074371768233672585649562672245905811</span>q <span class="token operator">=</span> <span class="token number">8919642442779618620315315582249815126044061421894622037450496385178083791083142991676417756698881509754110765444929271564991855378540939292428839562446571</span>r <span class="token operator">=</span> <span class="token number">6736304432663651651650099104581016800112378771266600017972326085742513966258250417227421932482058281545032658577816441378170466639375931780967727070265551</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>e<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>d<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>dd <span class="token operator">=</span> inverse<span class="token punctuation">(</span><span class="token number">65537</span><span class="token punctuation">,</span>f<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>dd<span class="token punctuation">,</span>p<span class="token operator">*</span>q<span class="token operator">*</span>r<span class="token operator">*</span>e<span class="token operator">*</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'CCTF&#123;____Sylvester____tHE0r3m_Of_D3r!va7i0n!&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="insights">Insights</h2><h3 id="题目">题目</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env sage</span> <span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag <span class="token keyword">def</span> <span class="token function">getRandomNBits</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">:</span>nb <span class="token operator">=</span> <span class="token string">'1'</span> <span class="token operator">+</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>n <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">return</span> nb <span class="token keyword">def</span> <span class="token function">getLeader</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>nb <span class="token operator">=</span> L <span class="token operator">+</span> getRandomNBits<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>nb<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token keyword">def</span> <span class="token function">genPrime</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> nbit<span class="token punctuation">)</span><span class="token punctuation">:</span>l <span class="token operator">=</span> <span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token keyword">assert</span> nbit <span class="token operator">>=</span> l<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p <span class="token operator">=</span> getLeader<span class="token punctuation">(</span>L<span class="token punctuation">,</span> nbit <span class="token operator">-</span> l<span class="token punctuation">)</span><span class="token keyword">if</span> is_prime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> p <span class="token keyword">def</span> <span class="token function">genKey</span><span class="token punctuation">(</span>L<span class="token punctuation">,</span> nbit<span class="token punctuation">)</span><span class="token punctuation">:</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> <span class="token punctuation">[</span>genPrime<span class="token punctuation">(</span>L<span class="token punctuation">,</span> nbit<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token string">'__'</span><span class="token punctuation">]</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qd <span class="token operator">=</span> next_prime<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0.2919</span><span class="token punctuation">)</span><span class="token punctuation">)</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>e <span class="token operator">=</span> inverse<span class="token punctuation">(</span>d<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>pubkey<span class="token punctuation">,</span> privkey <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token keyword">return</span> pubkey<span class="token punctuation">,</span> privkey <span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span><span class="token punctuation">:</span>n<span class="token punctuation">,</span> e <span class="token operator">=</span> pubkeym <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">return</span> c nbit <span class="token operator">=</span> <span class="token number">1024</span>L <span class="token operator">=</span> <span class="token builtin">bin</span><span class="token punctuation">(</span>bytes_to_long<span class="token punctuation">(</span><span class="token string">b'Practical'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span>pubkey<span class="token punctuation">,</span> privkey <span class="token operator">=</span> genKey<span class="token punctuation">(</span>L<span class="token punctuation">,</span> nbit<span class="token punctuation">)</span>p<span class="token punctuation">,</span> q <span class="token operator">=</span> privkeyc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span> <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'Information:'</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">85</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'n = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p <span class="token operator">*</span> q<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'e = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pubkey<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'c = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'p = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">bin</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">...[REDACTED]'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'q = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">bin</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>L<span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">&#125;</span></span><span class="token string">...[REDACTED]'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'-'</span> <span class="token operator">*</span> <span class="token number">85</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>n,e,c已知，给出了d…</p><h3 id="wp">wp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token comment">#sage</span>n <span class="token operator">=</span> <span class="token number">12765231982257032754070342601068819788671760506321816381988340379929052646067454855779362773785313297204165444163623633335057895252608396010414744222572161530653104640020689896882490979790275711854268113058363186249545193245142912930804650114934761299016468156185416083682476142929968501395899099376750415294540156026131156551291971922076435528869024742993840057342092865203064721826362149723366381892539617642364692012936270150691803063945919154346756726869466855557344213050973081755499746750276623648407677639812809665472258655462846021403503851719008687214848550916999977775070011121527941755954255781343103086789</span>e <span class="token operator">=</span> <span class="token number">459650454686946706615371845737527916539205656667844780634386049268800615782964920944229084502752167395446158290854047696006034750210758341744841762479191173017773034647739346927390580848998121830029134542880713409306092967282675122699586503684943407535067216738556403169403622104762516293879994387324370835718056251706150557820106296417750402984941838652433642298378976899556042987560946508887315484380807248331504458640857234708123277403252632993828101306072382329879857946191508782246793011691530554606521701055094223574951862129713872918021549814674387049788995785872980320871421550616327471735316980754238323013</span>c <span class="token operator">=</span> <span class="token number">10992248752412909788626396175372747713079469256270100576886987393986576680666320383209810005318254336440105142571546847427454822405793626080251363454531982746373841267986148332456716023293306870382809568309620264499225135226626560298741596462262513921032733814032790312163314776421380481083058518893602887082464123177575742160690315666730642727773288362853901330620841098230284739614618790097180848133698381487679399364400048499041582830157094876815030301231505774900176910650887780842536610942820066913075027528705150102760422836458745949063992228680293226303245265232017738712226154128654682937687199768621565945171</span>d <span class="token operator">=</span> next_prime<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> <span class="token number">0.2919</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#CCTF&#123;RSA_N3w_rEc0rd5_4Nd_nEw_!nSi9h75!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="asiv1">ASIv1</h2><h3 id="题目">题目</h3><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python3 from Crypto.Util.number import *from flag import flag def base(n, l):    D &#x3D; []    while n &gt; 0:        n, r &#x3D; divmod(n, l)        D.append(r)    return &#39;&#39;.join(str(d) for d in reversed(D)) or &#39;0&#39; def asiv_prng(seed):l &#x3D; len(seed)_seed &#x3D; base(bytes_to_long(seed), 3)_seed &#x3D; [int(_) for _ in _seed]_l &#x3D; len(_seed)R &#x3D; [[getRandomRange(0, 3) for _ in range(_l)] for _ in range(_l**2)]S &#x3D; []for r in R:s &#x3D; 0for _ in range(_l):s +&#x3D; (r[_] * _seed[_]) % 3# s +&#x3D; getRandomRange(0, 3)s %&#x3D; 3S.append(s)return R, S seed &#x3D; flag.lstrip(b&#39;CCTF&#123;&#39;).rstrip(b&#39;&#125;&#39;)R, S &#x3D; asiv_prng(seed) f &#x3D; open(&#39;output.txt&#39;, &#39;w&#39;)f.write(f&#39;R &#x3D; &#123;R&#125;\nS &#x3D; &#123;S&#125;&#39;)f.close()<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>S</mi><mo>=</mo><mi>R</mi><mo>∗</mo><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mn>3</mn><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">S=R*flag \ \ (mod \ \ 3)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">3</span><span class="mclose">)</span></span></span></span></span></p><p>矩阵求解sage</p><p><img src="/post/946059d/11.png" alt="image-20230711191532469"></p><p><img src="/post/946059d/11.jpg" alt="IMG20230711202457"></p><h3 id="wp">WP</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sage</span><span class="token builtin">file</span> <span class="token operator">=</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'D:\\浏览器下载\\刷题附件\\output.txt'</span><span class="token punctuation">,</span> <span class="token string">'r'</span><span class="token punctuation">)</span><span class="token comment"># 读取文件内容</span>content <span class="token operator">=</span> <span class="token builtin">file</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token builtin">file</span><span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment"># 提取R的值</span>start1 <span class="token operator">=</span> content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'R = ['</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'R = '</span><span class="token punctuation">)</span><span class="token comment">#print(start1)</span>end1 <span class="token operator">=</span> content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">']]'</span><span class="token punctuation">,</span> start1<span class="token punctuation">)</span>R <span class="token operator">=</span> content<span class="token punctuation">[</span>start1<span class="token punctuation">:</span>end1<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">]</span>R <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>R<span class="token punctuation">)</span>start2 <span class="token operator">=</span> content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">'S = ['</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token string">'S = '</span><span class="token punctuation">)</span><span class="token comment">#print(start2)</span>end2 <span class="token operator">=</span> content<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">']'</span><span class="token punctuation">,</span> start2<span class="token punctuation">)</span>S <span class="token operator">=</span> content<span class="token punctuation">[</span>start2<span class="token punctuation">:</span>end2<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">]</span>S <span class="token operator">=</span> <span class="token builtin">eval</span><span class="token punctuation">(</span>S<span class="token punctuation">)</span><span class="token comment">#print(R)</span><span class="token comment">#print(S)</span><span class="token comment">#将列表R转换为一个在这个有限域上的矩阵MR</span>MR <span class="token operator">=</span> matrix<span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> R<span class="token punctuation">)</span><span class="token comment">#转化为一维矩阵（向量）</span>MS <span class="token operator">=</span> matrix<span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">12100</span><span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">,</span> S<span class="token punctuation">)</span>a <span class="token operator">=</span> MR<span class="token punctuation">.</span>solve_right<span class="token punctuation">(</span>MR<span class="token punctuation">)</span>flag <span class="token operator">=</span> <span class="token string">''</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token builtin">str</span><span class="token punctuation">(</span>a<span class="token punctuation">[</span>i<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">110</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>flag<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'3Xpl0i7eD_bY_AtT4ck3r!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="resuction">Resuction</h2><h3 id="题目">题目</h3><p>Handmade and artificial <a href="https://cr.yp.toc.tf/tasks/resuction_a7e22d83ccb8df8d81d63be16cee4388c1f1ebb8.txz">resuction</a> cryptosystems represent contrasting approaches to encryption: while handmade systems emphasize the meticulous craftsmanship and personalization of cryptographic algorithms, artificial resuction systems rely on machine-generated algorithms that are optimized through computational techniques.</p><pre class="line-numbers language-none"><code class="language-none">#!&#x2F;usr&#x2F;bin&#x2F;env python3from Crypto.Util.number import *from flag import flagfrom decimal import *def keygen(nbit, r):while True:p, q &#x3D; [getPrime(nbit) for _ in &#39;__&#39;]d, n &#x3D; getPrime(64), p * qphi &#x3D; (p - 1) * (q - 1)if GCD(d, phi) &#x3D;&#x3D; 1:e &#x3D; inverse(d, phi)N &#x3D; bin(n)[2:-r]E &#x3D; bin(e)[2:-r]PKEY &#x3D; N + Epkey &#x3D; (n, e)return PKEY, pkeydef encrypt(msg, pkey, r):m &#x3D; bytes_to_long(msg)n, e &#x3D; pkeyc &#x3D; pow(m, e, n)C &#x3D; bin(c)[2:-r]return Cr, nbit &#x3D; 8, 1024PKEY, pkey &#x3D; keygen(nbit, r)print(f&#39;PKEY &#x3D; &#123;int(PKEY, 2)&#125;&#39;)FLAG &#x3D; flag.lstrip(b&#39;CCTF&#123;&#39;).rstrip(b&#39;&#125;&#39;)enc &#x3D; encrypt(FLAG, pkey, r)print(f&#39;enc &#x3D; &#123;int(enc, 2)&#125;&#39;)&#39;&#39;&#39;PKEY &#x3D; 14192646310719975031517528381795548241077678859071194396837281472399230674325587198691913743313024193030641258581477544395982020385534616950314446352119543012689979705497443206671093873748633162188213109347667494028713308821945628880987033909436936504594085029207071182583896573425433818693447573712242776054326253393149643818428222532313129014785625379928796322492111783102063504659053965652092334907431265629283336869752591405010801363428649651892548988084920295512198406822149854508798413366425646089176325412867633899847841343293434518769693835679828109184625256833518392375615524221729773443578746961887429674099018040291053535429314874943299587513900900515776980848746070077651676814430155460898107362207677739452859298842563030631706907437662807884529549746843462830493900480079096937402325307522965877069080418178692616875205678928420840955518031258855869218152431304423803589723140983606576549207164114711076498723237274262054605174412193097533550076687418481230734706280737017543741247718967059747548710091320650704988384742281590019869955579949961574733610565593105027342454880292474482792325237942870408329807427182014062811782475262070063065860763705715879581562335668163076088547827008755841277828137570366416095778enc &#x3D; 93313196155732054514477836642637636744872135106456047659057794344503071105783322399713135615723000054324693644981340568454628360027598469597864407205974007198804288563284521413279406211756674451582156555173212403946908121125010635246043311803494356106191509999360722019559999844621905376368824621365540442906142224342650371557766313381899279520110833822291649001754956653102495882094754863493058001964760438040783400782352466943990226083197340594364084294954324101604417550048379969516185353765224920719355485680872367930581872987972421836853197205534334204586713387469939986387582911728909524428102693874671302382&#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>和suction很像，但这里给出的是d–&gt;64位，而且p,q是1024位</p><p>p,q是1024位，n大概2048位，nh=2040位</p><pre class="line-numbers language-none"><code class="language-none">bitsequence &#x3D; f&#39;&#123;PKEY:b&#125;&#39;N, e &#x3D; bitsequence[:2040], bitsequence[2040:]print(len(N))print(len(e))20402040<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>nh=2040位，eh=2040位</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>e</mi><mo>=</mo><mi>e</mi><mi>h</mi><mo>+</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>8</mn></msup><mo stretchy="false">)</mo><mtext>  </mtext><mi>e</mi><mo>≈</mo><mi>e</mi><mi>h</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><mi>n</mi><mi>h</mi><mo>+</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><msup><mn>2</mn><mn>8</mn></msup><mo stretchy="false">)</mo><mtext>  </mtext><mi>n</mi><mo>≈</mo><mi>n</mi><mi>h</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}e=eh+(0,2^8)\ \ e\approx eh\\ n=nh+(0,2^8)\ \ n\approx nh\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">e</span><span class="mord mathdefault">h</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">h</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">8</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">h</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>由于d很大，维纳攻击，通过n,e的高位求出d</p><p>爆破n,e、</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>m</mi><mo>≡</mo><msup><mi>c</mi><mi>d</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msup><mi>c</mi><mi>d</mi></msup><mo>≡</mo><msup><mi>m</mi><mi>e</mi></msup><mi>d</mi><mo>≡</mo><mi>m</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>通过</mtext><msup><mi>t</mi><mi>e</mi></msup><mi>d</mi><mo>≡</mo><mi>t</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>n</mi><mo stretchy="false">)</mo><mtext>来验证</mtext><mi>n</mi><mo separator="true">,</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">c\equiv m^e(mod n)\\m\equiv c^d(mod n)\\c^d\equiv m^ed\equiv m(mod n)\\通过 t^ed\equiv t(mod n)来验证n,e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.149108em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8991079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8991079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">d</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.7143919999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">通</span><span class="mord cjk_fallback">过</span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">验</span><span class="mord cjk_fallback">证</span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span></span></span></span></span></p><pre class="line-numbers language-none"><code class="language-none">if pow(2, e*d, n) &#x3D;&#x3D; 2:<span aria-hidden="true" class="line-numbers-rows"><span></span></span></code></pre><p>求出n,e,d后，爆破c，通过“CCTF”筛选 m</p><h3 id="wp">wp</h3><pre class="line-numbers language-none"><code class="language-none">from Crypto.Util.number import long_to_bytesfrom rsa.prime import is_primefrom tqdm import tqdmPKEY &#x3D; 14192646310719975031517528381795548241077678859071194396837281472399230674325587198691913743313024193030641258581477544395982020385534616950314446352119543012689979705497443206671093873748633162188213109347667494028713308821945628880987033909436936504594085029207071182583896573425433818693447573712242776054326253393149643818428222532313129014785625379928796322492111783102063504659053965652092334907431265629283336869752591405010801363428649651892548988084920295512198406822149854508798413366425646089176325412867633899847841343293434518769693835679828109184625256833518392375615524221729773443578746961887429674099018040291053535429314874943299587513900900515776980848746070077651676814430155460898107362207677739452859298842563030631706907437662807884529549746843462830493900480079096937402325307522965877069080418178692616875205678928420840955518031258855869218152431304423803589723140983606576549207164114711076498723237274262054605174412193097533550076687418481230734706280737017543741247718967059747548710091320650704988384742281590019869955579949961574733610565593105027342454880292474482792325237942870408329807427182014062811782475262070063065860763705715879581562335668163076088547827008755841277828137570366416095778enc &#x3D; 93313196155732054514477836642637636744872135106456047659057794344503071105783322399713135615723000054324693644981340568454628360027598469597864407205974007198804288563284521413279406211756674451582156555173212403946908121125010635246043311803494356106191509999360722019559999844621905376368824621365540442906142224342650371557766313381899279520110833822291649001754956653102495882094754863493058001964760438040783400782352466943990226083197340594364084294954324101604417550048379969516185353765224920719355485680872367930581872987972421836853197205534334204586713387469939986387582911728909524428102693874671302382c&#x3D;enc&lt;&lt;8bitsequence &#x3D; f&#39;&#123;PKEY:b&#125;&#39;N, e &#x3D; bitsequence[:2040], bitsequence[2040:]print(len(N))print(len(e))N, e &#x3D; map(lambda x: int(x, 2), (N, e))#print(N,e)nh&#x3D;N&lt;&lt;8eh&#x3D;e&lt;&lt;8def continuedFra(x, y):    &quot;&quot;&quot;计算连分数    :param x: 分子    :param y: 分母    :return: 连分数列表    &quot;&quot;&quot;    cf &#x3D; []    #辗转相除法    while y:        cf.append(x &#x2F;&#x2F; y)        x, y &#x3D; y, x % y    return cfdef gradualFra(cf):    &quot;&quot;&quot;计算传入列表最后的渐进分数    :param cf: 连分数列表    :return: 该列表最后的渐近分数    &quot;&quot;&quot;    numerator &#x3D; 0#分子    denominator &#x3D; 1#分母    for x in cf[::-1]:        # 这里的渐进分数分子分母要分开        numerator, denominator &#x3D; denominator, x * denominator + numerator    return numerator, denominatordef getGradualFra(cf):    &quot;&quot;&quot;计算列表所有的渐近分数    :param cf: 连分数列表    :return: 该列表所有的渐近分数    &quot;&quot;&quot;    gf &#x3D; []    for i in range(1, len(cf) + 1):        gf.append(gradualFra(cf[:i]))    return gfcf &#x3D; continuedFra(eh, nh)#获得连分数列表for (d0, k) in getGradualFra(cf):#所有渐进分数    if d0.bit_length() &#x3D;&#x3D; 64 and is_prime(d0):        d&#x3D;d0        breakprint(d)#爆破n,e,for i in tqdm(range(2**8)):    for j in  range(2**8):        for k in range(2**8):            n &#x3D; nh + i            e &#x3D; eh + j            if pow(2, e*d, n) &#x3D;&#x3D; 2:                #print(f&#39;n &#x3D; &#123;n&#125;&#39;)                #print(f&#39;e &#x3D; &#123;e&#125;&#39;)                c&#x3D;c+k                m&#x3D;pow(c,d,n)                m&#x3D;long_to_bytes(m)                if b&#39;CCTF&#123;&#39; in m:                    print(m)#n &#x3D; 28781418259071163834545208786492597316357138268450456443121779857237190669654679502925616925907115061139426651454246296829614929839091896732956124186768298711851015827257060255218333952539548249210858753648965921585289379414151961197198777686222970660319202167442420274437451557166736926361972983650143650097981777542950972139757680517744639660898696901009088978971506526002932830312595664154921938706240176536981793499426543601513874115451315768319593051858239793153849410530285884330866972048864103208648273010126369559341912163849839663249252300813799486995834473605326584986843653735963725697383056972744506296271#e &#x3D; 19152712448778858582528734875468196678366984818842265525346340114296810907435357813959451387293270496095878944786775775749129832803842508074794234774568097809721690831345120778762600713106116293626590641716601095020202233532544196547654794913903350183891867544539554967347396716482565232986995497267273877597593761608770699282404807896050347585632153075234094034163801474316224123620090879021107631960008144066862084573910442635526649884938724881478713853362879412453150893601267748827792136092224063120914443976032390554506925020506643629449426005820918745312311984391868895996772772355715765028825561022860823765675&#39;&#39;&#39;           &#39;&#39;&#39;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="roldy">Roldy</h2><h3 id="题目">题目</h3><p>Roldy,once regarded as a reliable cryptosystem library, has unfortunately emerged as one of the most vulnerable and compromised systems in recent times, leaving users exposed to significant security risks.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> pyope<span class="token punctuation">.</span>ope <span class="token keyword">import</span> OPE <span class="token keyword">as</span> enc<span class="token keyword">from</span> pyope<span class="token punctuation">.</span>ope <span class="token keyword">import</span> ValueRange<span class="token keyword">import</span> sys<span class="token keyword">from</span> secret <span class="token keyword">import</span> key<span class="token punctuation">,</span> flag<span class="token keyword">def</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pr</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> key<span class="token punctuation">,</span> params<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>msg <span class="token operator">+=</span> <span class="token punctuation">(</span><span class="token number">16</span> <span class="token operator">-</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">16</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token string">b'*'</span>p<span class="token punctuation">,</span> k1<span class="token punctuation">,</span> k2 <span class="token operator">=</span> paramsmsg <span class="token operator">=</span> <span class="token punctuation">[</span>msg<span class="token punctuation">[</span>_<span class="token operator">*</span><span class="token number">16</span><span class="token punctuation">:</span>_<span class="token operator">*</span><span class="token number">16</span> <span class="token operator">+</span> <span class="token number">16</span><span class="token punctuation">]</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span>m <span class="token operator">=</span> <span class="token punctuation">[</span>bytes_to_long<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> msg<span class="token punctuation">]</span>inra <span class="token operator">=</span> ValueRange<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token number">128</span><span class="token punctuation">)</span>oura <span class="token operator">=</span> ValueRange<span class="token punctuation">(</span>k1 <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">,</span> k2 <span class="token operator">*</span> p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>_enc <span class="token operator">=</span> enc<span class="token punctuation">(</span>key<span class="token punctuation">,</span> in_range <span class="token operator">=</span> inra<span class="token punctuation">,</span> out_range <span class="token operator">=</span> oura<span class="token punctuation">)</span>C <span class="token operator">=</span> <span class="token punctuation">[</span>_enc<span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>_<span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> m<span class="token punctuation">]</span><span class="token keyword">return</span> C<span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>border <span class="token operator">=</span> <span class="token string">"|"</span>pr<span class="token punctuation">(</span>border<span class="token operator">*</span><span class="token number">72</span><span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">" Welcome to Roldy combat, we implemented an encryption method to    "</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">" protect our secret. Please note that there is a flaw in our method "</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">" Can you examine it and get the flag?                               "</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token operator">*</span><span class="token number">72</span><span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">'Generating parameters, please wait...'</span><span class="token punctuation">)</span>p<span class="token punctuation">,</span> k1<span class="token punctuation">,</span> k2 <span class="token operator">=</span> <span class="token punctuation">[</span>getPrime<span class="token punctuation">(</span><span class="token number">129</span><span class="token punctuation">)</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">[</span>getPrime<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token string">'__'</span><span class="token punctuation">]</span>C <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span><span class="token string">"| Options: \n|\t[E]ncrypted flag! \n|\t[T]ry encryption \n|\t[Q]uit"</span><span class="token punctuation">)</span>ans <span class="token operator">=</span> sc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>lower<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">if</span> ans <span class="token operator">==</span> <span class="token string">'e'</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'encrypt(flag, key, params) = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>C<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">elif</span> ans <span class="token operator">==</span> <span class="token string">'t'</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">'Please send your message to encrypt: '</span><span class="token punctuation">)</span>msg <span class="token operator">=</span> sc<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>rstrip<span class="token punctuation">(</span><span class="token string">b'\n'</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>msg<span class="token punctuation">)</span> <span class="token operator">></span> <span class="token number">64</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">'Your message is too long! Sorry!!'</span><span class="token punctuation">)</span>C <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>msg<span class="token punctuation">,</span> key<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> k1<span class="token punctuation">,</span> k2<span class="token punctuation">)</span><span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f'C = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>C<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">elif</span> ans <span class="token operator">==</span> <span class="token string">'q'</span><span class="token punctuation">:</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Quitting ..."</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Bye ..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>加密基于ECB模式的分组加密，pyope包中的OPE加密算法。</p><p>不会</p><h3 id="wp">wp</h3><p>[<a href="https://zhuanlan.zhihu.com/p/643051459">CryptoCTF] CryptoCTF 2023 medium分类 团队解题writeup 之二 - 知乎 (zhihu.com)</a></p><h2 id="tpsd">TPSD</h2><h3 id="题目">题目</h3><p>Solving Diophantine equations is a notoriously challenging problem in number theory, and finding non-trivial integer solutions for certain equations is considered a major open problem in mathematics.</p><p><img src="/post/946059d/12.png" alt="image-20230711215203859"></p><h3 id="题解">题解</h3><p><a href="https://www.zhihu.com/question/465039849">(15 封私信 / 80 条消息) 该怎么解决下面这个不定方程？ - 知乎 (zhihu.com)</a></p><p>解决</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>p</mi><mo>∗</mo><mo>∗</mo><mn>3</mn><mo>+</mo><mi>q</mi><mo>∗</mo><mo>∗</mo><mn>3</mn><mo>+</mo><mi>r</mi><mo>∗</mo><mo>∗</mo><mn>3</mn><mo>=</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">p**3+q**3+r**3=1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">∗</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">∗</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">∗</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>其中p,q,r中至少有一个素数，且最小值是9-29bit</p><p><img src="/post/946059d/16.png" alt="image-20230711220643841"></p><p><img src="/post/946059d/image-20230711221134532.png" alt="image-20230711221134532"></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>令</mtext><mi>b</mi><mo>=</mo><mn>2</mn><mo>∗</mo><mi>a</mi><mtext>，  此时</mtext><mi>w</mi><mo>=</mo><mi>c</mi><mo>∗</mo><mn>4</mn><mspace linebreak="newline"></mspace><mtext>只要遍历</mtext><mi>c</mi><mtext>即可</mtext></mrow><annotation encoding="application/x-tex">令b=2*a，\ \ 此时w=c*4\\只要遍历c即可</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">令</span><span class="mord mathdefault">b</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">，</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">时</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">4</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">遍</span><span class="mord cjk_fallback">历</span><span class="mord mathdefault">c</span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">可</span></span></span></span></span></p><p>找到某个比特范围内的解（x,y,x)，只需要对a进行合理取值，即  a = random.getrandbits(nn)</p><p>nn=bits//3  (因为d = c * (a ** 3 + (a - b) ** 3 + c ** 3))</p><h3 id="wp">wp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> random<span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>nn<span class="token punctuation">,</span>l<span class="token punctuation">,</span>h<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        a <span class="token operator">=</span> random<span class="token punctuation">.</span>getrandbits<span class="token punctuation">(</span>nn<span class="token punctuation">)</span>        <span class="token comment"># 假定a和b的关系</span>        <span class="token comment"># w为1</span>        b <span class="token operator">=</span> <span class="token number">2</span> <span class="token operator">*</span> a        <span class="token keyword">for</span> c <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">4</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            d <span class="token operator">=</span> c <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> c <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> a <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">-</span> b <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> c <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> d <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>                    <span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> a <span class="token operator">*</span> b <span class="token operator">+</span> b <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> d <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> <span class="token punctuation">(</span>                    <span class="token punctuation">(</span>a <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> a <span class="token operator">*</span> b <span class="token operator">+</span> b <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">%</span> d <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>                temp_x <span class="token operator">=</span> c <span class="token operator">*</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> a <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">-</span> b <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> c <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">//</span> d                temp_y <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token operator">-</span><span class="token number">1</span> <span class="token operator">*</span> <span class="token punctuation">(</span>a <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> a <span class="token operator">*</span> b <span class="token operator">+</span> b <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span>a <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">//</span> d                temp_z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>a <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> a <span class="token operator">*</span> b <span class="token operator">+</span> b <span class="token operator">**</span> <span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> <span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> a <span class="token operator">-</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> c <span class="token operator">**</span> <span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">//</span> d                <span class="token keyword">assert</span> temp_x <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> temp_y <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">+</span> temp_z <span class="token operator">**</span> <span class="token number">3</span> <span class="token operator">==</span> <span class="token number">1</span>                x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>temp_x<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>temp_y<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>temp_z<span class="token punctuation">)</span><span class="token punctuation">)</span>                <span class="token keyword">if</span> <span class="token punctuation">(</span>isPrime<span class="token punctuation">(</span>x<span class="token punctuation">)</span> <span class="token keyword">or</span> isPrime<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token keyword">or</span> isPrime<span class="token punctuation">(</span>z<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">and</span> <span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">>=</span> l <span class="token keyword">and</span> <span class="token builtin">min</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">&lt;=</span> h<span class="token punctuation">:</span>                    <span class="token keyword">return</span> <span class="token punctuation">(</span>temp_x<span class="token punctuation">,</span> temp_y<span class="token punctuation">,</span> temp_z<span class="token punctuation">)</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'05.cr.yp.toc.tf'</span><span class="token punctuation">,</span><span class="token number">11137</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>io<span class="token punctuation">.</span>recvuntil<span class="token punctuation">(</span><span class="token string">b'value has     +\n'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>re<span class="token operator">=</span>io<span class="token punctuation">.</span>recvline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>re<span class="token punctuation">)</span>p1 <span class="token operator">=</span> re<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'('</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> re<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b','</span><span class="token punctuation">)</span>p3 <span class="token operator">=</span> re<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b')'</span><span class="token punctuation">)</span>l <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">[</span>p1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>h <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>re<span class="token punctuation">[</span>p2<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">:</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>h<span class="token punctuation">)</span>nn <span class="token operator">=</span> l <span class="token operator">//</span> <span class="token number">3</span>ans <span class="token operator">=</span> attack<span class="token punctuation">(</span>nn<span class="token punctuation">,</span> l<span class="token punctuation">,</span> h<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#io.interactive()</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">==</span> <span class="token number">18</span><span class="token punctuation">:</span>        io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>    rev <span class="token operator">=</span> io<span class="token punctuation">.</span>recvlines<span class="token punctuation">(</span><span class="token number">3</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span>    <span class="token comment">#找到最低bits -- l,和最高bits--h</span>    p1 <span class="token operator">=</span> rev<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'('</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> rev<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b','</span><span class="token punctuation">)</span>    p3 <span class="token operator">=</span> rev<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b')'</span><span class="token punctuation">)</span>    l <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rev<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p1<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">:</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>    h <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>rev<span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">[</span>p2<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">:</span>p3<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">,</span>h<span class="token punctuation">)</span>    nn <span class="token operator">=</span> l<span class="token operator">//</span><span class="token number">3</span>    ans <span class="token operator">=</span> attack<span class="token punctuation">(</span>nn<span class="token punctuation">,</span>l<span class="token punctuation">,</span>h<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token comment">#CCTF&#123;pr1m3S_in_7ErnArY_Cu8!c_3qu4tI0nS!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="trex">Trex</h2><h3 id="题目">题目</h3><p>The study of Diophantine equations over <a href="https://cr.yp.toc.tf/tasks/trex_3267dcf8eb83e80b637d7a612e9e2394d7fb5dfb.txz">trex</a> can be significantly more challenging than over the real numbers.</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env python3</span><span class="token keyword">import</span> random<span class="token keyword">import</span> sys<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">die</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span>quit<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">pr</span><span class="token punctuation">(</span><span class="token operator">*</span>args<span class="token punctuation">)</span><span class="token punctuation">:</span>s <span class="token operator">=</span> <span class="token string">" "</span><span class="token punctuation">.</span>join<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">,</span> args<span class="token punctuation">)</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>write<span class="token punctuation">(</span>s <span class="token operator">+</span> <span class="token string">"\n"</span><span class="token punctuation">)</span>sys<span class="token punctuation">.</span>stdout<span class="token punctuation">.</span>flush<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">sc</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> sys<span class="token punctuation">.</span>stdin<span class="token punctuation">.</span><span class="token builtin">buffer</span><span class="token punctuation">.</span>readline<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">check_inputs</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> <span class="token keyword">not</span> <span class="token builtin">all</span><span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">,</span> c<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> b <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">or</span> c <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">if</span> a <span class="token operator">==</span> b <span class="token keyword">or</span> b <span class="token operator">==</span> c <span class="token keyword">or</span> a <span class="token operator">==</span> c<span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token boolean">False</span><span class="token keyword">return</span> <span class="token boolean">True</span><span class="token keyword">def</span> <span class="token function">check_solution</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token operator">*</span>x <span class="token operator">+</span> y<span class="token operator">*</span>y <span class="token operator">-</span> x<span class="token operator">*</span>y <span class="token operator">-</span> a<span class="token operator">*</span><span class="token punctuation">(</span>z<span class="token operator">**</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token keyword">def</span> <span class="token function">main</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>border <span class="token operator">=</span> <span class="token string">"|"</span>pr<span class="token punctuation">(</span>border<span class="token operator">*</span><span class="token number">72</span><span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">".::   Hi all, she DID it, you should do it too! Are you ready? ::.  "</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Welcome to the Ternary World! You need to pass each level until 20  "</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"to get the flag. Pay attention that your solutions should be nonzero"</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"distinct integers. Let's start!                                     "</span><span class="token punctuation">,</span> border<span class="token punctuation">)</span>pr<span class="token punctuation">(</span>border<span class="token operator">*</span><span class="token number">72</span><span class="token punctuation">)</span>level<span class="token punctuation">,</span> step <span class="token operator">=</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">19</span><span class="token keyword">while</span> level <span class="token operator">&lt;=</span> step<span class="token punctuation">:</span>a <span class="token operator">=</span> random<span class="token punctuation">.</span>randint<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>level <span class="token operator">*</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span>level<span class="token operator">*</span><span class="token number">12</span> <span class="token operator">+</span> <span class="token number">12</span><span class="token punctuation">)</span><span class="token punctuation">)</span>equation <span class="token operator">=</span> <span class="token string-interpolation"><span class="token string">f'x^2 + y^2 - xy = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>a<span class="token punctuation">&#125;</span></span><span class="token string">*z^3'</span></span>pr<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"Level </span><span class="token interpolation"><span class="token punctuation">&#123;</span>level <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">&#125;</span></span><span class="token string">: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>equation<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>inputs <span class="token operator">=</span> <span class="token builtin">input</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>strip<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>split<span class="token punctuation">(</span><span class="token string">","</span><span class="token punctuation">)</span><span class="token keyword">try</span><span class="token punctuation">:</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z <span class="token operator">=</span> <span class="token builtin">map</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> inputs<span class="token punctuation">)</span><span class="token keyword">except</span><span class="token punctuation">:</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Invalid input, Bye!!"</span><span class="token punctuation">)</span><span class="token keyword">if</span> check_inputs<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token keyword">if</span> check_solution<span class="token punctuation">(</span>a<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> z<span class="token punctuation">)</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Correct! Try the next level :)"</span><span class="token punctuation">)</span>level <span class="token operator">+=</span> <span class="token number">1</span><span class="token keyword">else</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"You didn't provide the correct solution."</span><span class="token punctuation">)</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Better luck next time!"</span><span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Your solutions should be non-zero distinct integers"</span><span class="token punctuation">)</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Quiting..."</span><span class="token punctuation">)</span><span class="token keyword">if</span> level <span class="token operator">==</span> step<span class="token punctuation">:</span>pr<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string">"Congratulations! You've successfully solved all the equations!"</span><span class="token punctuation">)</span>die<span class="token punctuation">(</span>border<span class="token punctuation">,</span> <span class="token string-interpolation"><span class="token string">f"flag: </span><span class="token interpolation"><span class="token punctuation">&#123;</span>flag<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">if</span> __name__ <span class="token operator">==</span> <span class="token string">'__main__'</span><span class="token punctuation">:</span>main<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><p>尝试19轮，解下述等式</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup><mo>+</mo><msup><mi>y</mi><mn>2</mn></msup><mo>−</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo>=</mo><mi>a</mi><mo>∗</mo><msup><mi>z</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">x^2+y^2-x*y=a*z^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p><p>令</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mi>m</mi><mo>∗</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mi>n</mi><mo>∗</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mi>l</mi><mo>∗</mo><mi>a</mi></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><mtext>     代入可得   </mtext><msup><mi>m</mi><mn>2</mn></msup><mo>+</mo><msup><mi>n</mi><mn>2</mn></msup><mo>−</mo><mi>m</mi><mo>∗</mo><mi>n</mi><mo>=</mo><msup><mi>l</mi><mn>3</mn></msup></mrow><annotation encoding="application/x-tex">\begin{cases}x=m*a^2\\ y=n*a^2\\z=l*a\end{cases}\\\ \ \  \ \ 代入可得 \ \ \ m^2+n^2-m*n=l^3</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">得</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span></span></span></span></span></p><p>消去a，找到一组解</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><mn>6</mn></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>l</mi><mo>=</mo><mn>3</mn></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><mtext>  代入可得解</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>x</mi><mo>=</mo><mn>3</mn><mo>∗</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>y</mi><mo>=</mo><mn>6</mn><mo>∗</mo><msup><mi>a</mi><mn>2</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>z</mi><mo>=</mo><mn>3</mn><mo>∗</mo><mi>a</mi></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\begin{cases}m=3\\ n=6\\l=3\end{cases}\\ \ \ 代入可得解 \begin{cases}x=3*a^2\\ y=6*a^2\\z=3*a\end{cases}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:4.32em;vertical-align:-1.9099999999999997em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord cjk_fallback">代</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">解</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.35002em;"><span style="top:-2.19999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-2.19499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.20499em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.15001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.2950099999999996em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.30501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.60002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.8500199999999998em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:2.41em;"><span style="top:-4.41em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-2.97em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">6</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span></span></span><span style="top:-1.5300000000000002em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.04398em;">z</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.9099999999999997em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><h3 id="wp">wp</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">attack</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span>a<span class="token operator">**</span><span class="token number">2</span>    y<span class="token operator">=</span><span class="token number">6</span><span class="token operator">*</span>a<span class="token operator">**</span><span class="token number">2</span>    z<span class="token operator">=</span><span class="token number">3</span><span class="token operator">*</span>a    <span class="token keyword">return</span> <span class="token punctuation">(</span>x<span class="token punctuation">,</span>y<span class="token punctuation">,</span>z<span class="token punctuation">)</span>io <span class="token operator">=</span> remote<span class="token punctuation">(</span><span class="token string">'03.cr.yp.toc.tf'</span><span class="token punctuation">,</span><span class="token number">31317</span><span class="token punctuation">)</span>banner <span class="token operator">=</span> io<span class="token punctuation">.</span>recvlines<span class="token punctuation">(</span><span class="token number">6</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>banner<span class="token punctuation">)</span>l1 <span class="token operator">=</span> banner<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>l1<span class="token punctuation">)</span><span class="token comment">#读取a值</span>p1 <span class="token operator">=</span> l1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'= '</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> l1<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'*'</span><span class="token punctuation">)</span>a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>l1<span class="token punctuation">[</span>p1<span class="token operator">+</span><span class="token number">2</span><span class="token punctuation">:</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>a<span class="token punctuation">)</span>ans1 <span class="token operator">=</span> attack<span class="token punctuation">(</span>a<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>ans1<span class="token punctuation">)</span>io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ans1<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">18</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'第</span><span class="token interpolation"><span class="token punctuation">&#123;</span>i<span class="token punctuation">&#125;</span></span><span class="token string">次'</span></span><span class="token punctuation">)</span>    rev <span class="token operator">=</span> io<span class="token punctuation">.</span>recvlines<span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>rev<span class="token punctuation">)</span>    l <span class="token operator">=</span> rev<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span>    p1 <span class="token operator">=</span> l<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'= '</span><span class="token punctuation">)</span>    p2 <span class="token operator">=</span> l<span class="token punctuation">.</span>find<span class="token punctuation">(</span><span class="token string">b'*'</span><span class="token punctuation">)</span>    a <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>l<span class="token punctuation">[</span>p1 <span class="token operator">+</span> <span class="token number">2</span><span class="token punctuation">:</span>p2<span class="token punctuation">]</span><span class="token punctuation">)</span>    <span class="token comment">#print(a)</span>    ans <span class="token operator">=</span> attack<span class="token punctuation">(</span>a<span class="token punctuation">)</span>    <span class="token comment">#print(ans)</span>    io<span class="token punctuation">.</span>sendline<span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>ans<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>interactive<span class="token punctuation">(</span><span class="token punctuation">)</span>io<span class="token punctuation">.</span>close<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#CCTF&#123;T3rn3ry_Tr3x_3Qu4t!0n&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="keymoted">Keymoted</h2><h3 id="题目">题目</h3><p>Combining RSA and ECC in a cryptographic system does not necessarily guarantee security equivalent to that of the individual RSA or ECC systems. What about keymoted</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#!/usr/bin/env sage</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">gen_koymoted</span><span class="token punctuation">(</span>nbit<span class="token punctuation">)</span><span class="token punctuation">:</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>a<span class="token punctuation">,</span> b <span class="token operator">=</span> <span class="token punctuation">[</span>randint<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token keyword">for</span> _ <span class="token keyword">in</span> <span class="token string">'__'</span><span class="token punctuation">]</span>Ep <span class="token operator">=</span> EllipticCurve<span class="token punctuation">(</span>GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>tp <span class="token operator">=</span> p <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> Ep<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token punctuation">)</span>_s <span class="token operator">=</span> p <span class="token operator">^</span><span class="token operator">^</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>nbit <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token punctuation">(</span>nbit <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q <span class="token operator">=</span> next_prime<span class="token punctuation">(</span><span class="token number">2</span> <span class="token operator">*</span> _s <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span>Eq <span class="token operator">=</span> EllipticCurve<span class="token punctuation">(</span>GF<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qtq <span class="token operator">=</span> q <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">-</span> Eq<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">65537</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span><span class="token keyword">if</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> tp<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q<span class="token operator">**</span><span class="token number">2</span> <span class="token operator">-</span> tq<span class="token operator">**</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>e <span class="token operator">=</span> next_prime<span class="token punctuation">(</span>e<span class="token punctuation">)</span>pkey<span class="token punctuation">,</span> skey <span class="token operator">=</span> <span class="token punctuation">(</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span><span class="token keyword">return</span> pkey<span class="token punctuation">,</span> skey<span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> skey<span class="token punctuation">)</span><span class="token punctuation">:</span>n<span class="token punctuation">,</span> e<span class="token punctuation">,</span> a<span class="token punctuation">,</span> b <span class="token operator">=</span> pkeyp<span class="token punctuation">,</span> q <span class="token operator">=</span> skeym <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>msg<span class="token punctuation">)</span><span class="token keyword">assert</span> m <span class="token operator">&lt;</span> n<span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>xp <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> a<span class="token operator">*</span>m <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> pxq <span class="token operator">=</span> <span class="token punctuation">(</span>m<span class="token operator">**</span><span class="token number">3</span> <span class="token operator">+</span> a<span class="token operator">*</span>m <span class="token operator">+</span> b<span class="token punctuation">)</span> <span class="token operator">%</span> q<span class="token keyword">if</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>xp<span class="token punctuation">,</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>xq<span class="token punctuation">,</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token keyword">else</span><span class="token punctuation">:</span>m <span class="token operator">+=</span> <span class="token number">1</span>eq1<span class="token punctuation">,</span> eq2 <span class="token operator">=</span> Mod<span class="token punctuation">(</span>xp<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">,</span> Mod<span class="token punctuation">(</span>xq<span class="token punctuation">,</span> q<span class="token punctuation">)</span>rp<span class="token punctuation">,</span> rq <span class="token operator">=</span> sqrt<span class="token punctuation">(</span>eq1<span class="token punctuation">)</span><span class="token punctuation">,</span> sqrt<span class="token punctuation">(</span>eq2<span class="token punctuation">)</span>_<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y <span class="token operator">=</span> xgcd<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span>Z <span class="token operator">=</span> Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span>x <span class="token operator">=</span> <span class="token punctuation">(</span>Z<span class="token punctuation">(</span>rp<span class="token punctuation">)</span> <span class="token operator">*</span> Z<span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token operator">*</span> Z<span class="token punctuation">(</span>y<span class="token punctuation">)</span> <span class="token operator">+</span> Z<span class="token punctuation">(</span>rq<span class="token punctuation">)</span> <span class="token operator">*</span> Z<span class="token punctuation">(</span>p<span class="token punctuation">)</span> <span class="token operator">*</span> Z<span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> nE <span class="token operator">=</span> EllipticCurve<span class="token punctuation">(</span>Z<span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>P <span class="token operator">=</span> E<span class="token punctuation">(</span>m<span class="token punctuation">,</span> x<span class="token punctuation">)</span>enc <span class="token operator">=</span> e <span class="token operator">*</span> P<span class="token keyword">return</span> encnbit <span class="token operator">=</span> <span class="token number">256</span>pkey<span class="token punctuation">,</span> skey <span class="token operator">=</span> gen_koymoted<span class="token punctuation">(</span>nbit<span class="token punctuation">)</span>enc <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">,</span> pkey<span class="token punctuation">,</span> skey<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'pkey = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>pkey<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'enc = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>enc<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment">#pkey = (6660938713055850877314255610895820875305739186102790477966786501810416821294442374977193379731704125177528590285016474818841859956990486067573436301232301, 65537, 5539256645640498184116966196249666621079506508209770360679460869295427007578, 20151017657582479433586370393795140515103572865771721775868586710594524816458)</span><span class="token comment">#enc = (6641320679869421443758875467781930795132746694454926965779628505713445486895274490835545942727970688359873955019634877304270220728625521646208912044469433 : 2856872654927815636828860866843721158889474116106462420201092148493803550131351543372740950198853438539317164093538508795630146854596724019329887894933972 : 1)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="题解">题解</h3><h3 id="wp">wp</h3>]]></content>
      
      
      
        <tags>
            
            <tag> 复现  Cryptoctf2023 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>ECC</title>
      <link href="/post/bd919ad5.html"/>
      <url>/post/bd919ad5.html</url>
      
        <content type="html"><![CDATA[<h1>ECC</h1><p><a href="https://lazzzaro.github.io/2020/11/07/crypto-ECC/">ECC | Lazzaro (lazzzaro.github.io)</a></p><p><a href="https://www.bilibili.com/video/BV1CG4y1A7kD/?spm_id_from=333.999.0.0&amp;vd_source=1af4c673833ec324b5abfaa47eb3bb26">椭圆曲线加密算法最通俗的解释 不需要数学基础（2）ECC加密算法_哔哩哔哩_bilibili</a></p><h1>基本概念</h1><p>椭圆曲线不是椭圆而是椭圆积分方程</p><p>一条椭圆曲线是在射影平面上满足威尔斯特拉斯方程（Weierstrass）所有点的集合</p><ul><li><p>椭圆曲线的定义式：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mn>2</mn><mo>+</mo><mi>a</mi><mi>x</mi><mi>y</mi><mo>+</mo><mi>b</mi><mi>y</mi><mo>=</mo><mi>x</mi><mn>3</mn><mo>+</mo><mi>c</mi><mi>x</mi><mn>2</mn><mo>+</mo><mi>d</mi><mi>x</mi><mo>+</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">y2+axy+by=x3+cx2+dx+e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">b</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">c</span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span></span></p><p>一般方程：</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mn>2</mn><mo>+</mo><mi>a</mi><mn>1</mn><mi>x</mi><mi>y</mi><mo>+</mo><mi>a</mi><mn>3</mn><mi>y</mi><mo>=</mo><mi>x</mi><mn>3</mn><mo>+</mo><mi>a</mi><mn>2</mn><mi>x</mi><mn>2</mn><mo>+</mo><mi>a</mi><mn>4</mn><mi>x</mi><mo>+</mo><mi>a</mi><mn>6</mn></mrow><annotation encoding="application/x-tex">y2+a1xy+a3y=x3+a2x2+a4x+a6</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord">1</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">a</span><span class="mord">3</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mord">3</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord">2</span><span class="mord mathdefault">x</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord">4</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord">6</span></span></span></span></span></p></li><li><p>1椭圆曲线方程是一个齐次方程</p></li><li><p>椭圆曲线都是关于X轴对称的曲线。</p></li><li><p>2曲线上的每个点都必须是非奇异的（光滑的），偏导数FX(X,Y,Z)、FY(X,Y,Z)、FZ(X,Y,Z)不同为0</p></li><li><p>3圆曲线的形状，并不是椭圆的。只是因为椭圆曲线的描述方程，类似于计算一个椭圆周长的方程故得名</p></li><li><h5 id="椭圆曲线表达式">椭圆曲线表达式</h5><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mo>∈</mo><mi>R</mi><mn>2</mn><mo>∣</mo><mi>y</mi><mn>2</mn><mo>=</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo separator="true">,</mo><mn>4</mn><msup><mi>a</mi><mn>3</mn></msup><mo>+</mo><mn>27</mn><msup><mi>b</mi><mn>2</mn></msup><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><mo>∪</mo><mi>O</mi></mrow><annotation encoding="application/x-tex">{(x,y)∈R2∣y2=x^3+ax+b,4a^3+27b^2≠0}∪{O}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∣</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">b</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">4</span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">2</span><span class="mord">7</span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∪</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.02778em;">O</span></span></span></span></span></span></p></li></ul><h2 id="加法运算规则">加法运算规则</h2><p>P,Q,R如果在一条直线上，并且在椭圆曲线上，那么P+Q+R=0(椭圆曲线阿尔贝群)</p><p>为了避免p点没有切线，因此要满足</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>判别式：</mtext><mn>4</mn><mo>∗</mo><msup><mi>a</mi><mn>3</mn></msup><mo>+</mo><mn>37</mn><mo>∗</mo><msup><mi>b</mi><mn>2</mn></msup><mo mathvariant="normal">≠</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">判别式：4*a^3+37*b^2\ne 0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">判</span><span class="mord cjk_fallback">别</span><span class="mord cjk_fallback">式</span><span class="mord cjk_fallback">：</span><span class="mord">4</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">7</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">b</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel"><span class="mrel"><span class="mord"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:0.69444em;"><span style="top:-3em;"><span class="pstrut" style="height:3em;"></span><span class="rlap"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="inner"><span class="mrel"></span></span><span class="fix"></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.19444em;"><span></span></span></span></span></span></span><span class="mrel">=</span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>加法运算法则</mtext><mspace linebreak="newline"></mspace><mn>0</mn><mo>⊕</mo><mn>0</mn><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mi>P</mi><mo>⊕</mo><mn>0</mn><mo>=</mo><mn>0</mn><mo>⊕</mo><mi>P</mi><mo>=</mo><mi>P</mi><mspace linebreak="newline"></mspace><mi>P</mi><mo>⊕</mo><mo stretchy="false">(</mo><mo>−</mo><mi>P</mi><mo stretchy="false">)</mo><mo>=</mo><mn>0</mn><mspace linebreak="newline"></mspace><mi>P</mi><mtext>为</mtext><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mi>y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>−</mo><mi>P</mi><mtext>为</mtext><mo stretchy="false">(</mo><mi>x</mi><mo separator="true">,</mo><mo>−</mo><mi>y</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>两点关于</mtext><mi>x</mi><mtext>轴对称</mtext><mspace linebreak="newline"></mspace><mo>⊕</mo><mtext>满足交换律，结合律</mtext></mrow><annotation encoding="application/x-tex">加法运算法则\\0\oplus0=0\\P\oplus0=0\oplus P=P\\P\oplus(-P)=0\\P为(x,y)\\-P为(x,-y)\\两点关于x轴对称\\ \oplus满足交换律，结合律</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">运</span><span class="mord cjk_fallback">算</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">则</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord cjk_fallback">为</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mord cjk_fallback">为</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">点</span><span class="mord cjk_fallback">关</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">轴</span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">称</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mbin">⊕</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span><span class="mord cjk_fallback">交</span><span class="mord cjk_fallback">换</span><span class="mord cjk_fallback">律</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">结</span><span class="mord cjk_fallback">合</span><span class="mord cjk_fallback">律</span></span></span></span></span></p><p><img src="/post/bd919ad5/2194014-20201210220326654-238397324-1688381956122-5.png" alt></p><p><img src="/post/bd919ad5/image-20230703084645735-1688345210567-3-1688381956122-6.png" alt="image-20230703084645735-1688345210567-3"></p><h2 id="代数加法">代数加法</h2><h2 id="几何加法">几何加法</h2><p>加法</p><p>A+B</p><p><img src="/post/bd919ad5/image-20230703085807568-1688382045850-12.png" alt></p><p>二倍运算</p><p>2A</p><p><img src="/post/bd919ad5/image-20230703090933618-1688346578119-5.png" alt="image-20230703090933618-1688346578119-5"></p><p>普通相交三点：P+Q+R=0</p><p>普通相交两点：P+P+Q=0，P+Q+Q=0 （一点相切）</p><p>垂直相交两点：P+Q+0=0 （垂直X轴）</p><p>垂直相交一点：P+P+0=0 （垂直X轴+一点相切）</p><h2 id="离散化">离散化</h2><p>椭圆曲线密码体制使用的是有限域上的椭圆曲线，即变量和代数为有限域中的元素。有限域GF（p）上的椭圆曲线是指满足方程</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>y</mi><mn>2</mn></msup><mo>≡</mo><msup><mi>x</mi><mn>3</mn></msup><mo>+</mo><mi>a</mi><mi>x</mi><mo>+</mo><mi>b</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y^2\equiv x^3+ax+b(mod p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p><p>的所有点再加上一个无穷远点O构成的集合，其中a，b,x,y均在有限域上取值，p是素数。记为Ep(a,b)</p><p>椭圆曲线上的阶：椭圆曲线中元素的个数，表示|Ep(a,b)|</p><p>椭圆曲线上元素的阶：   记为ord§，令nP=O（无穷远点）的最小整数。</p><p>生成元： ord(G)=|Ep(a,b)|,则称G为Ep(a,b)的生成元,</p><h2 id="椭圆曲线上的离散对数问题">椭圆曲线上的离散对数问题</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>如果已知</mtext><mi>Y</mi><mo separator="true">,</mo><mi>G</mi><mo separator="true">,</mo><mtext>求满足</mtext><mi>Y</mi><mo>=</mo><mi>k</mi><mi>G</mi><mtext>的</mtext><mi>k</mi><mo separator="true">,</mo><mn>0</mn><mo>≤</mo><mi>k</mi><mo>≤</mo><mi>o</mi><mi>r</mi><mi>d</mi><mo stretchy="false">(</mo><mi>G</mi><mo stretchy="false">)</mo><mo separator="true">,</mo><mspace linebreak="newline"></mspace><mtext>其中</mtext><mi>G</mi><mtext>是有限域</mtext><mi>Z</mi><mi>p</mi><mtext>上</mtext><mi>E</mi><mi>p</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>b</mi><mo stretchy="false">)</mo><mtext>的生成元</mtext><mo separator="true">,</mo><mspace linebreak="newline"></mspace><mi>Y</mi><mtext>是有限域</mtext><mi>Z</mi><mi>p</mi><mtext>上的椭圆曲线上的一点</mtext></mrow><annotation encoding="application/x-tex">如果已知Y,G,求满足Y=kG的k,0\le k \le ord(G),\\其中G是有限域Zp上Ep(a,b)的生成元,\\Y是有限域Zp上的椭圆曲线上的一点</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">如</span><span class="mord cjk_fallback">果</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">G</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">G</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord">0</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.83041em;vertical-align:-0.13597em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≤</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">G</span><span class="mclose">)</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">其</span><span class="mord cjk_fallback">中</span><span class="mord mathdefault">G</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">域</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault">p</span><span class="mord cjk_fallback">上</span><span class="mord mathdefault" style="margin-right:0.05764em;">E</span><span class="mord mathdefault">p</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">b</span><span class="mclose">)</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">生</span><span class="mord cjk_fallback">成</span><span class="mord cjk_fallback">元</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.22222em;">Y</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">限</span><span class="mord cjk_fallback">域</span><span class="mord mathdefault" style="margin-right:0.07153em;">Z</span><span class="mord mathdefault">p</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">椭</span><span class="mord cjk_fallback">圆</span><span class="mord cjk_fallback">曲</span><span class="mord cjk_fallback">线</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">一</span><span class="mord cjk_fallback">点</span></span></span></span></span></p><h1>ECC算法</h1><p>参数选取：选定一条椭圆曲线 Ep(a,b)，并取椭圆曲线上一点作为基点 G；(G是Ep(a,b)的生成元)</p><p>产生公钥和私钥：选择一个私有密钥 Sk (k&lt;n)，并生成公开密钥 Pk=SkG；</p><p>加密：将明文编码到 Ep(a,b)上的一点 M，并产生一个随机整数 r（0&lt;r&lt;n，n为 G 的阶数）；C1=(C1,C2),C1=M+rPk和 C2=rG</p><p>解密：</p><p>M=C2-SkC1</p><p>C2-SkC1=M+rPk-SkrG=M+rSkG-SkrG=M</p><h2 id="常见攻击">常见攻击</h2><h3 id="smart-s-attack">Smart’s attack</h3><p>适用于：E.order()=p</p><p>即一个椭圆曲线的阶等于 p，意味着曲线上的点的数量与有限域的元素数量相同</p><p>p=h*n的椭圆曲线</p><p>脚本：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">p <span class="token operator">=</span> A <span class="token operator">=</span> B <span class="token operator">=</span> E <span class="token operator">=</span> EllipticCurve<span class="token punctuation">(</span>GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span>A<span class="token punctuation">,</span>B<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">##确定椭圆曲线</span><span class="token comment">#给出两点P,Q</span>P <span class="token operator">=</span> E<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span>Q <span class="token operator">=</span> E<span class="token punctuation">(</span><span class="token punctuation">,</span><span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">SmartAttack</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span>Q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#寻找k</span>    E <span class="token operator">=</span> P<span class="token punctuation">.</span>curve<span class="token punctuation">(</span><span class="token punctuation">)</span>    <span class="token comment">#构造扰动后的椭圆曲线</span>    Eqp <span class="token operator">=</span> EllipticCurve<span class="token punctuation">(</span>Qp<span class="token punctuation">(</span>p<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span> ZZ<span class="token punctuation">(</span>t<span class="token punctuation">)</span> <span class="token operator">+</span> randint<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token operator">*</span>p <span class="token keyword">for</span> t <span class="token keyword">in</span> E<span class="token punctuation">.</span>a_invariants<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token punctuation">]</span><span class="token punctuation">)</span>    P_Qps <span class="token operator">=</span> Eqp<span class="token punctuation">.</span>lift_x<span class="token punctuation">(</span>ZZ<span class="token punctuation">(</span>P<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> P_Qp <span class="token keyword">in</span> P_Qps<span class="token punctuation">:</span>        <span class="token keyword">if</span> GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span>P_Qp<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> P<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    Q_Qps <span class="token operator">=</span> Eqp<span class="token punctuation">.</span>lift_x<span class="token punctuation">(</span>ZZ<span class="token punctuation">(</span>Q<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">all</span><span class="token operator">=</span><span class="token boolean">True</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> Q_Qp <span class="token keyword">in</span> Q_Qps<span class="token punctuation">:</span>        <span class="token keyword">if</span> GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">(</span>Q_Qp<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">==</span> Q<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>            <span class="token keyword">break</span>    p_times_P <span class="token operator">=</span> p<span class="token operator">*</span>P_Qp    p_times_Q <span class="token operator">=</span> p<span class="token operator">*</span>Q_Qp    <span class="token comment"># 获取 pP 和 pQ 的坐标</span>    x_P<span class="token punctuation">,</span>y_P <span class="token operator">=</span> p_times_P<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span>    x_Q<span class="token punctuation">,</span>y_Q <span class="token operator">=</span> p_times_Q<span class="token punctuation">.</span>xy<span class="token punctuation">(</span><span class="token punctuation">)</span>    phi_P <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>x_P<span class="token operator">/</span>y_P<span class="token punctuation">)</span>    phi_Q <span class="token operator">=</span> <span class="token operator">-</span><span class="token punctuation">(</span>x_Q<span class="token operator">/</span>y_Q<span class="token punctuation">)</span>    <span class="token comment">#计算离散对数 k = phi_Q / phi_P</span>    k <span class="token operator">=</span> phi_Q<span class="token operator">/</span>phi_P    <span class="token keyword">return</span> ZZ<span class="token punctuation">(</span>k<span class="token punctuation">)</span>r <span class="token operator">=</span> SmartAttack<span class="token punctuation">(</span>P<span class="token punctuation">,</span> Q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>Pohlig-Hellman算法</h1><p>主要解决：整数域中</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>y</mi><mo>=</mo><msup><mi>g</mi><mi>x</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">y=g^x(modp)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">x</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p><p>里的 x以及椭圆曲线离散对数问题中 Gk=Q的 G的阶 n</p><p><img src="/post/bd919ad5/image-20230703153012355.png" alt></p><p>P的阶n: nP=O</p><p>Q mod nP =l</p><p>Q mod n=l</p><p>Q 模上n的因数等于l</p><p>寻找在不同因子下的l的对应同余数li</p><p><img src="/post/bd919ad5/image-20230703155142525-1688382098029-16.png" alt></p><p>脚本</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Sage Code 1</span>p <span class="token operator">=</span> a <span class="token operator">=</span> b <span class="token operator">=</span> <span class="token comment">#G P 两点坐标</span>gx <span class="token operator">=</span> gy <span class="token operator">=</span> px <span class="token operator">=</span> py <span class="token operator">=</span> E <span class="token operator">=</span> EllipticCurve<span class="token punctuation">(</span>GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>G <span class="token operator">=</span> E<span class="token punctuation">(</span>gx<span class="token punctuation">,</span> gy<span class="token punctuation">)</span>n <span class="token operator">=</span> E<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token punctuation">)</span>QA <span class="token operator">=</span> E<span class="token punctuation">(</span>px<span class="token punctuation">,</span> py<span class="token punctuation">)</span><span class="token comment">#n 的素因子</span>factors <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span>factor<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token number">1</span>moduli <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>remainders <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"[+] Running Pohlig Hellman"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token keyword">for</span> i<span class="token punctuation">,</span> j <span class="token keyword">in</span> factors<span class="token punctuation">:</span>    <span class="token keyword">if</span> i <span class="token operator">></span> <span class="token number">10</span><span class="token operator">**</span><span class="token number">9</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>i<span class="token punctuation">)</span>        <span class="token keyword">break</span>    mod <span class="token operator">=</span> i<span class="token operator">**</span>j    g2 <span class="token operator">=</span> G<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">//</span>mod<span class="token punctuation">)</span><span class="token comment">#G0</span>    q2 <span class="token operator">=</span> QA<span class="token operator">*</span><span class="token punctuation">(</span>n<span class="token operator">//</span>mod<span class="token punctuation">)</span><span class="token comment">#Q0</span>    <span class="token comment">#discrete_log离散对数LiP0=Q</span>    r <span class="token operator">=</span> discrete_log<span class="token punctuation">(</span>q2<span class="token punctuation">,</span> g2<span class="token punctuation">,</span> operation<span class="token operator">=</span><span class="token string">'+'</span><span class="token punctuation">)</span>    remainders<span class="token punctuation">.</span>append<span class="token punctuation">(</span>r<span class="token punctuation">)</span>    moduli<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mod<span class="token punctuation">)</span>    m <span class="token operator">*=</span> mod    <span class="token comment">#中国剩余定理</span>r <span class="token operator">=</span> crt<span class="token punctuation">(</span>remainders<span class="token punctuation">,</span> moduli<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token comment">#求出L,相当于求解出私钥</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#Sage Code 2</span>E <span class="token operator">=</span> EllipticCurve<span class="token punctuation">(</span>GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token punctuation">[</span>a<span class="token punctuation">,</span> b<span class="token punctuation">]</span><span class="token punctuation">)</span>P <span class="token operator">=</span> E<span class="token punctuation">(</span><span class="token punctuation">)</span>Q <span class="token operator">=</span> E<span class="token punctuation">(</span><span class="token punctuation">)</span>factors<span class="token punctuation">,</span> exponents <span class="token operator">=</span> <span class="token builtin">zip</span><span class="token punctuation">(</span><span class="token operator">*</span>factor<span class="token punctuation">(</span>E<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#factor(E.order())返回了一个由因子和指数组成的元组列表,zip将因子和指数分别放入两个独立的元组中。</span>primes <span class="token operator">=</span> <span class="token punctuation">[</span>factors<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token operator">^</span> exponents<span class="token punctuation">[</span>i<span class="token punctuation">]</span> <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span>primes<span class="token punctuation">)</span>dlogs <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> fac <span class="token keyword">in</span> primes<span class="token punctuation">:</span>t <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>P<span class="token punctuation">.</span>order<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token builtin">int</span><span class="token punctuation">(</span>fac<span class="token punctuation">)</span><span class="token punctuation">)</span>dlog <span class="token operator">=</span> discrete_log<span class="token punctuation">(</span>t<span class="token operator">*</span>Q<span class="token punctuation">,</span>t<span class="token operator">*</span>P<span class="token punctuation">,</span>operation<span class="token operator">=</span><span class="token string">"+"</span><span class="token punctuation">)</span>    <span class="token comment">#t*Q=Q0</span>dlogs <span class="token operator">+=</span> <span class="token punctuation">[</span>dlog<span class="token punctuation">]</span><span class="token comment">#li</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"factor: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>fac<span class="token punctuation">)</span><span class="token operator">+</span><span class="token string">", Discrete Log: "</span><span class="token operator">+</span><span class="token builtin">str</span><span class="token punctuation">(</span>dlog<span class="token punctuation">)</span><span class="token punctuation">)</span> l <span class="token operator">=</span> crt<span class="token punctuation">(</span>dlogs<span class="token punctuation">,</span>primes<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>l<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>ECDSA</h1><p>ECDSA（Elliptic Curve Digital Signature Algorithm）是一种基于椭圆曲线密码学的数字签名算法。它是公钥密码学体系中的一部分，用于生成和验证数字签名</p><p><img src="/post/bd919ad5/image-20230703185308803-1688381592866-1.png" alt="image-20230703185308803"></p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> ECC </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>LitCTF 2023</title>
      <link href="/post/73c9a9a5.html"/>
      <url>/post/73c9a9a5.html</url>
      
        <content type="html"><![CDATA[<h1>[LitCTF 2023]梦想是红色的 (初级)</h1><h2 id="题目">题目</h2><p>自由友善公正公正敬业法治自由自由和谐平等自由自由公正法治诚信民主诚信自由自由诚信民主爱国友善平等诚信富强友善爱国自由诚信民主敬业爱国诚信民主友善爱国平等爱国爱国敬业敬业友善爱国公正敬业爱国敬业和谐文明诚信文明友善爱国自由诚信民主爱国爱国诚信和谐友善爱国自由友善平等爱国友善平等友善自由诚信自由平等爱国爱国敬业敬业友善爱国敬业敬业友善自由友善平等诚信自由法治诚信和谐</p><h2 id="题解">题解</h2><p>社会主义核心价值观编码</p><p><a href="http://www.hiencode.com/cvencode.html">http://www.hiencode.com/cvencode.html</a></p><h2 id="flag">flag</h2><p>LitCTF{为之则易,不为则难}</p><h1>[LitCTF 2023]Hex？Hex！(初级)</h1><h2 id="题目">题目</h2><p>4c69744354467b746169313131636f6f6c6c616161217d</p><h2 id="题解">题解</h2><p>根据题目信息提示 hex 解码</p><h2 id="flag">flag</h2><p>LitCTF{tai111coollaaa!}</p><h1>[LitCTF 2023]你是我的关键词(Keyworld) (初级)</h1><h2 id="题目">题目</h2><p>IFRURC{X0S_YP3_JX_HBXV0PA}</p><h2 id="题解">题解</h2><p>题目信息提示：YOU are my keworld</p><p>关键字密码</p><p><a href="http://www.hiencode.com/keyword.html">http://www.hiencode.com/keyword.html</a></p><p>keworld是YOU</p><h2 id="flag">flag</h2><p>LITCTF{Y0U_AR3_MY_KEYW0RD}</p><h1>[LitCTF 2023]Is this only base?</h1><h2 id="题目">题目</h2><p>SWZxWl=F=DQef0hlEiSUIVh9ESCcMFS9NF2NXFzM</p><h2 id="题解">题解</h2><p>等号在中间，栅栏密码，普通栅栏枚举没有==在尾部，w栅栏，根据提示信息，<strong>栏目数为23</strong></p><p>SWZxWlFDe0liUV9ScF9FNFMzX2NSMCEhISEhfQ==</p><p>base解码</p><p>IfqZQC{IbQ_Rp_E4S3_cR0!!!}凯撒，枚举出来flag</p><p>key为23得到flag</p><h2 id="flag">flag</h2><p>LitCTF{LeT_Us_H4V3_fU0!!!}</p><h1>[LitCTF 2023]原来你也玩原神 (初级)</h1><h2 id="题目">题目</h2><p><img src="/post/73c9a9a5/1685096923659-7fb886d7-5ce2-453c-9813-50006092f10c.png" alt="img"></p><h2 id="题解">题解</h2><p>。。。。。一个一个对照吧，<strong>提瓦特字母表</strong></p><p><img src="/post/73c9a9a5/1685096977918-39104a4e-7fe5-4bde-9404-abb589c252ab.png" alt="img"></p><h2 id="flag">flag</h2><p>LITCTF{YUANLAINIYEWANYUANSHENWWW}</p><h1>[LitCTF 2023]家人们！谁懂啊，RSA签到都不会 (初级)</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)p = getPrime(512)q = getPrime(512)e = 65537n = p*qc = pow(m,e,n)print(f'p = &#123;p&#125;')print(f'q = &#123;q&#125;')print(f'c = &#123;c&#125;')'''p = 12567387145159119014524309071236701639759988903138784984758783651292440613056150667165602473478042486784826835732833001151645545259394365039352263846276073q = 12716692565364681652614824033831497167911028027478195947187437474380470205859949692107216740030921664273595734808349540612759651241456765149114895216695451c = 108691165922055382844520116328228845767222921196922506468663428855093343772017986225285637996980678749662049989519029385165514816621011058462841314243727826941569954125384522233795629521155389745713798246071907492365062512521474965012924607857440577856404307124237116387085337087671914959900909379028727767057'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>p,q给了，直接解</p><h2 id="wp">wp</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import gmpy2from Crypto.Util.number import *e = 65537p = 12567387145159119014524309071236701639759988903138784984758783651292440613056150667165602473478042486784826835732833001151645545259394365039352263846276073q = 12716692565364681652614824033831497167911028027478195947187437474380470205859949692107216740030921664273595734808349540612759651241456765149114895216695451c = 108691165922055382844520116328228845767222921196922506468663428855093343772017986225285637996980678749662049989519029385165514816621011058462841314243727826941569954125384522233795629521155389745713798246071907492365062512521474965012924607857440577856404307124237116387085337087671914959900909379028727767057n = p*qphi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(long_to_bytes(m))#LitCTF&#123;it_is_easy_to_solve_question_when_you_know_p_and_q&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]yafu (中级）</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)n  = 1for i in range(15):    n *=getPrime(32)e = 65537c = pow(m,e,n)print(f'n = &#123;n&#125;')print(f'c = &#123;c&#125;')'''n = 15241208217768849887180010139590210767831431018204645415681695749294131435566140166245881287131522331092026252879324931622292179726764214435307c = 12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>提示yafu</p><p><img src="/post/73c9a9a5/1685099430955-80e089fb-1d80-4def-97d3-ab5d759e40a0.png" alt="img"></p><h2 id="wp">wp</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from gmpy2 import*from Crypto.Util.number import *e = 65537n = 15241208217768849887180010139590210767831431018204645415681695749294131435566140166245881287131522331092026252879324931622292179726764214435307c = 12608550100856399369399391849907846147170257754920996952259023159548789970041433744454761458030776176806265496305629236559551086998780836655717p1=2151018733p2=2201440207p3=2315495107p4=2585574697p5=2719600579p6=2758708999p7=2767137487p8=2906576131p9=2923522073p10=3354884521p11=3355651511p12=3989697563p13=4021078331p14=4044505687p15=4171911923phi = (p1 - 1) * (p2 - 1) * (p3 - 1) * (p4 - 1) * (p5 - 1) * (p6 - 1) * (p7 - 1) * (p8 - 1) * (p9 - 1) * (p10 - 1) * (p11 - 1) * (p12 - 1) * (p13 - 1) * (p14 - 1) * (p15 - 1)d = inverse(e, phi)m = pow(c, d, n)print(long_to_bytes(m))#LitCTF&#123;Mu1tiple_3m4ll_prim5_fac7ors_@re_uns4f5&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]md5的破解</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from hashlib import md5from secret import flag#flag全是由小写字母及数字组成m=md5(flag).hexdigest()print(flag[:13]+flag[15:18]+flag[19:34]+flag[35:38])print(m)# b'LitCTF&#123;md5can3derypt213thoughcrsh&#125;'# 496603d6953a15846cd7cc476f146771<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>爆破，13，14，18，34</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from hashlib import md5from string import ascii_lowercaseknown_prefix = "LitCTF&#123;md5can**3de*rypt213thoughcr*sh&#125;"known_suffix = "&#125;"unknown_pos = [13, 14, 18, 34]charset = 'abcdefghigklmnopqrstuvwxyz1234567890'for a in charset:    for b in charset:        for c in charset:            for d in charset:                candidate_flag = known_prefix[:13] + a + b + known_prefix[15:18] + c + known_prefix[19:34] + d+known_prefix[35:38]                if md5(candidate_flag.encode()).hexdigest() == "496603d6953a15846cd7cc476f146771":                    print(candidate_flag)                    break#LitCTF&#123;md5can123dexrypt213thoughcrpsh&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]factordb (中级)</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">e = 65537n = 87924348264132406875276140514499937145050893665602592992418171647042491658461c = 87677652386897749300638591365341016390128692783949277305987828177045932576708<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>#在线网站分解n,得出p,q</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import gmpy2from Crypto.Util.number import long_to_bytese = 65537n = 87924348264132406875276140514499937145050893665602592992418171647042491658461c = 87677652386897749300638591365341016390128692783949277305987828177045932576708#在线网站分解np=275127860351348928173285174381581152299q=319576316814478949870590164193048041239n = p*qphi = (p-1)*(q-1)d = gmpy2.invert(e,phi)m = pow(c,d,n)print(long_to_bytes(m))#LitCTF&#123;factordb!!!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]Virginia</h1><h2 id="题目">题目</h2><p>Ysexj lrk rzmkses os wilj hhks joa rtsy xzmktye yt xuim ehgy joa ofsz blnz yz pohv tnjx fxtx yuzc dxjlmy fyd nzr tnjx fuw cegq! Orkfx wnfe yuz haty eo jwpas;lz wnjce etf wgse tu lz;bk bsaz dzu cfyt zt me,hjnaaxp yuz sabj znrd znk qtfk fyd usp cnfyck yz du fwl zmp tnnygy dzu cfyt zt oo.Sfj yuz sabj pnuzrh nfapospsy yz mgpp yuz dwkje,ettfgn ycigqd tu rlkk dzu yycotl,pnuzrh ytcrub eo qjpp etf harln,kszumm sovj eo sfve etf hguay? Gqhaex auz dzuxxpll ny ozmpry’<a href="http://xsokx.Tf">xsokx.Tf</a> etf fkjw tnfe iz mfrzx joa,ne pxtmahqj hawes zmp ozmpr vjcsus, eou.Yse nfapojdt uk aeuuwe jty’t tjneyxlroqj hgap tnj meyy zf kapreysitl;ehkd uuyy xaqj ehk rzsz tq ebjcyzmtnm ysaz hzmkx llusr tnjtr cfj.Hguaitjds rnps ltc tntde cmz cxd,ehuxp wnt suxy, ehuxp wnt sabj degwnhki,lnj ysoyj hhu mlvk yciki,qox tyle ysee hln guarkhtazj ehk nxpuweathp ol upovqp,wnt sabj eoahsej yseow wibjd.Luap bkltny bttn f dmoqp,gxths cneh g ptsy fyd ksos cneh g ypax.Yse hwtgnypsz kftawp woqw arblyy gp bgxpd us l fuwrozypn vfdt, etf cgs’e gu ty wkqw it qtfkzytoq joa qpt mt zf etfr vfdt lftlawps gso hkfctghsey.Bset dzu cjce htcn,etf wkwp cxdtnm fyd kapretye gwzuti joa bls yrtlosr.Loap yuzc lokp su ysaz bset dzu jnp,yuz’ce zmp otj hhu nd ssnwitl lnj jgexdznk fcoaso yuz ts iwjitl.</p><p>Uwegxp skso tnnd mkxdamj eo zmzsk upovqp wnt xegs dosjehosr tu dzu,zt ehuxp wnt sabj eoahsej dzux qtfk ny otj hae tc attehkw,eo zmzsk bso sfve etf ssnwe cmpn etf rkfwle spej ne,tu ysoyj ehgy xaqj joa xpe zmp bxnrhzjc soip ol ysitld wnjy yuz lrk wparqj duby,tu ysoyj hhu dzu cfyt zt wez yses pyoc ysaz dzu guarkhtazj ehknc fxnpnjxsiv.Fyd ok joa izn’z, izn’z bzrxd,yozmtnm gld cnwl nfapks eo etf,yuz hirq uuyy xiyx zuz ty tnj zpvtctastte yz bxnrhzjy surpotj’d dgd hizm ehox xeyxlgk.Rj pgxdwuwo iy szt g wpgaqlr Ifpsgw aayxhoxi,lnj yse ksn frfr=[86, 116, 128, 80, 98, 85, 139, 122, 134, 114, 125, 136, 117, 123, 129, 127, 128, 128, 142, 130, 140, 147, 127, 132, 131, 136, 151, 134, 152, 164] -Cgjdax</p><h2 id="题解">题解</h2><p>维吉尼亚爆破</p><p>第二段爆破得到</p><p>Please send this message to those people who mean something to you,to those who have touched your life in one way or another,to those who make you smile when you really need it,to those that make you see the brighter side of things when you are really down,to those who you want to let them know that you appreciate their friendship.And if you don’t, don’t worry,nothing bad will happen to you,you will just miss out on the opportunity to brighten someone’s day with this <a href="http://message.My">message.My</a> password is not a regular Caesar password,and the enc flag=[86, 116, 128, 80, 98, 85, 139, 122, 134, 114, 125, 136, 117, 123, 129, 127, 128, 128, 142, 130, 140, 147, 127, 132, 131, 136, 151, 134, 152, 164] -Caesar</p><p>可知变异凯撒</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">flag=[86, 116, 128, 80, 98, 85, 139, 122, 134, 114, 125, 136, 117, 123, 129, 127, 128, 128, 142, 130, 140, 147, 127, 132, 131, 136, 151, 134, 152, 164]m=''for i in range(len(flag)):    m+=chr(flag[i]-10-i)print(m)#LitCTF&#123;it_is_different_caesar&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]easy_math</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)e = 65537p = getPrime(512)q = getPrime(128)n = p*qhint = p**3-q**5c = pow(m,e,n)print(f'n = &#123;n&#125;')print(f'c = &#123;c&#125;')print(f'hint = &#123;hint&#125;')'''n = 2230791374046346835775433548641067593691369485828070649075162141394476183565187654365131822111419512477883295758461313983481545182887415447403634720326639070667688614534290859200753589300443797c = 2168563038335029902089976057856861885635845445863841607485310134441400500612435296818745930370268060353437465666224400129105788787423156958336380480503762222278722770240792709450637433509537280hint = 392490868359411675557103683163021977774935163924606169241731307258226973701652855448542714274348304997416149742779376023311152228735117186027560227613656229190807480010615064372521942836446425717660375242197759811804760170129768647414717571386950790115746414735411766002368288743086845078803312201707960465419405926186622999423245762570917629351110970429987377475979058821154568001902541710817731089463915930932142007312230897818177067675996751110894377356758932'''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>提示简单的数学题</p><p>二元方程组</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>h</mi><mi>i</mi><mi>n</mi><mi>t</mi><mo>=</mo><msup><mi>p</mi><mn>3</mn></msup><mo>−</mo><msup><mi>q</mi><mn>5</mn></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}hint = p^3-q^5\\n = p*q\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8141079999999999em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p>sage跑一下</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import gmpy2from Cryptodome.Util.number import long_to_byteshint = 392490868359411675557103683163021977774935163924606169241731307258226973701652855448542714274348304997416149742779376023311152228735117186027560227613656229190807480010615064372521942836446425717660375242197759811804760170129768647414717571386950790115746414735411766002368288743086845078803312201707960465419405926186622999423245762570917629351110970429987377475979058821154568001902541710817731089463915930932142007312230897818177067675996751110894377356758932e = 65537n = 2230791374046346835775433548641067593691369485828070649075162141394476183565187654365131822111419512477883295758461313983481545182887415447403634720326639070667688614534290859200753589300443797c = 2168563038335029902089976057856861885635845445863841607485310134441400500612435296818745930370268060353437465666224400129105788787423156958336380480503762222278722770240792709450637433509537280#sage'''p, q = sp.symbols('p q')#定义两个变量p,qf1= p**3 - q**5-hintf2 = p * q-n# 求解方程组result = sp.solve((f1, f2), (p, q))print(result)#[(7321664971326604351487965655099805117568571010588695608389113791312918573783115429227542573780838065461696504325762281209452761930184231131129306271846427, 304683618109085947723284393392507415311)]'''p = 7321664971326604351487965655099805117568571010588695608389113791312918573783115429227542573780838065461696504325762281209452761930184231131129306271846427q = 304683618109085947723284393392507415311d = gmpy2.invert(e, (p - 1) * (q - 1))m = pow(c, d, n)print(long_to_bytes(m))#LitCTF&#123;f9fab7522253e44b48824e914d0801ba&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>​                       看见一个师傅的新解    <a href="https://www.ctfer.vip/note/set/2270">https://www.ctfer.vip/note/set/2270</a></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>h</mi><mi>i</mi><mi>n</mi><mi>t</mi><mo>=</mo><msup><mi>p</mi><mn>3</mn></msup><mo>−</mo><msup><mi>q</mi><mn>5</mn></msup><mspace linebreak="newline"></mspace><msup><mi>p</mi><mn>3</mn></msup><mtext>为    </mtext><mn>512</mn><mo>∗</mo><mn>3</mn><mo>=</mo><mn>1536</mn><mtext>位。</mtext><mspace linebreak="newline"></mspace><msup><mi>q</mi><mn>5</mn></msup><mtext>为    </mtext><mn>128</mn><mo>∗</mo><mn>5</mn><mo>=</mo><mn>640</mn><mtext>位。</mtext><mspace linebreak="newline"></mspace><msup><mi>p</mi><mn>3</mn></msup><mo>&gt;</mo><mo>&gt;</mo><msup><mi>q</mi><mn>5</mn></msup><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">hint = p^3-q^5\\p^3  为\  \ \ \ 512*3=1536位。\\q^5  为\ \ \ \  128*5=640位。\\p^3&gt;&gt;q^5\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">5</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord">5</span><span class="mord">3</span><span class="mord">6</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">。</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span><span class="mord cjk_fallback">为</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mord">1</span><span class="mord">2</span><span class="mord">8</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">5</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">6</span><span class="mord">4</span><span class="mord">0</span><span class="mord cjk_fallback">位</span><span class="mord cjk_fallback">。</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">5</span></span></span></span></span></span></span></span></span><span class="mspace newline"></span></span></span></span></p><p>因此，直接对hint进行开三次方，得到的值为p，或者在p的附近。爆破相近的素数，即可求出p。</p><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from gmpy2 import iroot,next_primen = 2230791374046346835775433548641067593691369485828070649075162141394476183565187654365131822111419512477883295758461313983481545182887415447403634720326639070667688614534290859200753589300443797c = 2168563038335029902089976057856861885635845445863841607485310134441400500612435296818745930370268060353437465666224400129105788787423156958336380480503762222278722770240792709450637433509537280hint = 392490868359411675557103683163021977774935163924606169241731307258226973701652855448542714274348304997416149742779376023311152228735117186027560227613656229190807480010615064372521942836446425717660375242197759811804760170129768647414717571386950790115746414735411766002368288743086845078803312201707960465419405926186622999423245762570917629351110970429987377475979058821154568001902541710817731089463915930932142007312230897818177067675996751110894377356758932e = 65537t,f = iroot(hint, 3)print(isPrime(t))while(True):    t = next_prime(t)    if n%t==0:        p = t        breakprint(p)q = n//pd = inverse(e,(p-1)*(q-1))m = pow(c,d,n)print(long_to_bytes(m))# LitCTF&#123;f9fab7522253e44b48824e914d0801ba&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]e的学问</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *m=bytes_to_long(b'xxxxxx')p=getPrime(256)q=getPrime(256)e=74n=p*qc=pow(m,e,n)print("p=",p)print("q=",q)print("c=",c)#p= 86053582917386343422567174764040471033234388106968488834872953625339458483149#q= 72031998384560188060716696553519973198388628004850270102102972862328770104493#c= 3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>e和phi 不互素（<a href="https://blog.csdn.net/chenzzhenguo/article/details/94339659%EF%BC%89">https://blog.csdn.net/chenzzhenguo/article/details/94339659）</a></p><p><img src="/post/73c9a9a5/1685103742881-c444deb9-e623-4824-b488-e49813ca1e4c.png" alt="img"></p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import gmpy2from Crypto.Util.number import *e=74p= 86053582917386343422567174764040471033234388106968488834872953625339458483149q= 72031998384560188060716696553519973198388628004850270102102972862328770104493c= 3939634105073614197573473825268995321781553470182462454724181094897309933627076266632153551522332244941496491385911139566998817961371516587764621395810123n = p * qphi = (p - 1) * (q - 1)if gmpy2.gcd(e,phi)!=1:    t = gmpy2.gcd(e, phi)    d = inverse(e // t, phi)    tm = pow(c, d, n)    m= gmpy2.iroot(tm, t)    if m[1]:        print(long_to_bytes(m[0]))else:    d = gmpy2.invert(e, phi)    m = pow(c, d, n)    print(long_to_bytes(m))#LitCTF&#123;e_1s_n0t_@_Prime&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]P_Leak</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *e=65537m=bytes_to_long(b'xxxx')p=getPrime(512)q=getPrime(512)n=p*qphi=(p-1)*(q-1)d=inverse(e,phi)dp=d%(p-1)c=pow(m,e,n)print("dp=",dp)print("n=",n)print("c=",c)#dp= 5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329#n= 50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477#c= 39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p><a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/">https://lazzzaro.github.io/2020/05/06/crypto-RSA/</a></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>p</mi><mo>≡</mo><mi>d</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mo>∵</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mo>≡</mo><mi>d</mi><mo>⋅</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mtext>−</mtext><mn>1</mn><mo>=</mo><mi>k</mi><mo>⋅</mo><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>⋅</mo><mi>d</mi><mo>⋅</mo><mi>e</mi><mo>=</mo><mi>k</mi><mtext>′</mtext><mo>⋅</mo><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>k</mi><mtext>′</mtext><mo>=</mo><mi>k</mi><mo>⋅</mo><mi>d</mi><mo>⋅</mo><mi>e</mi><mspace linebreak="newline"></mspace><mo>⇔</mo><mi>d</mi><mo>⋅</mo><mi>e</mi><mo>=</mo><mtext>−</mtext><mi>k</mi><mtext>′</mtext><mo>⋅</mo><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mo>⋅</mo><mi>d</mi><mo>⋅</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>⇔</mo><mtext>−</mtext><mi>k</mi><mtext>′</mtext><mo>⋅</mo><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><mi>k</mi><mn>1</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mtext>−</mtext><mn>1</mn><mo>=</mo><mi>k</mi><mn>2</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mi>q</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>⇔</mo><mo stretchy="false">(</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mo>⋅</mo><mo stretchy="false">(</mo><mi>k</mi><mn>2</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>q</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mtext>−</mtext><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mspace linebreak="newline"></mspace><mo>∵</mo><mi>d</mi><mi>p</mi><mo>&lt;</mo><mi>p</mi><mtext>−</mtext><mn>1</mn><mo>∴</mo><mo stretchy="false">(</mo><mi>k</mi><mn>2</mn><mo>⋅</mo><mo stretchy="false">(</mo><mi>q</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mtext>−</mtext><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>e</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">dp≡d(mod(p−1))\\ \\∵dp⋅e≡d⋅e≡1(mod(p−1))\\∴dp⋅e−1=k⋅(p−1)\\∴(dp⋅e−1)⋅d⋅e=k′⋅(p−1)\\k′=k⋅d⋅e\\⇔d⋅e=−k′⋅(p−1)+dp⋅e⋅d⋅e≡1(modφ(n))\\⇔−k′⋅(p−1)+dp⋅e≡1(modφ(n))\\∴k1⋅(p−1)+dp⋅e−1=k2⋅(p−1)⋅(q−1)⇔(p−1)⋅(k2⋅(q−1)−k1)+1=dp⋅e\\∵dp&lt;p−1∴(k2⋅(q−1)−k1)∈(0,e)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.44445em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">′</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">⇔</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8866799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord">−</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p>∴ 遍历 (1,e)，当满足</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mo stretchy="false">(</mo><mi>d</mi><mi>p</mi><mo>⋅</mo><mi>e</mi><mtext>−</mtext><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mi>i</mi><mo>+</mo><mn>1</mn><mo stretchy="false">)</mo><mo>=</mo><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">n mod((dp⋅e−1)//i+1)==0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">⋅</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">e</span><span class="mord">−</span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">/</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>得出p,q</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *import gmpy2e=65537dp= 5892502924236878675675338970704766304539618343869489297045857272605067962848952532606770917225218534430490745895652561015493032055636004130931491316020329n= 50612159190225619689404794427464916374543237300894011803225784470008992781409447214236779975896311093686413491163221778479739252804271270231391599602217675895446538524670610623369953168412236472302812808639218392319634397138871387898452935081756580084070333246950840091192420542761507705395568904875746222477c= 39257649468514605476432946851710016346016992413796229928386230062780829495844059368939749930876895443279723032641876662714088329296631207594999580050131450251288839714711436117326769029649419789323982613380617840218087161435260837263996287628129307328857086987521821533565738409794866606381789730458247531619for x in range(1, e):   if(e*dp%x==1):      p=(e*dp-1)//x+1      if(n%p!=0):         continue      q=n//p      phin=(p-1)*(q-1)      d=gmpy2.invert(e, phin)      m=gmpy2.powmod(c, d, n)      if(len(hex(m)[2:])%2==1):         continue      print(long_to_bytes(m))#LitCTF&#123;Prim3_1s_Le@k!!!!!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]The same common divisor</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *m=bytes_to_long(b'xxxxxx')e=65537p=getPrime(1024)q1=getPrime(1024)q2=getPrime(1024)n1=p*q1n2=p*q2c1=pow(m,e,n1)c2=pow(m,e,n2)n3=n1^n2print('n1=',n1)print('n3=',n3)print('c1=',c1)print('c2=',c2)#n1= 9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233#n3= 4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182#c1= 7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260#c2= 854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>n1,n2共享素数p</p><p>由于n3=n1^n2</p><p>可得n2=n1^n3</p><p>p是n1,n2的公约数</p><p>求出p</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import gmpy2from Crypto.Util.number import *e=65537n1= 9852079772293301283705208653824307027320071498525390578148444258198605733768947108049676831872672654449631852459503049139275329796717506126689710613873813880735666507857022786447784753088176997374711523987152412069255685005264853118880922539048290400078105858759506186417678959028622484823376958194324034590514104266608644398160457382895380141070373685334979803658172378382884352616985632157233900719194944197689860219335238499593658894630966428723660931647038577670614850305719449893199713589368780231046895222526070730152875112477675102652862254926169713030701937231206405968412044029177246460558028793385980934233n3= 4940268030889181135441311597961813780480775970170156650560367030148383674257975796516865571557828263935532335958510269356443566533284856608454193676600884849913964971291145182724888816164723930966472329604608512023988191536173112847915884014445539739070437180314205284883149421228744714989392788108329929896637182055266508625177260492776962915873036873839946591259443753924970795669864031580632650140641456386202636466624658715315856453572441182758855085077441336516178544978457053552156714181607801760605521338788424464551796638531143900048375037218585999440622490119344971822707261432953755569507740550277088437182c1= 7066425618980522033304943700150361912772559890076173881522840300333719222157667104461410726444725540513601550570478331917063911791020088865705346188662290524599499769112250751103647749860198318955619903728724860941709527724500004142950768744200491448875522031555564384426372047270359602780292587644737898593450148108629904854675417943165292922990980758572264063039172969633878015560735737699147707712154627358077477591293746136250207139049702201052305840453700782016480965369600667516646007546442708862429431724013679189842300429421340122052682391471347471758814138218632022564279296594279507382548264409296929401260c2= 854668035897095127498890630660344701894030345838998465420605524714323454298819946231147930930739944351187708040037822108105697983018529921300277486094149269105712677374751164879455815185393395371001495146490416978221501351569800028842842393448555836910486037183218754013655794027528039329299851644787006463456162952383099752894635657833907958930587328480492546831654755627949756658554724024525108575961076341962292900510328611128404001877137799465932130220386963518903892403159969133882215092783063943679288192557384595152566356483424061922742307738886179947575613661171671781544283180451958232826666741028590085269n2=n3^n1n2= 13275392358603749049507302824073643158313511157306042129424622043169404438475070367199888792522735816696831092853554043588044629442339762181808939836068784930395387656511731023773900700005021564847480224798180592959510217158765133918150651706674329603149481255390797032771700235015269257730220757739489147426447858665350504461218790022992177725157756735193197648927044824616697206813752794351736481372892433605669363455272775767270738838271685683788851792503697508906872616175734362549442203442409947760416740297996886756365560632301306250478012961270642177511142736084877917270911656025730517314096773424314000497639p=gmpy2.gcd(n1,n2)q1=n1//pq2=n2//pphi1=(p-1)*(q1-1)phi2=(p-1)*(q2-1)d1=gmpy2.invert(e,phi1)d2=gmpy2.invert(e,phi2)m=pow(c1,d1,n1)print(long_to_bytes(m))#LitCTF&#123;TH3_Tw0_nUmb3rs_H@v3_The_sAme_D1v1s0r!!&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]Euler</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)p = getPrime(512)q = getPrime(512)n = p*qc = pow(m,n-p-q+3,n)print(f'n = &#123;n&#125;')print(f'c = &#123;c&#125;')"""n = 115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549c = 406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441"""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>提示欧拉定理：<br>若正整数 a , n 互质，则</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>n</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{φ(n)}≡1(mod n) </annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">φ</span><span class="mopen mtight">(</span><span class="mord mathdefault mtight">n</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p><p>其中 φ(n) 是欧拉函数（1~n) 与 n 互质的数。</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><mi>p</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>m</mi><mo separator="true">,</mo><mi>n</mi><mo>−</mo><mi>p</mi><mo>−</mo><mi>q</mi><mo>+</mo><mn>3</mn><mo separator="true">,</mo><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>n</mi><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mspace linebreak="newline"></mspace><mi>φ</mi><mo stretchy="false">(</mo><mi>n</mi><mo stretchy="false">)</mo><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>    </mtext><mo>=</mo><mi>p</mi><mo>∗</mo><mi>q</mi><mo>−</mo><mi>q</mi><mo>−</mo><mi>p</mi><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><mo>=</mo><mi>n</mi><mo>−</mo><mi>q</mi><mo>−</mo><mi>p</mi><mo>+</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">c = pow(m,n-p-q+3,n)\\n=p*q\\ \\\\φ(n)=(p-1)*(q-1)\\ \ \ \  \ =p*q-q-p+1\\ =n-q-p+1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">3</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">φ</span><span class="mopen">(</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mrow><mi>n</mi><mo>−</mo><mi>p</mi><mo>−</mo><mi>q</mi><mo>+</mo><mn>3</mn></mrow></msup><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mtext>  </mtext><mi>n</mi><mtext>  </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c\equiv m^{n-p-q+3} \ \ mod(\ \ n \ \ )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="mbin mtight">+</span><span class="mord mtight">3</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mspace"> </span><span class="mclose">)</span></span></span></span></span></p><p>可变形为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mrow><mi>n</mi><mo>−</mo><mi>p</mi><mo>−</mo><mi>q</mi><mo>+</mo><mn>1</mn></mrow></msup><mo>∗</mo><msup><mi>m</mi><mn>2</mn></msup><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mtext>  </mtext><mi>n</mi><mtext>  </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c\equiv m^{n-p-q+1} *m^2\ \ mod(\ \ n \ \ )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.1130000000000004em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight">n</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mathdefault mtight" style="margin-right:0.03588em;">q</span><span class="mbin mtight">+</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mspace"> </span><span class="mclose">)</span></span></span></span></span></p><p>由欧拉定义可得</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>≡</mo><msup><mi>m</mi><mn>2</mn></msup><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mtext>  </mtext><mi>n</mi><mtext>  </mtext><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">c\equiv  m^2\ \ mod(\ \ n \ \ )</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mspace"> </span><span class="mspace"> </span><span class="mclose">)</span></span></span></span></span></p><p>2次方很小，直接爆破</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import gmpy2from Crypto.Util.number import long_to_bytesn = 115140122725890943990475192890188343698762004010330526468754961357872096040956340092062274481843042907652320664917728267982409212988849109825729150839069369465433531269728824368749655421846730162477193420534803525810831025762500375845466064264837531992986534097821734242082950392892529951104643690838773406549c = 406480424882876909664869928877322864482740577681292497936198951316587691545267772748204383995815523935005725558478033908575228532559165174398668885819826720515607326399097899572022020453298441if gmpy2.iroot(c,2)[1]==1:    m=gmpy2.iroot(c,2)[0]    print(long_to_bytes(m))else:    print("NO result！")    #LitCTF&#123;a1a8887793acfc199182a649e905daab&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]baby_xor</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)assert len(flag)==32p = getPrime(512)q = getPrime(512)n = p*qe = 65537c1 = p^mc2 = pow(m,e,n)print(f'n = &#123;n&#125;')print(f'c1 = &#123;c1&#125;')print(f'c2 = &#123;c2&#125;')"""n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407c1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996c2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601"""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>p为512bit，p的高位至少泄露264bit时候，环多项式方程在模n情况下有解,还有8bit，想到头为&quot;LitCTF{&quot;</p><p>kbits=512-256-56=200</p><h2 id="wp">wp</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from tqdm import tqdme = 65537n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407c1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996c2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601m = bytes_to_long(b'LitCTF&#123;' + b'\x00'*25)p_high = (c1^^m)>>200PR.&lt;x> =Zmod(n)[]f = (p_high &lt;&lt; 200) + xres = f.small_roots(X = 2^200 ,beta =0.4, epsilon=0.01)c = res[0] + (p_high&lt;&lt;200)m = int(c1) ^^ int(c)print(long_to_bytes(m))#LitCTF&#123;oh!!!!coppersmith_is_fun&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]隐晦的聊天记录</h1><h2 id="题目">题目</h2><p>出题人:6c73d5240a948c86981bc294814d</p><p>某不知名收件人：收到消息attack at dawn</p><p>出题人:xxxxxxxxxxxxxxxxxxxxxxxxxxxx</p><p>某不知名收件人：收到消息Monday or Thur</p><p>已知出题人和收件人手中的密钥相同，请解出出题人第二次发送的密文呢（16进制，字母小写，解得的结果记得要加上LitCTF{}哦。）</p><h2 id="题解">题解</h2><p>提示了OPT加密</p><p>一次一密（One-time password）</p><p>一个序列密码称为一次一密必须满足以下条件：</p><p>通过真随机数生成器得到密钥序列s0,s1,s2,…</p><p>一次一密的密钥长度必须和明文长度一样。</p><p>假设发送方要发送信息M</p><p>发送方：</p><p>使用ASCII编码M,得到二进制T1</p><p>接下来你需要一个和上面二进制串长度完全一致的密钥key</p><p>将T1与key进行XOR 运算，得到T2</p><p>发送方将T2发送给接收方</p><p>接收方：</p><p>接收方得到T2将其与key进行XOR运算，得到发送方的数据，再利用ascii编码即可得到正确的信息。</p><h2 id="wp">wp</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">ciphertext1 = bytes.fromhex("6c73d5240a948c86981bc294814d")plaintext1 = "attack at dawn".encode()plaintext2 = "Monday or Thur".encode()key = bytes([a ^ b for a, b in zip(plaintext1, ciphertext1)])ciphertext2 = bytes([a ^ b for a, b in zip(plaintext2, key)])print('LitCTF&#123;'+ciphertext2.hex()+'&#125;')#LitCTF&#123;4068cf2108868c889e1bf29d8351&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]babyLCG</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *from secret import flagm = bytes_to_long(flag)bit_len = m.bit_length()a = getPrime(bit_len)b = getPrime(bit_len)p = getPrime(bit_len+1)seed = mresult = []for i in range(10):    seed = (a*seed+b)%p    result.append(seed)print(result)"""result = [699175025435513913222265085178805479192132631113784770123757454808149151697608216361550466652878, 193316257467202036043918706856603526262215679149886976392930192639917920593706895122296071643390, 1624937780477561769577140419364339298985292198464188802403816662221142156714021229977403603922943, 659236391930254891621938248429619132720452597526316230221895367798170380093631947248925278766506, 111407194162820942281872438978366964960570302720229611594374532025973998885554449685055172110829, 1415787594624585063605356859393351333923892058922987749824214311091742328340293435914830175796909, 655057648553921580727111809001898496375489870757705297406250204329094679858718932270475755075698, 1683427135823894785654993254138434580152093609545092045940376086714124324274044014654085676620851, 492953986125248558013838257810313149490245209968714980288031443714890115686764222999717055064509, 70048773361068060773257074705619791938224397526269544533030294499007242937089146507674570192265]"""<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p><a href="https://www.cnblogs.com/vancasola/p/9942583.html">https://www.cnblogs.com/vancasola/p/9942583.html</a></p><p>LCG（linear congruential generator）线性同余算法，是一个古老的产生随机数的算法。由以下参数组成：</p><table><thead><tr><th>参数</th><th>m</th><th>a</th><th>c</th><th>X</th></tr></thead><tbody><tr><td>性质</td><td>模数</td><td>乘数</td><td>加数</td><td>随机数</td></tr><tr><td>作用</td><td>取模</td><td>移位</td><td>偏移</td><td>作为结果</td></tr></tbody></table><p>LCG算法是如下的一个递推公式，每下一个随机数是当前随机数向左移动 log2 a 位，加上一个 c，最后对 m 取余，使随机数限制在 0 ~ m-1 内<br><img src="/post/73c9a9a5/1685209048054-08ecd19e-6b4e-4400-b26d-25c12129d6b5.png" alt="img"></p><p><strong>python 实现</strong></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">lcg</span><span class="token punctuation">(</span>modulus<span class="token punctuation">,</span> a<span class="token punctuation">,</span> c<span class="token punctuation">,</span> seed<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        seed <span class="token operator">=</span> <span class="token punctuation">(</span>a <span class="token operator">*</span> seed <span class="token operator">+</span> c<span class="token punctuation">)</span> <span class="token operator">%</span> modulus        <span class="token keyword">yield</span> seed<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span></span></code></pre><h2 id="wp">wp</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *def gcd(a,b):    if(b==0):        return a    else:        return gcd(b,a%b)s =  [699175025435513913222265085178805479192132631113784770123757454808149151697608216361550466652878, 193316257467202036043918706856603526262215679149886976392930192639917920593706895122296071643390, 1624937780477561769577140419364339298985292198464188802403816662221142156714021229977403603922943, 659236391930254891621938248429619132720452597526316230221895367798170380093631947248925278766506, 111407194162820942281872438978366964960570302720229611594374532025973998885554449685055172110829, 1415787594624585063605356859393351333923892058922987749824214311091742328340293435914830175796909, 655057648553921580727111809001898496375489870757705297406250204329094679858718932270475755075698, 1683427135823894785654993254138434580152093609545092045940376086714124324274044014654085676620851, 492953986125248558013838257810313149490245209968714980288031443714890115686764222999717055064509, 70048773361068060773257074705619791938224397526269544533030294499007242937089146507674570192265]t = []for i in range(9):    t.append(s[i]-s[i-1])all_n = []for i in range(7):    all_n.append(gcd((t[i+1]*t[i-1]-t[i]*t[i]), (t[i+2]*t[i]-t[i+1]*t[i+1])))MMI = lambda A, n,s=1,t=0,N=0: (n &lt; 2 and t%N or MMI(n, A%n, t, s-A//n*t, N or n),-1)[n&lt;1] #逆元计算for n in all_n:    n=abs(n)    if n==1:        continue    a=(s[2]-s[1])*MMI((s[1]-s[0]),n)%n    ani=MMI(a,n)    b=(s[1]-a*s[0])%n    seed = (ani*(s[0]-b))%n    plaintext=seed    print(long_to_bytes(plaintext))'''b'LitCTF&#123;31fcd7832029a87f6c9f760fcf297b2f&#125;'b'LitCTF&#123;31fcd7832029a87f6c9f760fcf297b2f&#125;'b'LitCTF&#123;31fcd7832029a87f6c9f760fcf297b2f&#125;'b'LitCTF&#123;31fcd7832029a87f6c9f760fcf297b2f&#125;'b'\x0e\xa3\x083\xfa\x91\x0bh\x88Hn\x84V\x85\x95.\x88\xc8\xbdbL\xf4\xf5\x9b\xc0E\xebo \xea\xf9\xac\x17\x04(/\x0f\xc9\x86s\x04''''<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]我测你vva</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">public class Encrypto&#123;    public static void main(String[] args) &#123;        String flag="";        int cipher;        char[] arr;        arr=flag.toCharArray();        for(int i=0; i&lt;flag.length(); i++) &#123;           if(i%2==0)&#123;            cipher=Integer.valueOf(arr[i]);            cipher=cipher+i;            System.out.print((char)cipher);           &#125;           if(i%2!=0)&#123;            cipher=Integer.valueOf(arr[i]);            cipher=cipher-i;            System.out.print((char)cipher);           &#125;        &#125;    &#125;&#125;//cipher=HYEQJvPZ~X@+Bp<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>加密给你了，逆推一下就可</p><h2 id="wp">wp</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">cipher = "HYEQJvPZ~X@+Bp"flag = ""for i in range(len(cipher)):    if i % 2 == 0:        flag += chr(ord(cipher[i]) - i)    else:        flag += chr(ord(cipher[i]) + i)print(flag)#HZCTF&#123;Java666&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]Where is P?</h1><h2 id="题目">题目</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">from Crypto.Util.number import *m=bytes_to_long(b'XXXX')e=65537p=getPrime(1024)q=getPrime(1024)n=p*qprint(p)c=pow(m,e,n)P=p>>340print(P)a=pow(P,3,n)print("n=",n)print("c=",c)print("a=",a)#n= 24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721#c= 6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724#a= 22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>爆破P，开三次，求出P</p><p>P=p&gt;&gt;340</p><p>可知p的高位泄露（1024-340= 684 位），Coppersmith恢复p</p><h2 id="wp">WP</h2><pre class="line-numbers language-plain" data-language="plain"><code class="language-plain">import gmpy2from Crypto.Util.number import *e=65537n= 24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721c= 6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724a= 22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605for i in range(100000):    if gmpy2.iroot(i * n + a, 3)[1]==True:        P = gmpy2.iroot(i * n + a, 3)[0]        print(f'P=&#123;P&#125;')        breakp4=66302204855869216148926460265779698576660998574555407124043768605865908069722142097621926304390549253688814246272903647124801382742681337653915017783954290069842646020090511605930590064443141710086879668946'''pbits = 1024kbits = 340print(p4.nbits())p4 = p4 &lt;&lt; kbitsPR.&lt;x> = PolynomialRing(Zmod(n))f = x + p4roots = f.small_roots(X=2^kbits, beta=0.4)#经过以上一些函数处理后，n和p已经被转化为10进制if roots:   p = p4+int(roots[0])   print("p: "+str(p))'''p=148500014720728755901835170447203030242113125689825190413979909224639701026120883281188694701625473553602289432755479244507504340127322979884849883842306663453018960250560834067472479033116264539127330613635903666209920113813160301513820286874124210921593865507657148933555053341577090100101684021531775022459q=n//pphi=(p-1)*(q-1)d=inverse(e,phi)m=pow(c,d,n)print(long_to_bytes(m))#LitCTF&#123;Y0U_hAV3_g0T_Th3_r1ghT_AnsW3r&#125;<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 比赛 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> wp </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>coppersmith练习题</title>
      <link href="/post/741e8697.html"/>
      <url>/post/741e8697.html</url>
      
        <content type="html"><![CDATA[<h1>[红明谷CTF 2022]easy_ya</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> os<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">gen</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    e <span class="token operator">=</span> <span class="token number">3</span>    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        <span class="token keyword">try</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>            q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>            n <span class="token operator">=</span> p<span class="token operator">*</span>q            phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>            d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>            <span class="token keyword">return</span> p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e        <span class="token keyword">except</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>    <span class="token keyword">return</span>p<span class="token punctuation">,</span>q<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">,</span>e <span class="token operator">=</span> gen<span class="token punctuation">(</span><span class="token punctuation">)</span>r <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token operator">+</span>os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">32</span><span class="token punctuation">)</span><span class="token punctuation">)</span>M <span class="token operator">=</span> m<span class="token operator">%</span>rc <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"r = %d"</span><span class="token operator">%</span>r<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"M = %d"</span><span class="token operator">%</span>M<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n = %d"</span><span class="token operator">%</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e = %d"</span><span class="token operator">%</span>e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c = %d"</span><span class="token operator">%</span>c<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''r = 7996728164495259362822258548434922741290100998149465194487628664864256950051236186227986990712837371289585870678059397413537714250530572338774305952904473M = 4159518144549137412048572485195536187606187833861349516326031843059872501654790226936115271091120509781872925030241137272462161485445491493686121954785558n = 131552964273731742744001439326470035414270864348139594004117959631286500198956302913377947920677525319260242121507196043323292374736595943942956194902814842206268870941485429339132421676367167621812260482624743821671183297023718573293452354284932348802548838847981916748951828826237112194142035380559020560287e = 3c = 46794664006708417132147941918719938365671485176293172014575392203162005813544444720181151046818648417346292288656741056411780813044749520725718927535262618317679844671500204720286218754536643881483749892207516758305694529993542296670281548111692443639662220578293714396224325591697834572209746048616144307282'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>由题目可得</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>M</mi><mo>=</mo><mi>m</mi><mi mathvariant="normal">%</mi><mi>r</mi><mspace linebreak="newline"></mspace><mspace width="2em"><mspace width="2em"><mi>m</mi><mo>=</mo><mi>M</mi><mo>+</mo><mi>k</mi><mo>∗</mo><mi>r</mi><mspace width="2em"><mtext>（</mtext><mn>1</mn><mtext>）</mtext></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">M = m\%r\\\qquad \qquad m=M+k*r\qquad（1）</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.80556em;vertical-align:-0.05556em;"></span><span class="mord mathdefault">m</span><span class="mord">%</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">m</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:2em;"></span><span class="mord cjk_fallback">（</span><span class="mord">1</span><span class="mord cjk_fallback">）</span></span></span></span></span></p><p>又因为</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>c</mi><mo>=</mo><msup><mi>m</mi><mi>e</mi></msup><mspace width="1em"><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>n</mi><mo stretchy="false">)</mo><mspace width="2em"><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">c=m^e\quad(mod\quad n)\qquad(2)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span></span></p><p>将(1)带入（2）中，coppersmith，构造多项式</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>=</mo><mo stretchy="false">(</mo><mi>M</mi><mo>+</mo><mi>k</mi><mo>∗</mo><mi>r</mi><msup><mo stretchy="false">)</mo><mn>3</mn></msup><mo>−</mo><mi>c</mi></mrow><annotation encoding="application/x-tex">f = (M+k*r)^3 - c</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10903em;">M</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">3</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">c</span></span></span></span></span></p><p>求出m，由题目可知m是长度为 32 字节的随机数与flag拼接在一起得到的，所以m前半部分是flag</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sage</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesr <span class="token operator">=</span> <span class="token number">7996728164495259362822258548434922741290100998149465194487628664864256950051236186227986990712837371289585870678059397413537714250530572338774305952904473</span>M <span class="token operator">=</span> <span class="token number">4159518144549137412048572485195536187606187833861349516326031843059872501654790226936115271091120509781872925030241137272462161485445491493686121954785558</span>n <span class="token operator">=</span> <span class="token number">131552964273731742744001439326470035414270864348139594004117959631286500198956302913377947920677525319260242121507196043323292374736595943942956194902814842206268870941485429339132421676367167621812260482624743821671183297023718573293452354284932348802548838847981916748951828826237112194142035380559020560287</span>e <span class="token operator">=</span> <span class="token number">3</span>c <span class="token operator">=</span> <span class="token number">46794664006708417132147941918719938365671485176293172014575392203162005813544444720181151046818648417346292288656741056411780813044749520725718927535262618317679844671500204720286218754536643881483749892207516758305694529993542296670281548111692443639662220578293714396224325591697834572209746048616144307282</span>PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>m0 <span class="token operator">=</span> x<span class="token operator">*</span>r <span class="token operator">+</span> Mf <span class="token operator">=</span> <span class="token punctuation">(</span>m0<span class="token operator">^</span><span class="token number">3</span><span class="token punctuation">)</span> <span class="token operator">-</span> cf <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#f.small_roots() 方法返回的是一个 SageMath 的多项式对象的列表</span>x0 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>x0<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'flag&#123;53a2e494-964d-4506-a2c4-c34b9475dedd&#125;W\xf1X6\xacP\x9bc~9\xfd\x0f\x96\xbf\x92\xb9+\xe5\xebPJ\x17\xc4\xb2\xe8\xad\x01\n\xf2j\xae\x15'</span><span class="token comment">#b'flag&#123;53a2e494-964d-4506-a2c4-c34b9475dedd&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[蓝帽杯2022]corrupted_key</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP<span class="token keyword">from</span> secret <span class="token keyword">import</span> flagkey <span class="token operator">=</span> RSA<span class="token punctuation">.</span>generate<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">"flag.enc"</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">.</span>publickey<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>encrypt<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'priv.pem'</span><span class="token punctuation">,</span><span class="token string">'wb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>write<span class="token punctuation">(</span>key<span class="token punctuation">.</span>exportKey<span class="token punctuation">(</span><span class="token string">'PEM'</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''-----BEGIN RSA PRIVATE KEY-----MIICXgIBAAKBgQDXFSUGqpzsBeUzXWtG9UkUB8MZn9UQkfH2Aw03YrngP0nJ3NwHUFTgzBSLl0tBhUvZO07haiqHbuYgBegO+Aa3qjtksb+bH6dz41PQzbn/l4Pd1fXmdJmtEPNh6TjQC4KmpMQqBTXF52cheY6GtFzUuNA7DX51wr6HZqHoQ73GQQIDAQAByQvOzxy6szWFheigQdGxAkEA4wFss2CcHWQ8FnQ5w7k4uIH0I38khg07HLhaYm1czUcmlk4PgnDWxN+ev+vMU45O5eGntzaO3lHsaukX9461mA==-----END RSA PRIVATE KEY-----'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>拿到了一个残缺的私钥文件，通过PEM文件格式，可以获得n,e,dp低位，以及u</p><p>PKCS#1形式的私钥结构</p><pre class="line-numbers language-rust" data-language="rust"><code class="language-rust"><span class="token class-name">RSAPrivateKey</span> <span class="token punctuation">::</span><span class="token operator">=</span> <span class="token constant">SEQUENCE</span> <span class="token punctuation">&#123;</span> version <span class="token class-name">Version</span><span class="token punctuation">,</span> modulus <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span> n publicExponent <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span> e privateExponent <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span> d prime1 <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span> p prime2 <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span> q exponent1 <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span> d <span class="token keyword">mod</span> <span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> exponent2 <span class="token constant">INTEGER</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token operator">-</span> d <span class="token keyword">mod</span> <span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> coefficient <span class="token constant">INTEGER</span> <span class="token operator">-</span><span class="token operator">-</span> <span class="token punctuation">(</span>inverse of q<span class="token punctuation">)</span> <span class="token keyword">mod</span> <span class="token module-declaration namespace">p</span> <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>先将私钥文件的内容base64解密以16进制输出</p><p><img src="/post/741e8697/2023-05-26%20(3)-1685060900927-2.png" alt="2023-05-26 (3)"></p><p><img src="/post/741e8697/2023-05-26%20(4)-1685061205239-5.png" alt="2023-05-26 (4)"></p><p>提取信息：</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">key <span class="token operator">=</span><span class="token string">b'\x30\x82\x02\x5e\x02\x01\x00\x02\x81\x81\x00\xd7\x15\x25\x06\xaa\x9c\xec\x05\xe5\x33\x5d\x6b\x46\xf5\x49\x14\x07\xc3\x19\x9f\xd5\x10\x91\xf1\xf6\x03\x0d\x37\x62\xb9\xe0\x3f\x49\xc9\xdc\xdc\x07\x50\x54\xe0\xcc\x14\x8b\x97\x4b\x41\x85\x4b\xd9\x3b\x4e\xe1\x6a\x2a\x87\x6e\xe6\x20\x05\xe8\x0e\xf8\x06\xb7\xaa\x3b\x64\xb1\xbf\x9b\x1f\xa7\x73\xe3\x53\xd0\xcd\xb9\xff\x97\x83\xdd\xd5\xf5\xe6\x74\x99\xad\x10\xf3\x61\xe9\x38\xd0\x0b\x82\xa6\xa4\xc4\x2a\x05\x35\xc5\xe7\x67\x21\x79\x8e\x86\xb4\x5c\xd4\xb8\xd0\x3b\x0d\x7e\x75\xc2\xbe\x87\x66\xa1\xe8\x43\xbd\xc6\x41\x02\x03\x01\x00\x01'</span>key<span class="token operator">=</span>key<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span>n<span class="token operator">=</span>key<span class="token punctuation">[</span><span class="token number">22</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">10</span><span class="token punctuation">]</span>e<span class="token operator">=</span>key<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">6</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#print(n)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"e="</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>key2 <span class="token operator">=</span><span class="token string">b'\xc9\x0b\xce\xcf\x1c\xba\xb3\x35\x85\x85\xe8\xa0\x41\xd1\xb1\x02\x41\x00\xe3\x01\x6c\xb3\x60\x9c\x1d\x64\x3c\x16\x74\x39\xc3\xb9\x38\xb8\x81\xf4\x23\x7f\x24\x86\x0d\x3b\x1c\xb8\x5a\x62\x6d\x5c\xcd\x47\x26\x96\x4e\x0f\x82\x70\xd6\xc4\xdf\x9e\xbf\xeb\xcc\x53\x8e\x4e\xe5\xe1\xa7\xb7\x36\x8e\xde\x51\xec\x6a\xe9\x17\xf7\x8e\xb5\x98'</span>key2<span class="token operator">=</span>key2<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#print(key2)</span>v<span class="token operator">=</span>key2<span class="token punctuation">[</span><span class="token number">36</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#print(v)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"v="</span><span class="token punctuation">,</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>v<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">)</span>dq_low<span class="token operator">=</span>key2<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token number">30</span><span class="token punctuation">]</span><span class="token comment">#print(dq_low)</span>ql<span class="token operator">=</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">str</span><span class="token punctuation">(</span>dq_low<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"dql_nkbits="</span><span class="token punctuation">,</span>ql<span class="token punctuation">.</span>bit_length<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#已知q的低位120位</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"dqlow="</span><span class="token punctuation">,</span>ql<span class="token punctuation">)</span><span class="token comment">#n= 151036135413139226687867011199700639084856588533884431118047808395603993635242690166659649156476428533386350427603713487259266502837260466348398817558768025404903682189934563578605367223796247470920497617904900418615352839562681665973088711089128789315193951623751145385357347144960284983398745189236464272961</span><span class="token comment">#print(n.bit_length())</span><span class="token comment">#e= 65537</span><span class="token comment">#v= 11889246144866782519155392157369478059715977597114885585873502852127888907191116911762955888968046505980125449346852147369649024143226438553109462231463320</span><span class="token comment">#dql_nkbits= 120</span><span class="token comment">#dqlow= 1043891160170747082120115133012365745</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>已知n,e，dq的低位,和v.两种方法求解</p><p>方法一：官方解法：coppersmith先恢复dq再由dq泄露，分解n</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mo>≡</mo><mn>1</mn><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>e</mi><mo>∗</mo><mi>d</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo>+</mo><mn>1</mn><mtext>    </mtext><mspace linebreak="newline"></mspace><mtext>两边同时模（</mtext><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∵</mo><mi>d</mi><mi>q</mi><mo>=</mo><mi>d</mi><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><mtext>  </mtext><mi>e</mi><mo>∗</mo><mi>d</mi><mi>q</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><mi>e</mi><mo>∗</mo><mi>d</mi><mi>q</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace><mi>q</mi><mtext>是未知，已知</mtext><mi>d</mi><mi>q</mi><mtext>的低</mtext><mn>120</mn><mtext>位</mtext><mspace linebreak="newline"></mspace><mtext>设</mtext><mi>x</mi><mtext>位</mtext><mi>d</mi><mi>q</mi><mtext>的高位</mtext><mspace linebreak="newline"></mspace><mi>e</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mi>q</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo>+</mo><mi>x</mi><mo>∗</mo><msup><mn>2</mn><mn>1</mn></msup><mn>20</mn><mo stretchy="false">)</mo><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">e*d\equiv1\ \ mod \ \ (phi)\\e*d=k*phi+1\ \ \ \ \\两边同时模（q-1)\\\because dq=d\ \ mod\ \ (q-1)\\\therefore \ \ e*dq=k*(q-1)+1\\e*dq+k-1=k*q\\q是未知，已知dq的低120位\\设x位dq的高位\\e*(dqlow+x*2^120)+k-1=k*q\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">未</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">低</span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mord cjk_fallback">位</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">设</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">位</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">高</span><span class="mord cjk_fallback">位</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">1</span></span></span></span></span></span></span></span><span class="mord">2</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span></span></span></span></p><p>联系U，构造多项式，求出dp</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>≡</mo><msup><mi>q</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>p</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>两边同时乘以</mtext><mi>q</mi><mtext>的逆元</mtext><mo separator="true">,</mo><mtext>得到</mtext><mspace linebreak="newline"></mspace><mi>u</mi><mo>∗</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo>≡</mo><mn>0</mn><mtext>  </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>p</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>两边同时乘以</mtext><msup><mi>k</mi><mn>2</mn></msup><mo>∗</mo><mi>q</mi><mtext>的逆元</mtext><mo separator="true">,</mo><mtext>得到</mtext><mspace linebreak="newline"></mspace><mi>u</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>k</mi><mo>∗</mo><mi>q</mi><msup><mo stretchy="false">)</mo><mn>2</mn></msup><mo>−</mo><msup><mi>k</mi><mn>2</mn></msup><mo>∗</mo><mi>q</mi><mo>≡</mo><mn>0</mn><mtext>  </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>n</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>将</mtext><mi>k</mi><mo>∗</mo><mi>q</mi><mo>=</mo><mi>e</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mi>q</mi><mi>l</mi><mi>o</mi><mi>w</mi><mo>+</mo><mi>x</mi><mo>∗</mo><msup><mn>2</mn><mn>120</mn></msup><mo stretchy="false">)</mo><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mtext>带入上式</mtext><mspace linebreak="newline"></mspace><mtext>设</mtext><mi>k</mi><mo>∗</mo><mi>q</mi><mo>=</mo><mi>t</mi><mspace linebreak="newline"></mspace><mtext>构造多项式</mtext><mi>f</mi><mo>=</mo><mi>u</mi><mo>∗</mo><msup><mi>t</mi><mn>2</mn></msup><mo>−</mo><mi>k</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">u\equiv q^{-1}\  \  mod \ \ (p)\\两边同时乘以q的逆元,得到\\u*q-1\equiv 0\ \ (mod \ \ p)\\两边同时乘以k^2*q的逆元,得到\\u*(k*q)^2-k^2*q\equiv 0\ \ (mod\ \ n)\\将k*q=e*(dqlow+x*2^{120})+k-1带入上式\\设k*q=t\\构造多项式f=u*t^2-k*q\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">以</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">元</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">以</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">元</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65819em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">0</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">n</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">将</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord">1</span><span class="mord cjk_fallback">带</span><span class="mord cjk_fallback">入</span><span class="mord cjk_fallback">上</span><span class="mord cjk_fallback">式</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">设</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.61508em;vertical-align:0em;"></span><span class="mord mathdefault">t</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">造</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">项</span><span class="mord cjk_fallback">式</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9474379999999999em;vertical-align:-0.08333em;"></span><span class="mord"><span class="mord mathdefault">t</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span></span></span></span></p><p>获得x之后</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>得到</mtext><mi>d</mi><mi>q</mi><mo>=</mo><mi>i</mi><mi>n</mi><mi>t</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">[</mo><mn>0</mn><mo stretchy="false">]</mo><mo>&lt;</mo><mo>&lt;</mo><mn>120</mn><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>q</mi><mi>l</mi><mi>o</mi><mi>w</mi></mrow><annotation encoding="application/x-tex">得到dq = int(x[0] &lt;&lt; 120) + dqlow</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mopen">[</span><span class="mord">0</span><span class="mclose">]</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span></span></span></span></span></p><p>接下来就是dq泄露<a href="https://lazzzaro.github.io/2020/05/06/crypto-RSA/">RSA | Lazzaro (lazzzaro.github.io)</a></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>q</mi><mo>≡</mo><mi>d</mi><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">dq\equiv d\ \ mod\ \ (q-1)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p>两边同乘e</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>d</mi><mi>q</mi><mo>∗</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>d</mi><mi>q</mi><mo>∗</mo><mi>e</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mi>d</mi><mi>q</mi><mo>∗</mo><mi>e</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>d</mi><mo>∗</mo><mi>e</mi><mo>=</mo><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>k</mi><mo>∗</mo><mi>d</mi><mo>∗</mo><mi>e</mi><mspace linebreak="newline"></mspace><mi>d</mi><mi>q</mi><mo>∗</mo><mi>e</mi><mo>∗</mo><mi>d</mi><mo>∗</mo><mi>e</mi><mo>−</mo><mi>d</mi><mo>∗</mo><mi>e</mi><mo>=</mo><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>d</mi><mo>∗</mo><mi>e</mi><mo>=</mo><mo>−</mo><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>q</mi><mo>∗</mo><mi>e</mi><mo>∗</mo><mi>d</mi><mo>∗</mo><mi>e</mi><mo>≡</mo><mn>1</mn><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>k</mi><mn>1</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mi>d</mi><mi>q</mi><mo>∗</mo><mi>e</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mn>2</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">dq*e \equiv 1\ \ mod\ \ (q-1)\\dq*e-1=k*(q-1)\\(dq*e-1)*d*e=k&#x27;*(q-1)\\k&#x27;=k*d*e\\dq*e*d*e-d*e=k&#x27;*(q-1)\\d*e=-k&#x27;*(q-1)+dq*e*d*e\equiv1\ \ mod\ \ (phi )\\k1*(q-1)+dq*e-1=k2*(p-1)*(q-1)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8852220000000001em;vertical-align:-0.08333em;"></span><span class="mord">−</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p>化简得到</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>k</mi><mn>2</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mo>=</mo><mi>d</mi><mi>q</mi><mo>∗</mo><mi>e</mi></mrow><annotation encoding="application/x-tex">(q-1)*(k2*(q-1)-k1)+1=dq*e</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">e</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo>∵</mo><mi>d</mi><mi>p</mi><mo>&lt;</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><mtext>  </mtext><mo stretchy="false">(</mo><mi>k</mi><mn>2</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>−</mo><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mo>∈</mo><mo stretchy="false">(</mo><mn>0</mn><mo separator="true">,</mo><mi>e</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">\because dp&lt;(p-1)\\\therefore \ \ (k2*(q-1)-k1)\in (0,e)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">∈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">0</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow></mrow><annotation encoding="application/x-tex"></annotation></semantics></math></span><span class="katex-html" aria-hidden="true"></span></span></span></p><p>二：由dq的低位获得q的低位，再根据u，恢复q</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>e</mi><mo>∗</mo><mi>d</mi><mo>≡</mo><mn>1</mn><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>e</mi><mo>∗</mo><mi>d</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo>+</mo><mn>1</mn><mtext>    </mtext><mspace linebreak="newline"></mspace><mtext>两边同时模（</mtext><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∵</mo><mi>d</mi><mi>q</mi><mo>=</mo><mi>d</mi><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo>∴</mo><mtext>  </mtext><mi>e</mi><mo>∗</mo><mi>d</mi><mi>q</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><mi>e</mi><mo>∗</mo><mi>d</mi><mi>q</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo>=</mo><mi>k</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace><mi>q</mi><mtext>是未知，已知</mtext><mi>d</mi><mi>q</mi><mtext>的低</mtext><mn>120</mn><mtext>位</mtext><mspace linebreak="newline"></mspace><mtext>两边同时模上</mtext><msup><mn>2</mn><mn>120</mn></msup><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mi>e</mi><mo>∗</mo><mi>d</mi><mi>q</mi><mo>+</mo><mi>k</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo>=</mo><mi>q</mi><mtext>  </mtext><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mo stretchy="false">(</mo><msup><mn>2</mn><mn>120</mn></msup><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">e*d\equiv1\ \ mod \ \ (phi)\\e*d=k*phi+1\ \ \ \ \\两边同时模（q-1)\\\because dq=d\ \ mod\ \ (q-1)\\\therefore \ \ e*dq=k*(q-1)+1\\e*dq+k-1=k*q\\q是未知，已知dq的低120位\\两边同时模上2^{120}\\(e*dq+k-1)*k^{-1}=q\ \ mod \ \ (2^{120})\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span><span class="mspace"> </span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">（</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∵</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.69224em;vertical-align:0em;"></span><span class="mrel amsrm">∴</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">未</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">低</span><span class="mord">1</span><span class="mord">2</span><span class="mord">0</span><span class="mord cjk_fallback">位</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">时</span><span class="mord cjk_fallback">模</span><span class="mord cjk_fallback">上</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">d</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.864108em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mopen">(</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">1</span><span class="mord mtight">2</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p>k遍历（1，e)，求出 q的低位，coppersmith恢复q</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>u</mi><mo>∗</mo><mi>q</mi><mo>=</mo><mtext>  </mtext><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mtext>  </mtext><mi>p</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>u</mi><mo>∗</mo><mi>q</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>p</mi><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><mi>u</mi><mo>∗</mo><msup><mi>q</mi><mn>2</mn></msup><mo>−</mo><mi>q</mi><mo>=</mo><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mi>p</mi><mspace linebreak="newline"></mspace><msup><mi>k</mi><mo mathvariant="normal" lspace="0em" rspace="0em">′</mo></msup><mo>=</mo><mi>k</mi><mo>∗</mo><mi>q</mi><mspace linebreak="newline"></mspace><mtext>模</mtext><mi>p</mi><mspace linebreak="newline"></mspace><mi>u</mi><mo>∗</mo><msup><mi>q</mi><mn>2</mn></msup><mo>−</mo><mi>q</mi><mo>=</mo><mn>0</mn></mrow><annotation encoding="application/x-tex">u*q=\ \ (mod \ \ p)\\u*q=k*p+1\\u*q^2-q=k&#x27;p\\k&#x27;=k*q\\模p\\u*q^2-q=0</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace"> </span><span class="mspace"> </span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">p</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.996332em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.801892em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.801892em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">′</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">模</span><span class="mord mathdefault">p</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.0585479999999998em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight">2</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">0</span></span></span></span></span></p><p>构造出多项式</p><h2 id="wp">wp</h2><p>方法一：官方解法：coppersmith先恢复dq再由dq泄露，分解n</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmn<span class="token operator">=</span> <span class="token number">151036135413139226687867011199700639084856588533884431118047808395603993635242690166659649156476428533386350427603713487259266502837260466348398817558768025404903682189934563578605367223796247470920497617904900418615352839562681665973088711089128789315193951623751145385357347144960284983398745189236464272961</span><span class="token comment">#print(n.bit_length())</span>e<span class="token operator">=</span> <span class="token number">65537</span>u<span class="token operator">=</span> <span class="token number">11889246144866782519155392157369478059715977597114885585873502852127888907191116911762955888968046505980125449346852147369649024143226438553109462231463320</span>dql_nkbits<span class="token operator">=</span> <span class="token number">120</span>dqlow<span class="token operator">=</span> <span class="token number">1043891160170747082120115133012365745</span>c <span class="token operator">=</span> <span class="token number">96458723724899437870554342796876171017896652413964521193266438981853945238446913579867464909353925601873532290626111170073532116639383463734148270579305067733147411306325252107181823453497914478588342362177625026365513002442585949837516090367171824895036711246039928723021679235071368954348296729327873680822</span><span class="token comment">#思路一coppersmith恢复dp，再dp泄露攻击设x为高位</span><span class="token keyword">def</span> <span class="token function">coppersmith</span><span class="token punctuation">(</span>k<span class="token punctuation">)</span><span class="token punctuation">:</span>    F<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span> PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span>    t <span class="token operator">=</span> e <span class="token operator">*</span> <span class="token punctuation">(</span>x <span class="token operator">*</span> <span class="token number">2</span> <span class="token operator">^</span> <span class="token number">120</span> <span class="token operator">+</span> dqlow<span class="token punctuation">)</span> <span class="token operator">+</span> k <span class="token operator">-</span> <span class="token number">1</span>    f <span class="token operator">=</span>u <span class="token operator">*</span> t <span class="token operator">^</span> <span class="token number">2</span> <span class="token operator">-</span> k <span class="token operator">*</span> t    f <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span>    x0 <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">392</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> x0<span class="token keyword">def</span> <span class="token function">divide_pq</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> dq<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> dq <span class="token operator">%</span> x <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            p <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> dq <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> x <span class="token operator">+</span> <span class="token number">1</span>            <span class="token keyword">if</span> <span class="token punctuation">(</span>n <span class="token operator">%</span> p <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>                <span class="token keyword">continue</span>            q <span class="token operator">=</span> n <span class="token operator">//</span> p            <span class="token keyword">return</span> q<span class="token punctuation">,</span>p<span class="token keyword">for</span> k <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    x0 <span class="token operator">=</span> coppersmith<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>x0<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"x0="</span><span class="token punctuation">,</span>x0<span class="token punctuation">)</span>        dq <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>x0<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">&lt;&lt;</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token operator">+</span> dqlow        <span class="token comment">#恢复dq,dp泄露</span>        p<span class="token punctuation">,</span> q <span class="token operator">=</span> divide_pq<span class="token punctuation">(</span>e<span class="token punctuation">,</span> dq<span class="token punctuation">,</span> n<span class="token punctuation">)</span>        phi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>        d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p="</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"q="</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"d="</span><span class="token punctuation">,</span>d<span class="token punctuation">)</span>        key <span class="token operator">=</span> RSA<span class="token punctuation">.</span>construct<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>             <span class="token keyword">print</span><span class="token punctuation">(</span>PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>key<span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span><span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'flag.enc'</span><span class="token punctuation">,</span> <span class="token string">'rb'</span><span class="token punctuation">)</span><span class="token punctuation">.</span>read<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">break</span>        <span class="token comment">#p=12112790828812363063315417237469719611888243756064158121348026938824270601623590308149025542977097905953795136774300936003505715307199422663647014200158449</span><span class="token comment">#q=12469144192094336933187534132907623337514842804208163244218540727384104398951558782195384932941310035462094951428865175221316720981428462265191789302379089</span><span class="token comment">#d=66980701583036734736960294391078312622827897052791813876359026247918495979594634282982071853820451331222681673373427663666376575651344098661059603483956134335089509308267535247063609325195212704938058730366660923446510585605669518343968880619319880983999690229384618652977238799179660803464509489433199564801</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>方法二：由dq的低位获得q的低位，再根据u，恢复q</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">rom Crypto<span class="token punctuation">.</span>PublicKey <span class="token keyword">import</span> RSA<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Cipher <span class="token keyword">import</span> PKCS1_OAEP<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token comment">#法二：</span><span class="token comment">#先由dq低位求出q的低位</span>q_low<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#使用步长为 2 的目的是只遍历奇数。这是因为偶数除了 2 外都不可能是素数，</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">try</span><span class="token punctuation">:</span>        q0 <span class="token operator">=</span> inverse<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">2</span> <span class="token operator">**</span> <span class="token number">120</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> dqlow <span class="token operator">+</span> i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">%</span> <span class="token number">2</span> <span class="token operator">^</span> <span class="token number">120</span>        q_low<span class="token punctuation">.</span>append<span class="token punctuation">(</span>q0<span class="token punctuation">)</span>    <span class="token keyword">except</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span><span class="token comment">#找到满足条件的q的低位，恢复q</span><span class="token comment">#PR.&lt;x> = Zmod(n)[]</span>roots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token builtin">len</span><span class="token punctuation">(</span>q_low<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tq<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">120</span><span class="token operator">*</span>x <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>q_low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> u <span class="token operator">*</span> tq <span class="token operator">^</span> <span class="token number">2</span> <span class="token operator">-</span> tq    root <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">392</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> root<span class="token punctuation">:</span>        q <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">120</span><span class="token operator">*</span><span class="token builtin">int</span><span class="token punctuation">(</span>root<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>q_low<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span>        p <span class="token operator">=</span> n <span class="token operator">//</span> q        <span class="token keyword">assert</span> p <span class="token operator">*</span> q <span class="token operator">==</span> n        d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p="</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"q="</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"d="</span><span class="token punctuation">,</span> d<span class="token punctuation">)</span>        rsa <span class="token operator">=</span> RSA<span class="token punctuation">.</span>construct<span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        c <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>c<span class="token punctuation">)</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>PKCS1_OAEP<span class="token punctuation">.</span>new<span class="token punctuation">(</span>rsa<span class="token punctuation">)</span><span class="token punctuation">.</span>decrypt<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#new(key): 创建一个新的 PKCS1_OAEP 密码器，key 是一个 RSA 密钥对象。</span>        <span class="token comment">#PKCS1_OAEP 类是用于 RSA 的 OAEP 填充方案的密码器</span>        <span class="token comment">#decrypt(ciphertext): 使用 RSA 私钥解密给定的密文。</span>        <span class="token comment">#p= 12112790828812363063315417237469719611888243756064158121348026938824270601623590308149025542977097905953795136774300936003505715307199422663647014200158449</span>        <span class="token comment">#q= 12469144192094336933187534132907623337514842804208163244218540727384104398951558782195384932941310035462094951428865175221316720981428462265191789302379089</span>        <span class="token comment">#d= 66980701583036734736960294391078312622827897052791813876359026247918495979594634282982071853820451331222681673373427663666376575651344098661059603483956134335089509308267535247063609325195212704938058730366660923446510585605669518343968880619319880983999690229384618652977238799179660803464509489433199564801</span>        <span class="token comment">#b'flag&#123;f1bf5c44-e2b4-424f-baff-b38b73a82e72&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[HZNUCTF2023]easy_dsa</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> <span class="token builtin">hash</span> <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> sage <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secrets <span class="token keyword">import</span> flag<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> invert<span class="token keyword">def</span> <span class="token function">dsa</span><span class="token punctuation">(</span>hmac<span class="token punctuation">,</span> _pk<span class="token punctuation">,</span> _sk<span class="token punctuation">,</span> k<span class="token punctuation">)</span><span class="token punctuation">:</span>    _p<span class="token punctuation">,</span> _q<span class="token punctuation">,</span> _g<span class="token punctuation">,</span> _y <span class="token operator">=</span> _pk    x <span class="token operator">=</span> _sk    r <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>_g<span class="token punctuation">,</span> k<span class="token punctuation">,</span> _p<span class="token punctuation">)</span> <span class="token operator">%</span> _q    s <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>hmac <span class="token operator">+</span> x <span class="token operator">*</span> r<span class="token punctuation">)</span> <span class="token operator">*</span> invert<span class="token punctuation">(</span>k<span class="token punctuation">,</span> _q<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> _q    <span class="token keyword">return</span> <span class="token builtin">int</span><span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">(</span>s<span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>flag<span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">256</span><span class="token punctuation">)</span>g <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>y <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>g<span class="token punctuation">,</span> m<span class="token punctuation">,</span> p<span class="token punctuation">)</span>pk <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">,</span> g<span class="token punctuation">,</span> y<span class="token punctuation">)</span>sk <span class="token operator">=</span> mhm1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>SM3<span class="token punctuation">(</span>default_hm1<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>hm2 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>SM3<span class="token punctuation">(</span>default_hm2<span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>nonce <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">64</span><span class="token punctuation">)</span>xxxx <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(r1, s1) = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>dsa<span class="token punctuation">(</span>hm1<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> nonce<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"(r2, s2) = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>dsa<span class="token punctuation">(</span>hm1<span class="token punctuation">,</span> pk<span class="token punctuation">,</span> sk<span class="token punctuation">,</span> nonce <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">+</span> xxxx<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"p = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>p<span class="token punctuation">&#125;</span></span><span class="token string">\nq = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>q<span class="token punctuation">&#125;</span></span><span class="token string">\ng = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>g<span class="token punctuation">&#125;</span></span><span class="token string">\ny = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>y<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token comment"># (r1, s1) = (43665657147136977892760835332544097729763754398125679419859037123212964274095, 11372107439153704547599978617809027960018057676066118055075660375442954789009)</span><span class="token comment"># (r2, s2) = (29184887007213204285288676779168140587575609668559831035949650649308618592275, 5011738292572181542092375902756977363590922060964162373234404450451520414798)</span><span class="token comment"># p = 31961141251107494919420190534228520246958409864267239760354623819192809291490262139213317490432416411403367763443527530375117617196123131270496004125231254335150221348901335274505489844222882171272650010562960614279185073793274638651086760235178963210965828168433516820007716846876686795459738332444629111764967204355463398049697867061034126529189537688874999118692225915790053920062142349951686250122300061810240375783724631961234942175580462986265098353263395579346466921241016500821787793395554444982717141449909744838267161237273856377774256250949274635575801148994817767751541256849860886577256992383324866941911</span><span class="token comment"># q = 69375998045163628324086568160767337544901252262545889505892695427466730978301</span><span class="token comment"># g = 23095306638137759877487469277470910487928442296144598697677211337473146684728707820084075779044942034329888686699655576145455963231144004571165817481066424910959951439014314776050521403558035997997820617824839889597136772108383034876458141163933312284054415480674388788905935457149956424898637134087874179010376667509489926236214865373552518669840236207944772752416668193786003948717604980584661094548997197117467440864460714843246250800575997370964173558788145639802963655916833143883799542309432910222224223561677245110195809587171802538978009246887077924173034608600837785506594525481696000424121705524449481831586</span><span class="token comment"># y = 30195133393879069638917191223585579396119430591488890396938821804398771785068454607425044458865556053274470709839502680269466948174813926392729790863065933078609827279352860810689776644132512095691760326095517755483748554008211568781998662554432781285208646921699265866446498342049913829592480268053599307065979016922204438675164034767731708343084371572648019835171087671868322447023378942812010740490724160077164191297435291229504616686997442254543493394641023587237077429236872101951650325361004443988267286616139798736713430746804524113024341440435623834197278500144543476528466395780355874841379098027115073850819</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>nss上小师傅的题解![文章 - <a href="https://www.nssctf.cn/note/set/1653">HZNUCTF 2023 preliminary]easyDSA rookie的WriteUp | NSSCTF</a><img src="/post/741e8697/image-20230526100659378-1685066826813-7-1685066913113-9-1685066919116-11.png" alt="image-20230526100659378-1685066826813-7"></p><p>获得h1</p><pre class="line-numbers language-python" data-language="python"><code class="language-python">default_hm2 <span class="token operator">=</span> <span class="token string">b'HZNUCTFRound#1'</span>SM3解密<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span></span></code></pre><pre class="line-numbers language-python" data-language="python"><code class="language-python">default_hm1 <span class="token operator">=</span> <span class="token string">b'2c01fd6136d3f0fd465f23314b50e78bb9d59924b4fe64707b440417583b16de'</span>h1 <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>default_hm1<span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>h1<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><p><img src="/post/741e8697/image-20230526101555277.png" alt="image-20230526101555277"></p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> itertools<span class="token keyword">def</span> <span class="token function">small_roots</span><span class="token punctuation">(</span>f<span class="token punctuation">,</span> bounds<span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token boolean">None</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> <span class="token keyword">not</span> d<span class="token punctuation">:</span>        d <span class="token operator">=</span> f<span class="token punctuation">.</span>degree<span class="token punctuation">(</span><span class="token punctuation">)</span>    R <span class="token operator">=</span> f<span class="token punctuation">.</span>base_ring<span class="token punctuation">(</span><span class="token punctuation">)</span>    N <span class="token operator">=</span> R<span class="token punctuation">.</span>cardinality<span class="token punctuation">(</span><span class="token punctuation">)</span>    f <span class="token operator">/=</span> f<span class="token punctuation">.</span>coefficients<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token number">0</span><span class="token punctuation">)</span>    f <span class="token operator">=</span> f<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>    G <span class="token operator">=</span> Sequence<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>parent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span>m <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        base <span class="token operator">=</span> N <span class="token operator">^</span> <span class="token punctuation">(</span>m <span class="token operator">-</span> i<span class="token punctuation">)</span> <span class="token operator">*</span> f <span class="token operator">^</span> i        <span class="token keyword">for</span> shifts <span class="token keyword">in</span> itertools<span class="token punctuation">.</span>product<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span>d<span class="token punctuation">)</span><span class="token punctuation">,</span> repeat<span class="token operator">=</span>f<span class="token punctuation">.</span>nvariables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>            g <span class="token operator">=</span> base <span class="token operator">*</span> prod<span class="token punctuation">(</span><span class="token builtin">map</span><span class="token punctuation">(</span>power<span class="token punctuation">,</span> f<span class="token punctuation">.</span>variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> shifts<span class="token punctuation">)</span><span class="token punctuation">)</span>            G<span class="token punctuation">.</span>append<span class="token punctuation">(</span>g<span class="token punctuation">)</span>    B<span class="token punctuation">,</span> monomials <span class="token operator">=</span> G<span class="token punctuation">.</span>coefficient_matrix<span class="token punctuation">(</span><span class="token punctuation">)</span>    monomials <span class="token operator">=</span> vector<span class="token punctuation">(</span>monomials<span class="token punctuation">)</span>    factors <span class="token operator">=</span> <span class="token punctuation">[</span>monomial<span class="token punctuation">(</span><span class="token operator">*</span>bounds<span class="token punctuation">)</span> <span class="token keyword">for</span> monomial <span class="token keyword">in</span> monomials<span class="token punctuation">]</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> factor <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token punctuation">:</span>        B<span class="token punctuation">.</span>rescale_col<span class="token punctuation">(</span>i<span class="token punctuation">,</span> factor<span class="token punctuation">)</span>    B <span class="token operator">=</span> B<span class="token punctuation">.</span>dense_matrix<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span>    B <span class="token operator">=</span> B<span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>QQ<span class="token punctuation">)</span>    <span class="token keyword">for</span> i<span class="token punctuation">,</span> factor <span class="token keyword">in</span> <span class="token builtin">enumerate</span><span class="token punctuation">(</span>factors<span class="token punctuation">)</span><span class="token punctuation">:</span>        B<span class="token punctuation">.</span>rescale_col<span class="token punctuation">(</span>i<span class="token punctuation">,</span> <span class="token number">1</span> <span class="token operator">/</span> factor<span class="token punctuation">)</span>    H <span class="token operator">=</span> Sequence<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">,</span> f<span class="token punctuation">.</span>parent<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>change_ring<span class="token punctuation">(</span>QQ<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">for</span> h <span class="token keyword">in</span> <span class="token builtin">filter</span><span class="token punctuation">(</span><span class="token boolean">None</span><span class="token punctuation">,</span> B <span class="token operator">*</span> monomials<span class="token punctuation">)</span><span class="token punctuation">:</span>        H<span class="token punctuation">.</span>append<span class="token punctuation">(</span>h<span class="token punctuation">)</span>        I <span class="token operator">=</span> H<span class="token punctuation">.</span>ideal<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">if</span> I<span class="token punctuation">.</span>dimension<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span>            H<span class="token punctuation">.</span>pop<span class="token punctuation">(</span><span class="token punctuation">)</span>        <span class="token keyword">elif</span> I<span class="token punctuation">.</span>dimension<span class="token punctuation">(</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            roots <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>            <span class="token keyword">for</span> root <span class="token keyword">in</span> I<span class="token punctuation">.</span>variety<span class="token punctuation">(</span>ring<span class="token operator">=</span>ZZ<span class="token punctuation">)</span><span class="token punctuation">:</span>                root <span class="token operator">=</span> <span class="token builtin">tuple</span><span class="token punctuation">(</span>R<span class="token punctuation">(</span>root<span class="token punctuation">[</span>var<span class="token punctuation">]</span><span class="token punctuation">)</span> <span class="token keyword">for</span> var <span class="token keyword">in</span> f<span class="token punctuation">.</span>variables<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>                roots<span class="token punctuation">.</span>append<span class="token punctuation">(</span>root<span class="token punctuation">)</span>            <span class="token keyword">return</span> roots    <span class="token keyword">return</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token punctuation">(</span>r1<span class="token punctuation">,</span> s1<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">43665657147136977892760835332544097729763754398125679419859037123212964274095</span><span class="token punctuation">,</span> <span class="token number">11372107439153704547599978617809027960018057676066118055075660375442954789009</span><span class="token punctuation">)</span><span class="token punctuation">(</span>r2<span class="token punctuation">,</span> s2<span class="token punctuation">)</span> <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token number">29184887007213204285288676779168140587575609668559831035949650649308618592275</span><span class="token punctuation">,</span> <span class="token number">5011738292572181542092375902756977363590922060964162373234404450451520414798</span><span class="token punctuation">)</span>p <span class="token operator">=</span> <span class="token number">31961141251107494919420190534228520246958409864267239760354623819192809291490262139213317490432416411403367763443527530375117617196123131270496004125231254335150221348901335274505489844222882171272650010562960614279185073793274638651086760235178963210965828168433516820007716846876686795459738332444629111764967204355463398049697867061034126529189537688874999118692225915790053920062142349951686250122300061810240375783724631961234942175580462986265098353263395579346466921241016500821787793395554444982717141449909744838267161237273856377774256250949274635575801148994817767751541256849860886577256992383324866941911</span>q <span class="token operator">=</span> <span class="token number">69375998045163628324086568160767337544901252262545889505892695427466730978301</span>g <span class="token operator">=</span> <span class="token number">23095306638137759877487469277470910487928442296144598697677211337473146684728707820084075779044942034329888686699655576145455963231144004571165817481066424910959951439014314776050521403558035997997820617824839889597136772108383034876458141163933312284054415480674388788905935457149956424898637134087874179010376667509489926236214865373552518669840236207944772752416668193786003948717604980584661094548997197117467440864460714843246250800575997370964173558788145639802963655916833143883799542309432910222224223561677245110195809587171802538978009246887077924173034608600837785506594525481696000424121705524449481831586</span>y <span class="token operator">=</span> <span class="token number">30195133393879069638917191223585579396119430591488890396938821804398771785068454607425044458865556053274470709839502680269466948174813926392729790863065933078609827279352860810689776644132512095691760326095517755483748554008211568781998662554432781285208646921699265866446498342049913829592480268053599307065979016922204438675164034767731708343084371572648019835171087671868322447023378942812010740490724160077164191297435291229504616686997442254543493394641023587237077429236872101951650325361004443988267286616139798736713430746804524113024341440435623834197278500144543476528466395780355874841379098027115073850819</span>h1<span class="token operator">=</span><span class="token number">19905280947443115569469777697852124038269468456842113763109865796452965095134</span><span class="token comment">#设两个参数</span>p<span class="token punctuation">.</span><span class="token operator">&lt;</span>k1<span class="token punctuation">,</span>x0<span class="token operator">>=</span>PolynomialRing<span class="token punctuation">(</span>Zmod<span class="token punctuation">(</span>q<span class="token punctuation">)</span><span class="token punctuation">)</span>f<span class="token operator">=</span><span class="token punctuation">(</span>s1<span class="token operator">*</span>k1<span class="token operator">-</span>h1<span class="token punctuation">)</span><span class="token operator">*</span>inverse<span class="token punctuation">(</span>r1<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">-</span><span class="token punctuation">(</span>s2<span class="token operator">*</span>k1<span class="token operator">**</span><span class="token number">2</span><span class="token operator">+</span>s2<span class="token operator">*</span>x0<span class="token operator">-</span>h1<span class="token punctuation">)</span><span class="token operator">*</span>inverse<span class="token punctuation">(</span>r2<span class="token punctuation">,</span>q<span class="token punctuation">)</span>roots <span class="token operator">=</span> small_roots<span class="token punctuation">(</span>f<span class="token punctuation">,</span> <span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">64</span><span class="token punctuation">,</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">20</span><span class="token punctuation">)</span><span class="token punctuation">,</span> m<span class="token operator">=</span><span class="token number">1</span><span class="token punctuation">,</span> d<span class="token operator">=</span><span class="token number">2</span><span class="token punctuation">)</span>k1<span class="token punctuation">,</span>x0<span class="token operator">=</span>roots<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>x<span class="token operator">=</span><span class="token punctuation">(</span>s1<span class="token operator">*</span>k1<span class="token operator">-</span>h1<span class="token punctuation">)</span><span class="token operator">*</span>inverse<span class="token punctuation">(</span>r1<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token operator">%</span>qflag<span class="token operator">=</span><span class="token builtin">hex</span><span class="token punctuation">(</span>x<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token builtin">bytes</span><span class="token punctuation">.</span>fromhex<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#b'JU57_@N_e@SY_5QU4RE_K!'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[DASCTF省赛2022]rssssssaaaa</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagp <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">65537</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n ="</span><span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c ="</span><span class="token punctuation">,</span> c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"p ="</span><span class="token punctuation">,</span> p<span class="token operator">&amp;</span><span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">560</span><span class="token punctuation">)</span> <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#得到了560位全为1的二进制数，保留 p 的二进制表示的低 560 位</span><span class="token comment">#n = 21595945409392994055049935446570173194131443801801845658035469673666023560594683551197545038999238700810747167248724184844583697034436158042499504967916978621608536213230969406811902366916932032050583747070735750876593573387957847683066895725722366706359818941065483471589153682177234707645138490589285500875222568286916243861325846262164331536570517513524474322519145470883352586121892275861245291051589531534179640139953079522307426687782419075644619898733819937782418589025945603603989100805716550707637938272890461563518245458692411433603442554397633470070254229240718705126327921819662662201896576503865953330533</span><span class="token comment">#c = 1500765718465847687738186396037558689777598727005427859690647229619648539776087318379834790898189767401195002186003548094137654979353798325221367220839665289140547664641612525534203652911807047718681392766077895625388064095459224402032253429115181543725938853591119977152518616563668740574496233135226296439754690903570240135657268737729815911404733486976376064060345507410815912670147466261149162470191619474107592103882894806322239740349433710606063058160148571050855845964674224651003832579701204330216602742005466066589981707592861990283864753628591214636813639371477417319679603330973431803849304579330791040664</span><span class="token comment"># p = 1426723861968216959675536598409491243380171101180592446441649834738166786277745723654950385796320682900434611832789544257790278878742420696344225394624591657752431494779</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>本来想写</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>=</mo><mi>p</mi><mo>+</mo><mi>x</mi><mo>∗</mo><msup><mn>2</mn><mn>560</mn></msup></mrow><annotation encoding="application/x-tex">f=p+x*2^{560}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8641079999999999em;vertical-align:0em;"></span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.8641079999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">5</span><span class="mord mtight">6</span><span class="mord mtight">0</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>结果result为空，因为低位太少了，要求的x太大 了</p><p>已知了p的一部分(低位部分)，但是缺少了另一部分(高位部分)。为了尝试恢复正确的p，我们需要尝试不同的偏移量。<br>偏移量可以看作是一个参数，它确定了在尝试恢复p时我们将考虑的可能取值范围。通过尝试不同的偏移量，我们可以生成多个可能的高位部分的取值，并将其与已知的低位部分组合起来。</p><p>已知p的低低（560位），用i 控制偏移量，构造多项式,coppersmith,求出p</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>f</mi><mo>=</mo><mi>p</mi><mo>+</mo><mi>i</mi><mo>∗</mo><mn>2</mn><mo>∗</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>560</mn><mo stretchy="false">)</mo><mo>+</mo><mi>x</mi><mo>∗</mo><mn>2</mn><mo>∗</mo><mo>∗</mo><mo stretchy="false">(</mo><mn>560</mn><mo>+</mo><mi>i</mi><mi mathvariant="normal">.</mi><mi>n</mi><mi>b</mi><mi>i</mi><mi>t</mi><mi>s</mi><mo stretchy="false">(</mo><mo stretchy="false">)</mo><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">f=p + i*2**(560) + x*2**(560+i.nbits())</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.65952em;vertical-align:0em;"></span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∗</span><span class="mopen">(</span><span class="mord">5</span><span class="mord">6</span><span class="mord">0</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∗</span><span class="mopen">(</span><span class="mord">5</span><span class="mord">6</span><span class="mord">0</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord">.</span><span class="mord mathdefault">n</span><span class="mord mathdefault">b</span><span class="mord mathdefault">i</span><span class="mord mathdefault">t</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mclose">)</span><span class="mclose">)</span></span></span></span></span></p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> tqdmn <span class="token operator">=</span> <span class="token number">21595945409392994055049935446570173194131443801801845658035469673666023560594683551197545038999238700810747167248724184844583697034436158042499504967916978621608536213230969406811902366916932032050583747070735750876593573387957847683066895725722366706359818941065483471589153682177234707645138490589285500875222568286916243861325846262164331536570517513524474322519145470883352586121892275861245291051589531534179640139953079522307426687782419075644619898733819937782418589025945603603989100805716550707637938272890461563518245458692411433603442554397633470070254229240718705126327921819662662201896576503865953330533</span>c <span class="token operator">=</span> <span class="token number">1500765718465847687738186396037558689777598727005427859690647229619648539776087318379834790898189767401195002186003548094137654979353798325221367220839665289140547664641612525534203652911807047718681392766077895625388064095459224402032253429115181543725938853591119977152518616563668740574496233135226296439754690903570240135657268737729815911404733486976376064060345507410815912670147466261149162470191619474107592103882894806322239740349433710606063058160148571050855845964674224651003832579701204330216602742005466066589981707592861990283864753628591214636813639371477417319679603330973431803849304579330791040664</span>p <span class="token operator">=</span> <span class="token number">1426723861968216959675536598409491243380171101180592446441649834738166786277745723654950385796320682900434611832789544257790278878742420696344225394624591657752431494779</span><span class="token comment">#设高位为x</span>PR<span class="token punctuation">.</span><span class="token operator">&lt;</span> x <span class="token operator">></span> <span class="token operator">=</span> Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">.</span>tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">**</span><span class="token number">10</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    i <span class="token operator">=</span> Integer<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    p <span class="token operator">=</span> <span class="token number">1426723861968216959675536598409491243380171101180592446441649834738166786277745723654950385796320682900434611832789544257790278878742420696344225394624591657752431494779</span>    f <span class="token operator">=</span> p <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">560</span><span class="token punctuation">)</span> <span class="token operator">+</span> x<span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">560</span><span class="token operator">+</span>i<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    res <span class="token operator">=</span> f<span class="token punctuation">.</span>monic<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X<span class="token operator">=</span><span class="token number">2</span><span class="token operator">^</span><span class="token punctuation">(</span><span class="token number">1024</span><span class="token operator">-</span><span class="token number">560</span><span class="token operator">-</span>i<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">,</span> beta<span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">)</span>    <span class="token keyword">if</span> res<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>res<span class="token punctuation">)</span>        p <span class="token operator">=</span> p <span class="token operator">+</span> i<span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">560</span><span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token builtin">int</span><span class="token punctuation">(</span>res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token number">2</span><span class="token operator">**</span><span class="token punctuation">(</span><span class="token number">560</span><span class="token operator">+</span>i<span class="token punctuation">.</span>nbits<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">)</span>        q <span class="token operator">=</span> n <span class="token operator">//</span> p        <span class="token keyword">if</span>  p <span class="token operator">*</span> q<span class="token operator">==</span>n<span class="token punctuation">:</span>            d <span class="token operator">=</span> inverse<span class="token punctuation">(</span><span class="token number">65537</span><span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#DASCTF&#123;ce73935b2e83a78aa5079a9e59ae4980&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]Where is P?</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>m<span class="token operator">=</span>bytes_to_long<span class="token punctuation">(</span><span class="token string">b'XXXX'</span><span class="token punctuation">)</span>e<span class="token operator">=</span><span class="token number">65537</span>p<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>q<span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">1024</span><span class="token punctuation">)</span>n<span class="token operator">=</span>p<span class="token operator">*</span>q<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token punctuation">)</span>c<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>P<span class="token operator">=</span>p<span class="token operator">>></span><span class="token number">340</span><span class="token keyword">print</span><span class="token punctuation">(</span>P<span class="token punctuation">)</span>a<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>P<span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"a="</span><span class="token punctuation">,</span>a<span class="token punctuation">)</span><span class="token comment">#n= 24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span><span class="token comment">#c= 6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724</span><span class="token comment">#a= 22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>爆破P，开三次，求出P</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>P</mi><mo>=</mo><mi>p</mi><mo>&gt;</mo><mo>&gt;</mo><mn>340</mn></mrow><annotation encoding="application/x-tex">P=p&gt;&gt;340</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.13889em;">P</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.7335400000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span></span><span class="base"><span class="strut" style="height:0.5782em;vertical-align:-0.0391em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">3</span><span class="mord">4</span><span class="mord">0</span></span></span></span></span></p><p>可知p的高位泄露（1024-340= 684 位），Coppersmith恢复p</p><h2 id="wp">WP</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>e<span class="token operator">=</span><span class="token number">65537</span>n<span class="token operator">=</span> <span class="token number">24479907029118467064460793139240403258697681144532146836881997837526487637306591893357774423547391867013441147680031968367449693796015901951120514250935018725570026327610524687128709707340727799633444550317834481416507364804274266363478822257132586592232042108076935945436358397787891169163821061005102693505011197453089873909085170776511350713452580692963748763166981047023704528272230392479728897831538235554137129584665886878574314566549330671483636900134584707867654841021494106881794644469229030140144595938886437242375435914268001721437309283611088568191856208951867342004280893021653793820874747638264412653721</span>c<span class="token operator">=</span> <span class="token number">6566517934961780069851397787369134601399136324586682773286046135297104713708615112015588908759927424841719937322574766875308296258325687730658550956691921018605724308665345526807393669538103819281108643141723589363068859617542807984954436567078438099854340705208503317269397632214274507740533638883597409138972287275965697689862321166613821995226000320597560745749780942467497435742492468670016480112957715214640939272457886646483560443432985954141177463448896521810457886108311082101521263110578485768091003174683555938678346359150123350656418123918738868598042533211541966786594006129134087145798672161268647536724</span>a<span class="token operator">=</span> <span class="token number">22184346235325197613876257964606959796734210361241668065837491428527234174610482874427139453643569493268653377061231169173874401139203757698022691973395609028489121048788465356158531144787135876251872262389742175830840373281181905217510352227396545981674450409488394636498629147806808635157820030290630290808150235068140864601098322473572121965126109735529553247807211711005936042322910065304489093415276688746634951081501428768318098925390576594162098506572668709475140964400043947851427774550253257759990959997691631511262768785787474750441024242552456956598974533625095249106992723798354594261566983135394923063605</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">100000</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>i <span class="token operator">*</span> n <span class="token operator">+</span> a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token operator">==</span><span class="token boolean">True</span><span class="token punctuation">:</span>        P <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>i <span class="token operator">*</span> n <span class="token operator">+</span> a<span class="token punctuation">,</span> <span class="token number">3</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>        <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'P=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>P<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span>        <span class="token keyword">break</span>p4<span class="token operator">=</span><span class="token number">66302204855869216148926460265779698576660998574555407124043768605865908069722142097621926304390549253688814246272903647124801382742681337653915017783954290069842646020090511605930590064443141710086879668946</span><span class="token triple-quoted-string string">'''pbits = 1024kbits = 340print(p4.nbits())p4 = p4 &lt;&lt; kbitsPR.&lt;x> = PolynomialRing(Zmod(n))f = x + p4roots = f.small_roots(X=2^kbits, beta=0.4)#经过以上一些函数处理后，n和p已经被转化为10进制if roots:   p = p4+int(roots[0])   print("p: "+str(p))'''</span>p<span class="token operator">=</span><span class="token number">148500014720728755901835170447203030242113125689825190413979909224639701026120883281188694701625473553602289432755479244507504340127322979884849883842306663453018960250560834067472479033116264539127330613635903666209920113813160301513820286874124210921593865507657148933555053341577090100101684021531775022459</span>q<span class="token operator">=</span>n<span class="token operator">//</span>pphi<span class="token operator">=</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>d<span class="token operator">=</span>inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi<span class="token punctuation">)</span>m<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span>d<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#LitCTF&#123;Y0U_hAV3_g0T_Th3_r1ghT_AnsW3r&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[LitCTF 2023]baby_xor</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">assert</span> <span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token operator">==</span><span class="token number">32</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p<span class="token operator">*</span>qe <span class="token operator">=</span> <span class="token number">65537</span>c1 <span class="token operator">=</span> p<span class="token operator">^</span>mc2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'n = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>n<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'c1 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c1<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'c2 = </span><span class="token interpolation"><span class="token punctuation">&#123;</span>c2<span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">"""n = 139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407c1 = 11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996c2 = 112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601"""</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p><code>p</code>为<code>512bit</code>，<code>p</code>的高位至少泄露<code>264bit</code>时候，环多项式方程在模n情况下有解,还有8bit，想到头为&quot;LitCTF{&quot;</p><p>kbits=512-256-56=200</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdme <span class="token operator">=</span> <span class="token number">65537</span>n <span class="token operator">=</span> <span class="token number">139167681803392690594490403105432649693546256181767408269202101512534988406137879788255103631885736461742577594980136624933914700779445704490217419248411578290305101891222576080645870988658334799437317221565839991979543660824098367011942169305111105129234902517835649895908656770416774539906212596072334423407</span>c1 <span class="token operator">=</span> <span class="token number">11201139662236758800406931253538295757259990870588609533820056210585752522925690049252488581929717556881067021381940083808024384402885422258545946243513996</span>c2 <span class="token operator">=</span> <span class="token number">112016152270171196606652761990170033221036025260883289104273504703557624964071464062375228351458191745141525003775876044271210498526920529385038130932141551598616579917681815276713386113932345056134302042399379895915706991873687943357627747262597883603999621939794450743982662393955266685255577026078256473601</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span><span class="token string">b'LitCTF&#123;'</span> <span class="token operator">+</span> <span class="token string">b'\x00'</span><span class="token operator">*</span><span class="token number">25</span><span class="token punctuation">)</span>p_high <span class="token operator">=</span> <span class="token punctuation">(</span>c1<span class="token operator">^</span><span class="token operator">^</span>m<span class="token punctuation">)</span><span class="token operator">>></span><span class="token number">200</span>PR<span class="token punctuation">.</span><span class="token operator">&lt;</span>x<span class="token operator">></span> <span class="token operator">=</span>Zmod<span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token punctuation">]</span>f <span class="token operator">=</span> <span class="token punctuation">(</span>p_high <span class="token operator">&lt;&lt;</span> <span class="token number">200</span><span class="token punctuation">)</span> <span class="token operator">+</span> xres <span class="token operator">=</span> f<span class="token punctuation">.</span>small_roots<span class="token punctuation">(</span>X <span class="token operator">=</span> <span class="token number">2</span><span class="token operator">^</span><span class="token number">200</span> <span class="token punctuation">,</span>beta <span class="token operator">=</span><span class="token number">0.4</span><span class="token punctuation">,</span> epsilon<span class="token operator">=</span><span class="token number">0.01</span><span class="token punctuation">)</span>c <span class="token operator">=</span> res<span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span> <span class="token operator">+</span> <span class="token punctuation">(</span>p_high<span class="token operator">&lt;&lt;</span><span class="token number">200</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c1<span class="token punctuation">)</span> <span class="token operator">^</span><span class="token operator">^</span> <span class="token builtin">int</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#LitCTF&#123;oh!!!!coppersmith_is_fun&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 练习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> copper </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>二次剩余练习</title>
      <link href="/post/ec93dc42.html"/>
      <url>/post/ec93dc42.html</url>
      
        <content type="html"><![CDATA[<h1>[HNCTF 2022 WEEK4]square</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>Padding <span class="token keyword">import</span> pad<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span>flag <span class="token operator">=</span> pad<span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>m <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">.</span>from_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">,</span><span class="token string">'big'</span><span class="token punctuation">)</span>n <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">16</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">with</span> <span class="token builtin">open</span><span class="token punctuation">(</span><span class="token string">'output.txt'</span><span class="token punctuation">,</span><span class="token string">'w'</span><span class="token punctuation">)</span> <span class="token keyword">as</span> f<span class="token punctuation">:</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'n = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>n<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'e = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span><span class="token punctuation">)</span>    f<span class="token punctuation">.</span>write<span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'c = </span><span class="token interpolation"><span class="token punctuation">&#123;</span><span class="token builtin">hex</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">&#125;</span></span><span class="token string">\n'</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''n = 0xcaea4e2db0dc68029999cdad792fa1f9142117163af28f3230f7500ef748841554141ef35555ba23b95dc87f4c83f75dad14b6204dd4907fb75650fa7799def911f077b945f359e345bb9350c4a8268906c547e95e5819ef44ff124566a88fa2174ddfe3e895016df0036b59a50c6efb78724bde5d16a8a5cae45c918f329e462d10abe56ecdfae95bd13665260d0e8b648540d11f2447eef9aef3ea370faaecaab4c82ec1fe2bc83f2ce1b2793d95187eb2637e75700ba9745c253e928a4a603139dbf6b8bbf8111900a58be21a269992a9744c0284cf8f3ad7a3b95106d17af6baceac1acf543e425dc6317ab7f799a8ce19633b22e709eacb5d74ce4b56f9e = 0x10c = 0x2700a92e463d1c5da073b38d075a2da57c89ff9d658066c0bd38391cc60259a4fc992f1a6f1c5756d6e5934831fc0fbf7bfd85607f0d18781d30a4ab485e119af4f08b5fe7bf927aeaf7572b05dfec764d6ddda2b247b9f6b731300ece4209606d94c5708388d6e8efc1fa6e9c0cdda41cee95eb4a6b053b862fc43e55648973863f9874ee79ce4408277c9dc38fb26b44880e58f054b957c64fcf0d39c1fd496ad2fc5f5e5e70ba41422a4d945da299b5a695a4b7013a1f9ae1b629e395ffb0942d783d6e6be1f0888dfcb02d0aa1e9b7076e952a339bdc60f044f598afa2da28a4d7f094b959c8a8fefd5a11d10971cd681722f6868cf15a200cb910c591e1'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>#有限域开方，C=m^e(mod n)----&gt;f(x)=x^e-c求出所有可能的根</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#sage</span><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">import</span> gmpy2<span class="token triple-quoted-string string">"""n = 0xcaea4e2db0dc68029999cdad792fa1f9142117163af28f3230f7500ef748841554141ef35555ba23b95dc87f4c83f75dad14b6204dd4907fb75650fa7799def911f077b945f359e345bb9350c4a8268906c547e95e5819ef44ff124566a88fa2174ddfe3e895016df0036b59a50c6efb78724bde5d16a8a5cae45c918f329e462d10abe56ecdfae95bd13665260d0e8b648540d11f2447eef9aef3ea370faaecaab4c82ec1fe2bc83f2ce1b2793d95187eb2637e75700ba9745c253e928a4a603139dbf6b8bbf8111900a58be21a269992a9744c0284cf8f3ad7a3b95106d17af6baceac1acf543e425dc6317ab7f799a8ce19633b22e709eacb5d74ce4b56f9e = 0x10c = 0x2700a92e463d1c5da073b38d075a2da57c89ff9d658066c0bd38391cc60259a4fc992f1a6f1c5756d6e5934831fc0fbf7bfd85607f0d18781d30a4ab485e119af4f08b5fe7bf927aeaf7572b05dfec764d6ddda2b247b9f6b731300ece4209606d94c5708388d6e8efc1fa6e9c0cdda41cee95eb4a6b053b862fc43e55648973863f9874ee79ce4408277c9dc38fb26b44880e58f054b957c64fcf0d39c1fd496ad2fc5f5e5e70ba41422a4d945da299b5a695a4b7013a1f9ae1b629e395ffb0942d783d6e6be1f0888dfcb02d0aa1e9b7076e952a339bdc60f044f598afa2da28a4d7f094b959c8a8fefd5a11d10971cd681722f6868cf15a200cb910c591e1R.&lt;x> = Zmod(n)[]#基于模 n 意义下的整数环的多项式环f(x)=x^e-cf=f.monic()#归一化，使得系数为1，有限域上的除法运算和实数域上的除法运算有所不同，所以归一化后的多项式更容易处理。mm = f.roots()m=[]for i in mm[0]:    m.append(i)print(m)"""</span>m<span class="token operator">=</span><span class="token punctuation">[</span><span class="token number">25615677894578755047156343445844436265410029831929516816331615976442311723531561327119120421902137698702653352454485089340848821437391616202141872920071595012903043917129450415132281907851460389644978646684609345443875666422198491448869630433730250869349508030370580903892239207884756374806258109492943540694025256336359221536523445463701649424494112650847740223587312753305758484739299091282445005021428673424732397006712358416313791876278338631941370485282183820941394817190803527812730459595063525543676864011831621261546685501816080758863765608285760956408604370742317675113279260023090820056964546946448729327594</span><span class="token punctuation">,</span> <span class="token number">24072367155045049121538350559452436123760625674850036887400917611963001043425277658590765669098038279032511209656766731851112555056082333560946068560958136635450354184400845466823159542498565735578284414677938847565345435268619941467830506642234170223615472540060479482250736366661339782825842222750498295373524349825492103059453842032165892523230350122381720065998495626851241149502139264262580869523661467741485311344845519374629180329037981137465862020038414285296394747359446242328488668743848790524262574489753290227188557314524093509983688354857005768464595599040661333002861275422817830930045336538934525600036</span><span class="token punctuation">,</span> <span class="token number">22410284915869332915517353475405301781361874997511620014765307716896609134768752598582584704665037725485578318861190319579404022449775594129425860979978888272443446324093514666314685424695000601786686561006052411264877076748054463659902146625722029484456473027960815036305882742747518983542532772826030995019547403388699014520255435093536041121723793417289085198882108642039061716629900663673185654638085326455126099981185733763692003629409489559712215078372884665625160603972308815617077592138575143204160714378785745066118022886827674355196815158593721675680283188298853358878159695139190175292207533127255034143712</span><span class="token punctuation">,</span> <span class="token number">19073979249275923038893403197873802702942330898221412935002649745044628810289760160906684289522634756719764289365141953863154441618860322921339033977398137618850126299000852728420859130729324165431279514548481361259733142809124530477420924010397665965873357195354849848588229804376977984636683366863855736325383167291647351033039353473600211555662607490573852684908975665488806129740839801624701017800394009286759153911158126133388953551250607486734408238163212404235716911901582709861984044176063401493384378563087390984887945676907220888380393998115118953005740848277298983697518540266717111840324178318373259180622</span><span class="token punctuation">,</span> <span class="token number">6541698645302832008262940247970633562467698933708103881328966231397682913241801166212436132379502941982889063089343135477694379818531293280802838942673457394052917618128597686711422777122136224213699132136127984184142523613073960971448706423332584903476150835015731055304009403507778390169574742629087804368703460732998669837597738720119482937031238843681810088915673826941865000058898348157163412745731930147221176216054781442545666046969521342926260834211384338749444032842775055037996717706324772768300639435331444465728608728138351824860891626691575771833819130630414042360017020843812450263396637265856188996779</span><span class="token punctuation">,</span> <span class="token number">3205392978709422131638989970439134484048154834417896801566308259545702588762808728536535717237099973217075033593294769761444798987616022072716011940092706740459597593035935748817596483156459787858292085678556934178998589674144027788967483808008221384893035002409765867586356465137237391263725336666912545674539224635947006350381657100183653370970052916966577574942540850391609413169837486108678775908040612978854230146027173812242615968810639269948453994001712077360000340772048949282903169743813031057524303619633090384498531518217898358044470466212973049159276790608859667179375865971339386811513282456974414033689</span><span class="token punctuation">,</span> <span class="token number">1543310739533705925617992886392000141649404157079479928930698364479310680106283668528354752804099419670142142797718357489736266381309282641195804359113458377452689732728604948309122365352894654066694232006670497878530231153578549981039123791496080645734035490310101421641502841223416591980415886742445245320562278199153917811183250161553801969463496211873942707826153865579429980297598885519283561022464471692495018782367388201305439269182147692194807052336182457688766197384911522571492093138539383737422443508665545223427997090521479203257597269949688956374964379867051693054674285687711731173675479045294922577365</span><span class="token punctuation">,</span> <span class="token number">61371688286799334113646730018045068199733683407922550237336739124912645060439058499419425524697266009247933120500549159620827721941790197719298587092412922043766127553554237087250302287324648718008153986587214189069868903229491954377520016520933768430955608165395350944256301087438742046756268637780718849807</span><span class="token punctuation">]</span><span class="token comment">#res是f(x)的所有根,</span><span class="token comment">#f.roots() 的返回值是一个长度为 n 的列表，其中每个元素是一个元组，表示 f 的一个根和其重数。</span><span class="token comment"># 例如，如果 f 的一个根为 a，重数为 2，那么该元组的形式就是 (a, 2)。</span><span class="token keyword">for</span> i <span class="token keyword">in</span> m<span class="token punctuation">:</span>    flag<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span>i<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token string">b'NSSCTF'</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">break</span><span class="token comment">#b'Welcome to HNCTF, Hope you have a nice experience. This is your flag:\nNSSCTF&#123;ore_wa_ningen_O_yameru_zo!!!JOJO!!!&#125;\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f\x0f'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[HZNUCTF2023] 决赛 signin</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#[HZNUCTF 2023 final]checkin</span><span class="token keyword">import</span> os<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flag<span class="token punctuation">,</span> hintm <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag <span class="token operator">+</span> os<span class="token punctuation">.</span>urandom<span class="token punctuation">(</span><span class="token number">50</span><span class="token punctuation">)</span><span class="token punctuation">)</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">500</span><span class="token punctuation">)</span>n <span class="token operator">=</span> p <span class="token operator">*</span> qh <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>q <span class="token operator">-</span> <span class="token number">2022</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">2023</span><span class="token punctuation">)</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token keyword">assert</span> h <span class="token operator">==</span> <span class="token builtin">pow</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token punctuation">,</span> hint<span class="token punctuation">,</span> p<span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">1</span> <span class="token operator">&lt;&lt;</span> <span class="token number">24_000</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>h <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f'</span><span class="token interpolation"><span class="token punctuation">&#123;</span>hint <span class="token operator">=</span> <span class="token punctuation">&#125;</span></span><span class="token string">'</span></span><span class="token punctuation">)</span><span class="token comment"># n = 22114546923564420607945063747927422619774890007937503484905798897563036431278699718161460968350749338680452479484253816646632515078192048118109272532310403715802657061990320170724360874028667484527150185159662403573637809180151665727445208585725264186578429094937215068881079399747998551453944363665401263</span><span class="token comment"># c = 7274219309267176700435453490636404568410293850833252412471984274955007037941820465929958008672185817002749418809077052781794306899476543760452010370102811167685901654480233874375880047900499814304539829706786470978714629827690730256369200773772396109793338097451559255985268375731804819829315168807228186</span><span class="token comment"># h = 1463929459818798711929811606552273520156490689917243949474579232718301828387871678397965433435537694532920957475947201372279363554005600100100224291888130</span><span class="token comment"># hint = 5610276127312766429915480651516095336201056367031530733662980757514427535721885723009367286870294772595629284861923351543396909892645845139050780691701736</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>由hint可算出p,q</p><p><img src="/post/ec93dc42/07c4b7302a8449722a99ffd7d4abe9c.jpg" alt="07c4b7302a8449722a99ffd7d4abe9c"></p><p>求出p,q,发现</p><p>p%4=1  二次剩余，用Cipolla算法解，由于e = 1 &lt;&lt; 24_000，进行24000次迭代二次剩余</p><p>q%4=3  rabin算法，24000次</p><p>将所求的的解（分别在模p,q下），利用中国剩余定理求线性同余方程</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytes<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdmn <span class="token operator">=</span> <span class="token number">22114546923564420607945063747927422619774890007937503484905798897563036431278699718161460968350749338680452479484253816646632515078192048118109272532310403715802657061990320170724360874028667484527150185159662403573637809180151665727445208585725264186578429094937215068881079399747998551453944363665401263</span>c <span class="token operator">=</span> <span class="token number">7274219309267176700435453490636404568410293850833252412471984274955007037941820465929958008672185817002749418809077052781794306899476543760452010370102811167685901654480233874375880047900499814304539829706786470978714629827690730256369200773772396109793338097451559255985268375731804819829315168807228186</span>h <span class="token operator">=</span> <span class="token number">1463929459818798711929811606552273520156490689917243949474579232718301828387871678397965433435537694532920957475947201372279363554005600100100224291888130</span>hint <span class="token operator">=</span> <span class="token number">5610276127312766429915480651516095336201056367031530733662980757514427535721885723009367286870294772595629284861923351543396909892645845139050780691701736</span>e <span class="token operator">=</span> <span class="token number">1</span><span class="token operator">&lt;&lt;</span><span class="token number">24000</span><span class="token comment">#求p,q</span>q<span class="token operator">=</span>hint<span class="token operator">//</span><span class="token number">2024</span><span class="token operator">+</span><span class="token number">2022</span>p<span class="token operator">=</span>n<span class="token operator">//</span>q<span class="token keyword">print</span><span class="token punctuation">(</span>p<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#1 二次剩余</span><span class="token keyword">print</span><span class="token punctuation">(</span>q<span class="token operator">%</span><span class="token number">4</span><span class="token punctuation">)</span><span class="token comment">#3 rabin</span><span class="token keyword">def</span> <span class="token function">square_root_of_quadratic_residue</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> modulo<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Square root of quadratic residue    Solve the square root of quadratic residue using Cipolla's algorithm with Legendre symbol    Returns:        int -- if n is a quadratic residue,                   return x, such that x^&#123;2&#125; = n (mod modulo)               otherwise, return -1    """</span>    <span class="token keyword">if</span> modulo <span class="token operator">==</span> <span class="token number">2</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span>    <span class="token keyword">if</span> n <span class="token operator">%</span> modulo <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">0</span>    <span class="token comment">#定义勒让德符号</span>    Legendre <span class="token operator">=</span> <span class="token keyword">lambda</span> n<span class="token punctuation">:</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>n<span class="token punctuation">,</span> modulo <span class="token operator">-</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">,</span> modulo<span class="token punctuation">)</span>    <span class="token keyword">if</span> Legendre<span class="token punctuation">(</span>n<span class="token punctuation">)</span> <span class="token operator">==</span> modulo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token operator">-</span><span class="token number">1</span>    t <span class="token operator">=</span> <span class="token number">0</span>    <span class="token comment">#找到一个数t，使得(a^2-n)//p=-1</span>    <span class="token keyword">while</span> Legendre<span class="token punctuation">(</span>t <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">!=</span> modulo <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">:</span>        t <span class="token operator">+=</span> <span class="token number">1</span>    w <span class="token operator">=</span> <span class="token punctuation">(</span>t <span class="token operator">**</span> <span class="token number">2</span> <span class="token operator">-</span> n<span class="token punctuation">)</span> <span class="token operator">%</span> modulo<span class="token comment">#求出方程的解</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>generate_quadratic_field<span class="token punctuation">(</span>w<span class="token punctuation">,</span> modulo<span class="token punctuation">)</span><span class="token punctuation">(</span>t<span class="token punctuation">,</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">**</span> <span class="token punctuation">(</span>modulo <span class="token operator">+</span> <span class="token number">1</span> <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">.</span>x    <span class="token comment">#generate_quadratic_field(w, modulo)表示返回一个二次域数类，然后通过 (t, 1) 生成一个二次域数类的实例，即 t + sqrt(w)</span><span class="token comment">#二次域数类可以将一个数表示成 a + b*sqrt(d) 的形式，其中 a 和 b 是整数，sqrt(d) 表示一个不能化为整数的有理数，</span><span class="token comment"># 也就是二次无理数，即在实数域中无法表示成有理数的数。</span><span class="token comment"># 二次域数类实现了基本的算术运算，例如加法、乘法和幂运算，同时也支持在模意义下的运算</span><span class="token comment">#定义一个二次域数类</span><span class="token keyword">def</span> <span class="token function">generate_quadratic_field</span><span class="token punctuation">(</span>d<span class="token punctuation">,</span> modulo<span class="token operator">=</span><span class="token number">0</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""Generate quadratic field number class    Returns:        class -- quadratic field number class    """</span>    <span class="token keyword">assert</span> <span class="token punctuation">(</span><span class="token builtin">isinstance</span><span class="token punctuation">(</span>modulo<span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token keyword">and</span> modulo <span class="token operator">>=</span> <span class="token number">0</span><span class="token punctuation">)</span>    <span class="token keyword">class</span> <span class="token class-name">QuadraticFieldNumber</span><span class="token punctuation">:</span>        <span class="token keyword">def</span> <span class="token function">__init__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>            self<span class="token punctuation">.</span>x <span class="token operator">=</span> x <span class="token operator">%</span> modulo            self<span class="token punctuation">.</span>y <span class="token operator">=</span> y <span class="token operator">%</span> modulo    <span class="token comment">#定义乘法运算</span>        <span class="token keyword">def</span> <span class="token function">__mul__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> another<span class="token punctuation">)</span><span class="token punctuation">:</span>            x <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">*</span> another<span class="token punctuation">.</span>x <span class="token operator">+</span> d <span class="token operator">*</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> another<span class="token punctuation">.</span>y            y <span class="token operator">=</span> self<span class="token punctuation">.</span>x <span class="token operator">*</span> another<span class="token punctuation">.</span>y <span class="token operator">+</span> self<span class="token punctuation">.</span>y <span class="token operator">*</span> another<span class="token punctuation">.</span>x            <span class="token keyword">return</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span>    <span class="token comment">#定义幂运算</span>        <span class="token keyword">def</span> <span class="token function">__pow__</span><span class="token punctuation">(</span>self<span class="token punctuation">,</span> exponent<span class="token punctuation">)</span><span class="token punctuation">:</span>            result <span class="token operator">=</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">)</span>            <span class="token keyword">if</span> exponent<span class="token punctuation">:</span>                temporary <span class="token operator">=</span> self<span class="token punctuation">.</span>__class__<span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">)</span>                <span class="token keyword">while</span> exponent<span class="token punctuation">:</span>                    <span class="token keyword">if</span> exponent <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>                        result <span class="token operator">*=</span> temporary                    temporary <span class="token operator">*=</span> temporary                    exponent <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span>            <span class="token keyword">return</span> result        <span class="token keyword">def</span> <span class="token function">__str__</span><span class="token punctuation">(</span>self<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> <span class="token string">'(&#123;&#125;, &#123;&#125; \\sqrt(&#123;&#125;))'</span><span class="token punctuation">.</span><span class="token builtin">format</span><span class="token punctuation">(</span>self<span class="token punctuation">.</span>x<span class="token punctuation">,</span> self<span class="token punctuation">.</span>y<span class="token punctuation">,</span> d<span class="token punctuation">)</span>    <span class="token keyword">return</span> QuadraticFieldNumber<span class="token keyword">def</span> <span class="token function">ex_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">,</span> b<span class="token punctuation">:</span> <span class="token builtin">int</span><span class="token punctuation">)</span> <span class="token operator">-</span><span class="token operator">></span> <span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">,</span> <span class="token builtin">int</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :return: gcd x y    """</span>    <span class="token keyword">if</span> a <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token boolean">None</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> <span class="token number">1</span>  <span class="token comment"># 初始化x1,y1,x2,y2</span>        <span class="token keyword">while</span> b<span class="token punctuation">:</span>            q<span class="token punctuation">,</span> r <span class="token operator">=</span> <span class="token builtin">divmod</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span>            a<span class="token punctuation">,</span> b <span class="token operator">=</span> b<span class="token punctuation">,</span> r  <span class="token comment"># gcd(a,b)=gcd(b,a%b)</span>            x1<span class="token punctuation">,</span> y1<span class="token punctuation">,</span> x2<span class="token punctuation">,</span> y2 <span class="token operator">=</span> x2<span class="token punctuation">,</span> y2<span class="token punctuation">,</span> x1 <span class="token operator">-</span> q <span class="token operator">*</span> x2<span class="token punctuation">,</span> y1 <span class="token operator">-</span> q <span class="token operator">*</span> y2        <span class="token comment"># 返回一个三元组，依次是(gcd,x,y)，使得 xa+yb=gcd</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>a<span class="token punctuation">,</span> x1<span class="token punctuation">,</span> y1<span class="token punctuation">)</span> <span class="token keyword">if</span> a <span class="token operator">></span> <span class="token number">0</span> <span class="token keyword">else</span> <span class="token punctuation">(</span><span class="token operator">-</span>a<span class="token punctuation">,</span> <span class="token operator">-</span>x1<span class="token punctuation">,</span> <span class="token operator">-</span>y1<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">crt</span><span class="token punctuation">(</span>r_lst<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">,</span> m_lst<span class="token punctuation">:</span> <span class="token builtin">list</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""    :param r_lst: 余数列表    :param m_lst: 模数列表    :return: 同余式的解 x    """</span>    r_lst <span class="token operator">=</span> <span class="token punctuation">[</span>r <span class="token operator">%</span> m <span class="token keyword">for</span> <span class="token punctuation">(</span>r<span class="token punctuation">,</span> m<span class="token punctuation">)</span> <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>r_lst<span class="token punctuation">,</span> m_lst<span class="token punctuation">)</span><span class="token punctuation">]</span>  <span class="token comment"># 预先初始化</span>    M<span class="token punctuation">,</span> res <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span>    <span class="token comment"># M = m1*m2*...*mn</span>    <span class="token keyword">for</span> m <span class="token keyword">in</span> m_lst<span class="token punctuation">:</span>        M <span class="token operator">=</span> M <span class="token operator">*</span> m    <span class="token keyword">for</span> r<span class="token punctuation">,</span> m <span class="token keyword">in</span> <span class="token builtin">zip</span><span class="token punctuation">(</span>r_lst<span class="token punctuation">,</span> m_lst<span class="token punctuation">)</span><span class="token punctuation">:</span>        temp <span class="token operator">=</span> r <span class="token operator">*</span> M <span class="token operator">//</span> m <span class="token operator">*</span> ex_gcd<span class="token punctuation">(</span>M <span class="token operator">//</span> m<span class="token punctuation">,</span> m<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span>        res <span class="token operator">=</span> <span class="token punctuation">(</span>res <span class="token operator">+</span> temp<span class="token punctuation">)</span> <span class="token operator">%</span> M    <span class="token keyword">return</span> resres1 <span class="token operator">=</span> <span class="token punctuation">[</span>c<span class="token punctuation">]</span><span class="token comment">#res储存上一轮循环中生成的二次剩余的平方根</span>total <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">24000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    tmp<span class="token punctuation">,</span> res1 <span class="token operator">=</span> res1<span class="token punctuation">,</span> <span class="token punctuation">[</span><span class="token punctuation">]</span><span class="token comment">#保存上一轮res1的值,作为该轮的c，并为本次迭代清空，寻找该轮的二次剩余的平方根</span>    <span class="token keyword">for</span> ct <span class="token keyword">in</span> tmp<span class="token punctuation">:</span>        mm <span class="token operator">=</span> square_root_of_quadratic_residue<span class="token punctuation">(</span>ct<span class="token punctuation">,</span>p<span class="token punctuation">)</span>        <span class="token keyword">if</span> mm <span class="token keyword">not</span> <span class="token keyword">in</span> total<span class="token punctuation">:</span>            total<span class="token punctuation">.</span>append<span class="token punctuation">(</span>mm<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        <span class="token keyword">if</span> p<span class="token operator">-</span>mm <span class="token keyword">not</span> <span class="token keyword">in</span> total<span class="token punctuation">:</span>            total<span class="token punctuation">.</span>append<span class="token punctuation">(</span>p<span class="token operator">-</span>mm<span class="token punctuation">)</span>        <span class="token keyword">else</span><span class="token punctuation">:</span> <span class="token keyword">continue</span>        <span class="token keyword">if</span> mm <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">or</span> mm <span class="token operator">==</span> p <span class="token operator">-</span> <span class="token number">1</span> <span class="token keyword">or</span> mm <span class="token operator">==</span> <span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">:</span> <span class="token keyword">continue</span><span class="token comment">#满足费马定理无用解</span>        res1 <span class="token operator">+=</span> <span class="token punctuation">[</span>mm<span class="token punctuation">,</span>p<span class="token operator">-</span>mm<span class="token punctuation">]</span>    res1 <span class="token operator">=</span> <span class="token builtin">list</span><span class="token punctuation">(</span><span class="token builtin">set</span><span class="token punctuation">(</span>res1<span class="token punctuation">)</span><span class="token punctuation">)</span>res1 <span class="token operator">=</span> res1<span class="token punctuation">[</span><span class="token operator">-</span><span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token comment">#找出模 p 意义下的最大二次剩余，即最后一轮的二次剩余的平方根</span><span class="token comment">#rabin</span>res2 <span class="token operator">=</span> c<span class="token keyword">for</span> i <span class="token keyword">in</span> tqdm<span class="token punctuation">(</span><span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">24000</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    res2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>res2<span class="token punctuation">,</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>res2 <span class="token operator">=</span> <span class="token punctuation">[</span>res2<span class="token punctuation">,</span> p <span class="token operator">-</span> res2<span class="token punctuation">]</span><span class="token keyword">for</span> i <span class="token keyword">in</span> res1<span class="token punctuation">:</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> res2<span class="token punctuation">:</span>        m <span class="token operator">=</span> crt<span class="token punctuation">(</span><span class="token punctuation">[</span>i<span class="token punctuation">,</span>j<span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span>p<span class="token punctuation">,</span>q<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#利用中国剩余定理求线性同余方程</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span>        m <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b'HZNU'</span> <span class="token keyword">in</span> m<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token comment">#HZNUCTF&#123;80f937af-6542-4142-b957-09534839da4d&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[NSSCTF ROUND11]ez_signin1</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> secret <span class="token keyword">import</span> flagp <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token keyword">assert</span> p <span class="token operator">></span> qn <span class="token operator">=</span> p<span class="token operator">*</span>qe <span class="token operator">=</span> <span class="token number">65536</span>m <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>num1 <span class="token operator">=</span> <span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>p<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token operator">-</span><span class="token builtin">pow</span><span class="token punctuation">(</span>q<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> nnum2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>p<span class="token operator">-</span>q<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span>c <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>m<span class="token punctuation">,</span>e<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num1="</span><span class="token punctuation">,</span>num1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"num2="</span><span class="token punctuation">,</span>num2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"n="</span><span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"c="</span><span class="token punctuation">,</span>c<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mn>1</mn><mo>=</mo><mo stretchy="false">(</mo><msup><mi>p</mi><mi>e</mi></msup><mi mathvariant="normal">%</mi><mi>n</mi><mo>−</mo><msup><mi>q</mi><mi>e</mi></msup><mi mathvariant="normal">%</mi><mi>n</mi><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi><mo>−</mo><mo>&gt;</mo><mo stretchy="false">(</mo><msup><mi>p</mi><mi>e</mi></msup><mo>−</mo><msup><mi>q</mi><mi>e</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mn>2</mn><mo>=</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mi>q</mi><msup><mo stretchy="false">)</mo><mi>e</mi></msup><mi mathvariant="normal">%</mi><mi>n</mi><mo>−</mo><mo>−</mo><mo>−</mo><mo>−</mo><mo>&gt;</mo><mo stretchy="false">(</mo><msup><mi>p</mi><mi>e</mi></msup><mo>+</mo><msup><mi>q</mi><mi>e</mi></msup><mo stretchy="false">)</mo><mi mathvariant="normal">%</mi><mi>n</mi></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}num1=(p^e \% n-q^e\%n)\%n-&gt;(p^e-q^e)\%n\\num2=(p-q)^e\%n----&gt;(p^e+q^e)\%n\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathdefault">n</span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">n</span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">n</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mclose"><span class="mclose">)</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mord">%</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">−</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&gt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mclose">)</span><span class="mord">%</span><span class="mord mathdefault">n</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mn>1</mn><mo>+</mo><mi>k</mi><mn>1</mn><mi>n</mi><mo>=</mo><msup><mi>p</mi><mi>e</mi></msup><mo>−</mo><msup><mi>q</mi><mi>e</mi></msup></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mn>2</mn><mo>+</mo><mi>k</mi><mn>2</mn><mi>n</mi><mo>=</mo><msup><mi>p</mi><mi>e</mi></msup><mo>+</mo><msup><mi>q</mi><mi>e</mi></msup></mrow></mstyle></mtd></mtr></mtable></mrow><annotation encoding="application/x-tex">\begin{cases}num1+k1n=p^e-q^e\\num2+k2n=p^e+q^e\\\end{cases}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mord mathdefault">n</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.664392em;"><span style="top:-3.063em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mi>u</mi><mi>m</mi><mn>1</mn><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mn>2</mn><mo>=</mo><mn>2</mn><mo>∗</mo><msup><mi>p</mi><mi>e</mi></msup><mo>−</mo><mo stretchy="false">(</mo><mi>k</mi><mn>1</mn><mo>+</mo><mi>k</mi><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>n</mi><mspace linebreak="newline"></mspace><mi>n</mi><mi>u</mi><mi>m</mi><mn>1</mn><mo>+</mo><mi>n</mi><mi>u</mi><mi>m</mi><mn>2</mn><mo>≡</mo><mn>2</mn><mo>∗</mo><msup><mi>p</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>n</mi><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">num1+num2=2*p^e-(k1+k2)*n\\num1+num2\equiv2*p^e(mod\quad n)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">n</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord mathdefault">u</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">n</span><span class="mclose">)</span></span></span></span></span></p><p>gcd(num1+num2,n)求出p，继而求出q ，phi,因p%4=3,用rabin,e为2^16,16次rabin ,找到flag</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> math <span class="token keyword">import</span> gcd<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2num1<span class="token operator">=</span> <span class="token number">125840590309791843042942472454302309427902521609092255978098604598421904476504128795428038638958434640701151445562704932915890261048345155354271130081854732235475017614337853919731965277219907509305647787266522452615772631126275769024268070969091470146938424915366852517264759750301378534103489362861800810022</span>num2<span class="token operator">=</span> <span class="token number">118406528288319388230227470004290601949254834713668964078645010603616773414702172944758544261570579725052821828652201587113154218442517611721124839436362032837148883717498050423716531048059705558316325394980254998270187812316191624277483798408056495011826590031502722438999314499417572813226192270193502542873</span>n<span class="token operator">=</span> <span class="token number">144140637152927561878841058661326254132516863421085753653166712995292536662268292489238826351220756954544888101091680580454682564537342482868604164536901599672009013558797911432938065138548281881987687315400681649499161313266702303428486794442027697579445652817585974726048853787419009254509295595766411967061</span>c<span class="token operator">=</span> <span class="token number">21702988354826355023098162614820215595773453371108009638486091165050573362393879263788989594321176598045809252543156717243926880903825424144135521110409333914517505087684419503076105354898495379828485066145995356836426089928802062373544548239600495045887996562801869682637318594583294484780968466003698900178</span>p <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>num1<span class="token operator">+</span>num2<span class="token punctuation">,</span>n<span class="token punctuation">)</span><span class="token comment">#print(p)</span>q <span class="token operator">=</span> n<span class="token operator">//</span>p<span class="token comment">#print(q)</span><span class="token comment">#print(p%4)</span><span class="token comment">#print(q%4)</span><span class="token comment">#3用rabin</span><span class="token keyword">def</span> <span class="token function">rabin</span><span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token punctuation">:</span>    mp <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>p <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> p<span class="token punctuation">)</span>    mq <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span> <span class="token punctuation">(</span>q <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">4</span><span class="token punctuation">,</span> q<span class="token punctuation">)</span>    m1 <span class="token operator">=</span> <span class="token punctuation">(</span>mq <span class="token operator">*</span> p <span class="token operator">*</span> inverse<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">+</span> mp <span class="token operator">*</span> q <span class="token operator">*</span> inverse<span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> n    m2 <span class="token operator">=</span> n <span class="token operator">-</span> m1    m3 <span class="token operator">=</span> <span class="token punctuation">(</span>mq <span class="token operator">*</span> p <span class="token operator">*</span> inverse<span class="token punctuation">(</span>p<span class="token punctuation">,</span> q<span class="token punctuation">)</span> <span class="token operator">-</span> mp <span class="token operator">*</span> q <span class="token operator">*</span> inverse<span class="token punctuation">(</span>q<span class="token punctuation">,</span> p<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">%</span> n    m4 <span class="token operator">=</span> n <span class="token operator">-</span> m3    <span class="token keyword">return</span> <span class="token punctuation">[</span>m1<span class="token punctuation">,</span> m2<span class="token punctuation">,</span> m3<span class="token punctuation">,</span> m4<span class="token punctuation">]</span>t<span class="token operator">=</span>rabin<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">15</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token comment">#e为2^16,16次rabin,for外已经进行一次</span>    <span class="token comment">#初始化tt</span>    tt<span class="token operator">=</span><span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">#t为上一次的m1,m2,m3,m4</span>    <span class="token keyword">for</span> cc <span class="token keyword">in</span> t<span class="token punctuation">:</span>        <span class="token comment">#mx对应的四个解</span>        ttt<span class="token operator">=</span>rabin<span class="token punctuation">(</span>cc<span class="token punctuation">)</span>        <span class="token keyword">for</span> k <span class="token keyword">in</span> ttt<span class="token punctuation">:</span>            <span class="token comment">#删去重复解</span>            <span class="token keyword">if</span> k <span class="token keyword">not</span> <span class="token keyword">in</span> tt<span class="token punctuation">:</span>                tt<span class="token punctuation">.</span>append<span class="token punctuation">(</span>k<span class="token punctuation">)</span>    t<span class="token operator">=</span><span class="token builtin">list</span><span class="token punctuation">(</span>tt<span class="token punctuation">)</span><span class="token keyword">for</span> m <span class="token keyword">in</span> tt<span class="token punctuation">:</span>    flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>m<span class="token punctuation">)</span>    <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span><span class="token string">b"NSSCTF"</span><span class="token punctuation">)</span> <span class="token keyword">or</span><span class="token punctuation">(</span><span class="token string">b'nssctf'</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>        <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">break</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 练习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 二次剩余 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>wp</title>
      <link href="/post/71a28cf2.html"/>
      <url>/post/71a28cf2.html</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>sagemath</title>
      <link href="/post/a67c12c5.html"/>
      <url>/post/a67c12c5.html</url>
      
        <content type="html"><![CDATA[<h1>入门</h1><h2 id="简单基本概念">简单基本概念</h2><h3 id="基本数学运算符">基本数学运算符</h3><ul><li>**   ^ 指数</li><li>%取余</li><li>/ 约分</li><li>//取整</li></ul><p>附：算数二元运算符优先级</p><p>括号&gt;指数&gt;乘法除法&gt;加法、 减法</p><h3 id="常见数学函数">常见数学函数</h3><p>内置pi, e</p><ul><li><p>向上取整 floor   向下取整 ceil</p></li><li><p>sqrt 求平方根</p></li><li><p>gcd 求最大公约数,lcm 求最小公倍数</p></li><li><p>sin cos tan …（sagemath完全处理pi，不是数的计算值）</p></li><li><p>divmod()同时获得商和余数</p></li><li><p>factor()计算整数的素因数分解</p></li><li><p>max ,min ,abs(绝对值),log(),ln(),log(x,b)</p></li><li><p>factor()求阶乘</p><p>…</p></li></ul><h1>基于密码使用sage</h1><h2 id="基本数论函数">基本数论函数</h2><h3 id="求逆元">求逆元</h3><p>inverse_mod(x,y):在模y下x的逆元</p><h3 id="拓展欧几里得">拓展欧几里得</h3><p>xgcd(x,y): 返回值（a,b,c)    —&gt;a=b<em>x+c</em>y</p><h3 id="欧拉函数">欧拉函数</h3><p>euler_phi(n)</p><h3 id="中国剩余定理">中国剩余定理</h3><p>crt([x1,x2,x3,x4],[x11,x22,x33,x44])</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>即求</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.24999999999999992em" columnalign="right" columnspacing><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mo>≡</mo><mi>x</mi><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>x</mi><mn>11</mn><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mo>≡</mo><mi>x</mi><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>x</mi><mn>11</mn><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mo>≡</mo><mi>x</mi><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>x</mi><mn>11</mn><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="true"><mrow><mi>x</mi><mo>≡</mo><mi>x</mi><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>x</mi><mn>11</mn><mo stretchy="false">)</mo></mspace></mrow></mstyle></mtd></mtr></mtable></mrow></mrow><annotation encoding="application/x-tex">即求\left\{\begin{aligned}x\equiv x1(mod\quad x11)\\x\equiv x1(mod\quad  x11)\\x\equiv x1(mod\quad  x11)\\x\equiv x1(mod\quad  x11)\\\end{aligned}\right.</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:6.00004em;vertical-align:-2.75002em;"></span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">求</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen"><span class="delimsizing mult"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.2500200000000006em;"><span style="top:-1.2999899999999998em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎩</span></span></span><span style="top:-1.2949899999999999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.58999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-1.8849900000000002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.17999em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-2.2049900000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-3.1500100000000004em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎨</span></span></span><span style="top:-4.29501em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.59001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-4.885010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.180010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.205010000000001em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎪</span></span></span><span style="top:-5.50002em;"><span class="pstrut" style="height:3.15em;"></span><span class="delimsizinginner delim-size4"><span>⎧</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.75002em;"><span></span></span></span></span></span></span><span class="mord"><span class="mtable"><span class="col-align-r"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:3.25em;"><span style="top:-5.41em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-3.91em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.4099999999999993em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-0.9099999999999997em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">x</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:2.7500000000000004em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span></span></span></span></p><h3 id="生成随机素数">生成随机素数</h3><p>random_prime(a,b)    (a&gt;b,b可缺省)</p><h3 id="素数">素数</h3><p>is_prime()  -----&gt;返回true,false</p><p>nth_prime(x)-----&gt;返回第x个素数</p><p>next_prime(n)------&gt;输出大于n 的素数</p><p>previous_prime(n)-----&gt;输出小于n的素数</p><p>list(primes(a,b))------&gt;a,b区间内的素数</p><h3 id="计算x-y-mod-n">计算x^y mod n</h3><p>power_mod(x,y,n)</p><h3 id="求自身的n次方根">求自身的n次方根</h3><p>FR（n).nth_root(m,all=‘Truue’)</p><h3 id="整数分解">整数分解</h3><ul><li><p>[x] 分解整数                           factor()</p></li><li><p>[ ] 椭圆曲线分解寻找素因子   ecm()</p></li><li><p>[ ] 二次筛法分解                     qsieve()</p></li><li><p>[x] 仅求出素因子                      prime_divisor()</p></li></ul><h3 id="求多项式的-根">求多项式的 根</h3><h3 id="判断二次剩余">判断二次剩余</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">R <span class="token operator">=</span> IntegerModRing<span class="token punctuation">(</span>m<span class="token punctuation">)</span>x<span class="token operator">=</span>R<span class="token punctuation">(</span>y<span class="token punctuation">)</span>b<span class="token punctuation">.</span>is_square<span class="token punctuation">(</span><span class="token punctuation">)</span>判断b是不是在模m下的二次剩余<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span></span></code></pre><h2 id="代数">代数</h2><h3 id="基本的数域与环">基本的数域与环</h3><p><strong>域</strong>：设P是由一些复数组成的集合(包括0,1),若P中任意两个数(可以相同)的和差积商(除数不为0)仍是P中的数,则称P为一个数域.</p><ul><li><p>实数域 ：RR</p></li><li><p>复数域：CC</p></li></ul><p><strong>环</strong>：数环是一种特殊的数集，由数组成的环，是环的最基本的例子和模型.设P是复数集的非空子集，如果P中任意两个数的和、差、积仍属于P，则称P是一个数环。</p><ul><li>整数环: ZZ</li><li>有理数环: QQ</li><li>多项式环:PolynomialRing()</li><li>伽罗瓦域(N必须是某个素数或者某个素数的k次方)：GF(N)、GF(2^8,modulus=[1,0,0,1,1,1,0,0,1])</li><li>一般有限环：Zmod(N)</li></ul><p>****<a href="https://www.cnblogs.com/coming1890/p/13664152.html">Sagemath在ctf密码学中的使用 - _Mind - 博客园 (cnblogs.com)</a></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#整数域</span>ZZ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#有理数域</span>QQ<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#实数域</span>RR<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">^</span><span class="token number">0.5</span><span class="token punctuation">)</span><span class="token comment">#复数域</span>CC<span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#sage: CC(1,2)</span><span class="token comment">#1.00000000000000 + 2.00000000000000*I</span><span class="token comment">#声明生成虚数单位i</span>i<span class="token operator">=</span>ComplexField<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">.</span>gen<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#eg:</span><span class="token comment">#sage: i=ComplexField().gen()</span><span class="token comment">#sage: (2+i)*(4+3*i)</span><span class="token comment">#5.00000000000000 + 10.0000000000000*I</span><span class="token comment">#构造多项式环,返回具有给定属性和变量名的全局唯一的单变量或多元多项式环</span><span class="token comment">#定义在整数域上的多项式环R，变量为w;ZZ也可换成其他数域</span>R<span class="token punctuation">.</span><span class="token operator">&lt;</span>w<span class="token operator">>=</span>PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#sage</span>R<span class="token punctuation">.</span><span class="token operator">&lt;</span>w<span class="token operator">>=</span>PolynomialRing<span class="token punctuation">(</span>ZZ<span class="token punctuation">)</span>sage<span class="token punctuation">:</span> <span class="token punctuation">(</span><span class="token number">1</span><span class="token operator">+</span>w<span class="token punctuation">)</span><span class="token operator">^</span><span class="token number">3</span>w<span class="token operator">^</span><span class="token number">3</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>w<span class="token operator">^</span><span class="token number">2</span> <span class="token operator">+</span> <span class="token number">3</span><span class="token operator">*</span>w <span class="token operator">+</span> <span class="token number">1</span><span class="token comment">#有限环</span>RN<span class="token operator">=</span>IntegerModRing<span class="token punctuation">(</span><span class="token number">63</span><span class="token punctuation">)</span>FR<span class="token operator">=</span>Integers<span class="token punctuation">(</span><span class="token number">17</span><span class="token punctuation">)</span><span class="token punctuation">;</span><span class="token comment">#自身的代数扩展;exR=FR[w]/(w^2+3)</span>exR<span class="token operator">=</span>FR<span class="token punctuation">.</span>extension<span class="token punctuation">(</span>w<span class="token operator">^</span><span class="token number">2</span><span class="token operator">+</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#以python整数的形式返回所有可逆元素的列表</span>FR<span class="token punctuation">.</span>list_of_elements_of_multiplicative_group<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#假设环的乘法群是循环的，返回这个环的乘法群的生成元</span>FR<span class="token punctuation">.</span>multiplicative_generator<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#返回这个环的一个随机元素</span>FR<span class="token punctuation">.</span>random_element<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#上述几种方法对如下的域同样支持</span><span class="token comment">#有限域</span><span class="token comment">#素数域</span>G1<span class="token operator">=</span>GF<span class="token punctuation">(</span><span class="token number">37</span><span class="token punctuation">)</span><span class="token punctuation">;</span>G1<span class="token comment">#伽罗瓦域</span>G2<span class="token operator">=</span>GF<span class="token punctuation">(</span><span class="token number">3</span><span class="token operator">^</span><span class="token number">5</span><span class="token punctuation">)</span><span class="token punctuation">;</span>G2<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="线性代数">线性代数</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#定义矩阵，默认定义在实数域</span>A <span class="token operator">=</span> matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A<span class="token operator">^</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment">#定义在其他域上的矩阵，如有限域</span>A <span class="token operator">=</span> matrix<span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span>A<span class="token operator">^</span><span class="token operator">-</span><span class="token number">1</span><span class="token comment">#可以看到两个逆矩阵不一样</span><span class="token comment">#定义向量，定义在有限域，默认定义在实数域</span>w <span class="token operator">=</span> vector<span class="token punctuation">(</span>GF<span class="token punctuation">(</span><span class="token number">13</span><span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">4</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">]</span><span class="token punctuation">)</span>Y<span class="token operator">=</span>A<span class="token operator">*</span>w<span class="token punctuation">;</span>YZ<span class="token operator">=</span>w<span class="token operator">*</span>A<span class="token punctuation">;</span>Z<span class="token comment">#解线性方程组AX=Y</span>X <span class="token operator">=</span> A<span class="token punctuation">.</span>solve_right<span class="token punctuation">(</span>Y<span class="token punctuation">)</span><span class="token punctuation">;</span>X<span class="token comment">#也可以使用符号\</span>A\Y<span class="token comment">#解线性方程组XA=Y</span>X <span class="token operator">=</span> A<span class="token punctuation">.</span>solve_left<span class="token punctuation">(</span>Z<span class="token punctuation">)</span><span class="token punctuation">;</span>X<span class="token comment">#格基约减</span>A <span class="token operator">=</span> matrix<span class="token punctuation">(</span><span class="token punctuation">[</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">5</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">1</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">]</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">3</span><span class="token punctuation">,</span><span class="token number">7</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">,</span><span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#LLL算法</span>A<span class="token punctuation">.</span>LLL<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#BKZ算法</span>A<span class="token punctuation">.</span>BKZ<span class="token punctuation">(</span><span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="离散椭圆曲线">离散椭圆曲线</h3><pre class="line-numbers language-python" data-language="python"><code class="language-python">p<span class="token operator">=</span>ZZ<span class="token punctuation">(</span><span class="token string">'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFF'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>a<span class="token operator">=</span>ZZ<span class="token punctuation">(</span><span class="token string">'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFFF00000000FFFFFFFFFFFFFFFC'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span>b<span class="token operator">=</span>ZZ<span class="token punctuation">(</span><span class="token string">'28E9FA9E9D9F5E344D5A9E4BCF6509A7F39789F515AB8F92DDBCBD414D940E93'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment">#有限域GF(p)上的椭圆曲线y^2 = x^3 + a*x + b mod p</span>E<span class="token operator">=</span>EllipticCurve<span class="token punctuation">(</span>GF<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">,</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span><span class="token number">0</span><span class="token punctuation">,</span>a<span class="token punctuation">,</span>b<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#基点</span>g<span class="token operator">=</span>E<span class="token punctuation">(</span><span class="token punctuation">[</span>ZZ<span class="token punctuation">(</span><span class="token string">'32c4ae2c1f1981195f9904466a39c9948fe30bbff2660be1715a4589334c74c7'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">,</span>ZZ<span class="token punctuation">(</span><span class="token string">'bc3736a2f4f6779c59bdcee36b692153d0a9877cc62a474002df32e52139f0a0'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token comment">#基点的阶</span>n<span class="token operator">=</span>ZZ<span class="token punctuation">(</span><span class="token string">'FFFFFFFEFFFFFFFFFFFFFFFFFFFFFFFF7203DF6B21C6052B53BBF40939D54123'</span><span class="token punctuation">,</span><span class="token number">16</span><span class="token punctuation">)</span><span class="token comment">#生成密钥</span>sk<span class="token operator">=</span>random_prime<span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>n<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">,</span>n<span class="token operator">//</span><span class="token number">3</span><span class="token punctuation">)</span><span class="token comment">#生成公钥</span>G<span class="token operator">=</span>sk<span class="token operator">*</span>g<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="离散对数">离散对数</h3><p>求解以base为底，a的对数；ord为base的阶，可以缺省，operation可以是’+‘与’<em>’，默认为’</em>’；bounds是一个区间(ld,ud)，需要保证所计算的对数在此区间内</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#通用的求离散对数的方法</span>x<span class="token operator">=</span>discrete_log<span class="token punctuation">(</span>a<span class="token punctuation">,</span>base<span class="token punctuation">,</span><span class="token builtin">ord</span><span class="token punctuation">,</span>operation<span class="token punctuation">)</span><span class="token comment">#求离散对数的Pollard-Rho算法</span>x<span class="token operator">=</span>discrete_log_rho<span class="token punctuation">(</span>a<span class="token punctuation">,</span>base<span class="token punctuation">,</span><span class="token builtin">ord</span><span class="token punctuation">,</span>operation<span class="token punctuation">)</span><span class="token comment">#求离散对数的Pollard-kangaroo算法(也称为lambda算法)</span>x<span class="token operator">=</span>discrete_log_lambda<span class="token punctuation">(</span>a<span class="token punctuation">,</span>base<span class="token punctuation">,</span>bounds<span class="token punctuation">,</span>operation<span class="token punctuation">)</span><span class="token comment">#小步大步法</span>x<span class="token operator">=</span>bsgs<span class="token punctuation">(</span>base<span class="token punctuation">,</span>a<span class="token punctuation">,</span>bounds<span class="token punctuation">,</span>operation<span class="token punctuation">)</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="coppersmith算法">coppersmith算法</h3><p>参考：<a href="https://blog.csdn.net/qq_39642801/article/details/104158699">https://blog.csdn.net/qq_39642801/article/details/104158699</a></p><p>​          <a href="https://blog.csdn.net/weixin_44338712/article/details/105320810">https://blog.csdn.net/weixin_44338712/article/details/105320810</a></p>]]></content>
      
      
      <categories>
          
          <category> 零碎知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 杂 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连分数训练</title>
      <link href="/post/294324d9.html"/>
      <url>/post/294324d9.html</url>
      
        <content type="html"><![CDATA[<h1>[CRYPTOCTF] DoRSA</h1><h2 id="题目：">题目：</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> math <span class="token keyword">import</span> gcd<span class="token keyword">from</span> flag <span class="token keyword">import</span> FLAG<span class="token comment">#获取e, n_1, n_2</span><span class="token keyword">def</span> <span class="token function">keygen</span><span class="token punctuation">(</span>nbit<span class="token punctuation">,</span> dbit<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">assert</span> <span class="token number">2</span><span class="token operator">*</span>dbit <span class="token operator">&lt;</span> nbit    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>        u<span class="token punctuation">,</span> v <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span>dbit<span class="token punctuation">)</span><span class="token punctuation">,</span> getRandomNBitInteger<span class="token punctuation">(</span>nbit <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> dbit<span class="token punctuation">)</span>        p <span class="token operator">=</span> u <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span>        <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>            <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                x<span class="token punctuation">,</span> y <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span>dbit<span class="token punctuation">)</span><span class="token punctuation">,</span> getRandomNBitInteger<span class="token punctuation">(</span>nbit <span class="token operator">//</span> <span class="token number">2</span> <span class="token operator">-</span> dbit<span class="token punctuation">)</span>                q <span class="token operator">=</span> u <span class="token operator">*</span> y <span class="token operator">+</span> <span class="token number">1</span>                r <span class="token operator">=</span> x <span class="token operator">*</span> y <span class="token operator">+</span> <span class="token number">1</span>                <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>q<span class="token punctuation">)</span> <span class="token keyword">and</span> isPrime<span class="token punctuation">(</span>r<span class="token punctuation">)</span><span class="token punctuation">:</span>                    <span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>                        e <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span>dbit<span class="token punctuation">)</span>                        <span class="token keyword">if</span> gcd<span class="token punctuation">(</span>e<span class="token punctuation">,</span> u <span class="token operator">*</span> v <span class="token operator">*</span> x <span class="token operator">*</span> y<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span>                            phi <span class="token operator">=</span> <span class="token punctuation">(</span>p <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>r <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                            d <span class="token operator">=</span> inverse<span class="token punctuation">(</span>e<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>                            k <span class="token operator">=</span> <span class="token punctuation">(</span>e <span class="token operator">*</span> d <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">//</span> phi                            s <span class="token operator">=</span> k <span class="token operator">*</span> v <span class="token operator">+</span> <span class="token number">1</span>                            <span class="token keyword">if</span> isPrime<span class="token punctuation">(</span>s<span class="token punctuation">)</span><span class="token punctuation">:</span>                                n_1<span class="token punctuation">,</span> n_2 <span class="token operator">=</span> p <span class="token operator">*</span> r<span class="token punctuation">,</span> q <span class="token operator">*</span> s                                <span class="token keyword">return</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> n_1<span class="token punctuation">,</span> n_2<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">encrypt</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> pubkey<span class="token punctuation">)</span><span class="token punctuation">:</span>    e<span class="token punctuation">,</span> n <span class="token operator">=</span> pubkey    <span class="token keyword">return</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>msg<span class="token punctuation">,</span> e<span class="token punctuation">,</span> n<span class="token punctuation">)</span>nbit<span class="token punctuation">,</span> dbit <span class="token operator">=</span> <span class="token number">1024</span><span class="token punctuation">,</span> <span class="token number">256</span>e<span class="token punctuation">,</span> n_1<span class="token punctuation">,</span> n_2 <span class="token operator">=</span> keygen<span class="token punctuation">(</span>nbit<span class="token punctuation">,</span> dbit<span class="token punctuation">)</span><span class="token comment">#获取e,n1,n2</span>FLAG <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span>FLAG<span class="token punctuation">.</span>encode<span class="token punctuation">(</span><span class="token string">"utf-8"</span><span class="token punctuation">)</span><span class="token punctuation">.</span><span class="token builtin">hex</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">,</span> <span class="token number">16</span><span class="token punctuation">)</span>c_1 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>FLAG<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> n_1<span class="token punctuation">)</span><span class="token punctuation">)</span>c_2 <span class="token operator">=</span> encrypt<span class="token punctuation">(</span>FLAG<span class="token punctuation">,</span> <span class="token punctuation">(</span>e<span class="token punctuation">,</span> n_2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'e ='</span><span class="token punctuation">,</span> e<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n_1 ='</span><span class="token punctuation">,</span> n_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'n_2 ='</span><span class="token punctuation">,</span> n_2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enc_1 ='</span><span class="token punctuation">,</span> c_1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">'enc_2 ='</span><span class="token punctuation">,</span> c_2<span class="token punctuation">)</span><span class="token triple-quoted-string string">'''e = 93546309251892226642049894791252717018125687269405277037147228107955818581561n_1 = 36029694445217181240393229507657783589129565545215936055029374536597763899498239088343814109348783168014524786101104703066635008905663623795923908443470553241615761261684865762093341375627893251064284854550683090289244326428531870185742069661263695374185944997371146406463061296320874619629222702687248540071n_2 = 29134539279166202870481433991757912690660276008269248696385264141132377632327390980628416297352239920763325399042209616477793917805265376055304289306413455729727703925501462290572634062308443398552450358737592917313872419229567573520052505381346160569747085965505651160232449527272950276802013654376796886259enc_1 = 4813040476692112428960203236505134262932847510883271236506625270058300562795805807782456070685691385308836073520689109428865518252680199235110968732898751775587988437458034082901889466177544997152415874520654011643506344411457385571604433702808353149867689652828145581610443408094349456455069225005453663702enc_2 = 2343495138227787186038297737188675404905958193034177306901338927852369293111504476511643406288086128052687530514221084370875813121224208277081997620232397406702129186720714924945365815390097094777447898550641598266559194167236350546060073098778187884380074317656022294673766005856076112637129916520217379601'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解：">题解：</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>加密：</mtext><mspace linebreak="newline"></mspace><mi>p</mi><mo>=</mo><mi>u</mi><mo>∗</mo><mi>v</mi><mo>+</mo><mn>1</mn><mspace width="2em"><mi>q</mi><mo>=</mo><mi>u</mi><mo>∗</mo><mi>y</mi><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace><mi>r</mi><mo>=</mo><mi>x</mi><mo>∗</mo><mi>y</mi><mo>+</mo><mn>1</mn><mspace width="2em"><mi>s</mi><mo>=</mo><mi>k</mi><mo>∗</mo><mi>v</mi><mo>+</mo><mn>1</mn><mspace linebreak="newline"></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">加密：\\p=u*v+1\qquad q=u*y+1\\r=x*y+1\qquad s=k*v+1\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">密</span><span class="mord cjk_fallback">：</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.7777700000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">s</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span><span class="mspace newline"></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>n</mi><mn>1</mn><mo>=</mo><mi>p</mi><mo>∗</mo><mi>r</mi><mspace linebreak="newline"></mspace><mi>n</mi><mn>2</mn><mo>=</mo><mi>q</mi><mo>∗</mo><mi>s</mi><mspace linebreak="newline"></mspace><mi>p</mi><mi>h</mi><mi>i</mi><mn>1</mn><mo>=</mo><mi>u</mi><mi>v</mi><mi>x</mi><mi>y</mi><mspace width="2em"><mi>p</mi><mi>h</mi><mi>i</mi><mn>2</mn><mo>=</mo><mi>u</mi><mi>y</mi><mi>k</mi><mi>v</mi><mspace linebreak="newline"></mspace><mi>c</mi><mn>1</mn><mo>=</mo><mi>f</mi><mi>l</mi><mi>a</mi><msup><mi>g</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>n</mi><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mi>c</mi><mn>2</mn><mo>=</mo><mi>f</mi><mi>l</mi><mi>a</mi><msup><mi>g</mi><mi>e</mi></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>n</mi><mn>2</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">n1=p*r\\n2=q*s\\phi1=uvxy\qquad phi2=uykv\\c1=flag^e(mod\quad n1)\\c2=flag^e(mod\quad n2)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.6597200000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.43056em;vertical-align:0em;"></span><span class="mord mathdefault">s</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">c</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight">e</span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mspace linebreak="newline"></mspace><mtext>相较于</mtext><mi>u</mi><mo>∗</mo><mi>v</mi><mtext>、</mtext><mi>x</mi><mo>∗</mo><mi>y</mi><mtext>、</mtext><mi>u</mi><mo>∗</mo><mi>y</mi><mtext>、</mtext><mi>k</mi><mo>∗</mo><mi>v</mi><mtext>来说太小，所以</mtext><mfrac><mrow><mi>n</mi><mn>1</mn></mrow><mrow><mi>n</mi><mn>2</mn></mrow></mfrac><mo>≈</mo><mfrac><mi>x</mi><mi>k</mi></mfrac><mspace linebreak="newline"></mspace><mtext>对</mtext><mfrac><mrow><mi>n</mi><mn>1</mn></mrow><mrow><mi>n</mi><mn>2</mn></mrow></mfrac><mtext>展开，</mtext><mfrac><mi>x</mi><mi>k</mi></mfrac><mtext>是他的渐进分数，求出</mtext><mi>x</mi><mo separator="true">,</mo><mi>k</mi><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\\相较于u*v、x*y、u*y、k*v来说太小，所以\frac{n1}{n2}\approx \frac{x}{k}\\对\frac{n1}{n2}展开，\frac{x}{k}是他的渐进分数，求出x,k\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault">u</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mord cjk_fallback">、</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord cjk_fallback">来</span><span class="mord cjk_fallback">说</span><span class="mord cjk_fallback">太</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">所</span><span class="mord cjk_fallback">以</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.7935600000000003em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord cjk_fallback">对</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">展</span><span class="mord cjk_fallback">开</span><span class="mord cjk_fallback">，</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.10756em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">x</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">他</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">渐</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">x</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span></span><span class="mspace newline"></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>又因为</mtext><mi>k</mi><mo>=</mo><mo stretchy="false">(</mo><mi>e</mi><mo>∗</mo><mi>d</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mi>p</mi><mi>h</mi><mi>i</mi><mspace width="2em"><mi>p</mi><mi>h</mi><mi>i</mi><mo>=</mo><mi>u</mi><mi>v</mi><mi>x</mi><mi>y</mi><mspace linebreak="newline"></mspace><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>k</mi><mo>∗</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo>+</mo><mn>1</mn><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>e</mi><mo stretchy="false">)</mo><mspace width="2em"><mspace width="2em"><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mspace></mspace></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>p</mi><mi>h</mi><mi>i</mi><mo>≡</mo><mn>0</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>x</mi><mo stretchy="false">)</mo><mspace width="2em"><mspace width="2em"><mspace width="2em"><mspace width="1em"><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mspace></mspace></mspace></mspace></mspace></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace></mspace></mrow><annotation encoding="application/x-tex">又因为 k = (e * d - 1) // phi \qquad phi=uvxy\\\begin{cases}k*phi+1\equiv 0(mod\quad e) \qquad \qquad(1)\\phi\equiv 0(mod\quad x)\qquad \qquad \qquad \quad(2)\\\end{cases}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord cjk_fallback">又</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mord">/</span><span class="mord">/</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.625em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">u</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">x</span><span class="mord mathdefault" style="margin-right:0.03588em;">y</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">e</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord">0</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:1em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>对（</mtext><mn>1</mn><mtext>）变形两边同乘</mtext><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>k</mi><mtext>在模</mtext><mi>e</mi><mtext>下乘法逆元</mtext><mo stretchy="false">)</mo><mtext>，得到</mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo>≡</mo><msup><mi>k</mi><mrow><mo>−</mo><mn>1</mn></mrow></msup><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>e</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>利用中国剩余定理求模</mtext><mi>e</mi><mi>x</mi><mtext>下的</mtext><mi>p</mi><mi>h</mi><mi>i</mi><mspace linebreak="newline"></mspace><mtext>由于</mtext><mi>p</mi><mi>h</mi><mi>i</mi><mtext>是在</mtext><mi>e</mi><mi>x</mi><mtext>下的很小，真实的</mtext><mi>p</mi><mi>h</mi><mi>i</mi><mtext>与</mtext><mi>n</mi><mtext>差不多大，扩大在模</mtext><mi>e</mi><mi>x</mi><mtext>下的</mtext><mi>p</mi><mi>h</mi><mi>i</mi><mo separator="true">,</mo><mspace linebreak="newline"></mspace><mtext>对</mtext><mi>p</mi><mi>h</mi><mi>i</mi><mtext>进行爆破求出</mtext><mi>p</mi><mi>h</mi><mi>i</mi><mtext>，进而求出</mtext><mi>d</mi><mtext>，简单</mtext><mi>r</mi><mi>s</mi><mi>a</mi><mtext>求出</mtext><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi></mspace></mrow><annotation encoding="application/x-tex">对（1）变形两边同乘k^{-1}(k在模e下乘法逆元)，得到phi\equiv k^{-1}(mod\quad e)\\利用中国剩余定理求模ex下的phi\\由于phi是在ex下的很小，真实的phi与n差不多大，扩大在模ex下的phi,\\对phi进行爆破求出phi，进而求出d，简单rsa求出flag</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">（</span><span class="mord">1</span><span class="mord cjk_fallback">）</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">形</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">乘</span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">模</span><span class="mord mathdefault">e</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">法</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">元</span><span class="mclose">)</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">e</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">利</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">中</span><span class="mord cjk_fallback">国</span><span class="mord cjk_fallback">剩</span><span class="mord cjk_fallback">余</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">模</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">是</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">很</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">真</span><span class="mord cjk_fallback">实</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">差</span><span class="mord cjk_fallback">不</span><span class="mord cjk_fallback">多</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">扩</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">在</span><span class="mord cjk_fallback">模</span><span class="mord mathdefault">e</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">下</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">对</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord cjk_fallback">爆</span><span class="mord cjk_fallback">破</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">而</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">d</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">简</span><span class="mord cjk_fallback">单</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">s</span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span></span></span></span></span></p><h2 id="wp">wp:</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> mpz<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> inverse<span class="token punctuation">,</span> long_to_bytes<span class="token punctuation">,</span> bytes_to_long<span class="token punctuation">,</span> isPrime<span class="token punctuation">,</span> getPrime<span class="token punctuation">,</span> GCD<span class="token keyword">from</span> sympy <span class="token keyword">import</span> Integer<span class="token punctuation">,</span> continued_fraction<span class="token keyword">from</span> tqdm <span class="token keyword">import</span> tqdm<span class="token keyword">from</span> pwn <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">def</span> <span class="token function">gradualFra</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算传入列表最后的渐进分数    :param cf: 连分数列表    :return: 该列表最后的渐近分数    """</span>    numerator <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#分子</span>    denominator <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#分母</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> cf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 这里的渐进分数分子分母要分开</span>        numerator<span class="token punctuation">,</span> denominator <span class="token operator">=</span> denominator<span class="token punctuation">,</span> x <span class="token operator">*</span> denominator <span class="token operator">+</span> numerator    <span class="token keyword">return</span> numerator<span class="token punctuation">,</span> denominator<span class="token keyword">def</span> <span class="token function">getGradualFra</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算列表所有的渐近分数    :param cf: 连分数列表    :return: 该列表所有的渐近分数    """</span>    gf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        gf<span class="token punctuation">.</span>append<span class="token punctuation">(</span>gradualFra<span class="token punctuation">(</span>cf<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> gf<span class="token keyword">def</span> <span class="token function">Crt</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>m1<span class="token punctuation">,</span>m2<span class="token punctuation">)</span><span class="token punctuation">:</span>    M<span class="token operator">=</span>m1<span class="token operator">*</span>m2    M1<span class="token operator">=</span>m2    M2<span class="token operator">=</span>m1    M11<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>mpz<span class="token punctuation">(</span>M1<span class="token punctuation">)</span><span class="token punctuation">,</span>mpz<span class="token punctuation">(</span>m1<span class="token punctuation">)</span><span class="token punctuation">)</span>    M22<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>mpz<span class="token punctuation">(</span>M2<span class="token punctuation">)</span><span class="token punctuation">,</span>mpz<span class="token punctuation">(</span>m2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> <span class="token punctuation">(</span>a1<span class="token operator">*</span>M1<span class="token operator">*</span>M11<span class="token operator">%</span>M<span class="token operator">+</span>a2<span class="token operator">*</span>M2<span class="token operator">*</span>M22<span class="token operator">%</span>M<span class="token punctuation">)</span><span class="token operator">%</span>Me <span class="token operator">=</span> <span class="token number">93546309251892226642049894791252717018125687269405277037147228107955818581561</span>n_1 <span class="token operator">=</span> <span class="token number">36029694445217181240393229507657783589129565545215936055029374536597763899498239088343814109348783168014524786101104703066635008905663623795923908443470553241615761261684865762093341375627893251064284854550683090289244326428531870185742069661263695374185944997371146406463061296320874619629222702687248540071</span>n_2 <span class="token operator">=</span> <span class="token number">29134539279166202870481433991757912690660276008269248696385264141132377632327390980628416297352239920763325399042209616477793917805265376055304289306413455729727703925501462290572634062308443398552450358737592917313872419229567573520052505381346160569747085965505651160232449527272950276802013654376796886259</span>enc_1 <span class="token operator">=</span> <span class="token number">4813040476692112428960203236505134262932847510883271236506625270058300562795805807782456070685691385308836073520689109428865518252680199235110968732898751775587988437458034082901889466177544997152415874520654011643506344411457385571604433702808353149867689652828145581610443408094349456455069225005453663702</span>enc_2 <span class="token operator">=</span> <span class="token number">2343495138227787186038297737188675404905958193034177306901338927852369293111504476511643406288086128052687530514221084370875813121224208277081997620232397406702129186720714924945365815390097094777447898550641598266559194167236350546060073098778187884380074317656022294673766005856076112637129916520217379601</span>c <span class="token operator">=</span> continued_fraction<span class="token punctuation">(</span>Integer<span class="token punctuation">(</span>n_2<span class="token punctuation">)</span> <span class="token operator">/</span> Integer<span class="token punctuation">(</span>n_1<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#分数列表</span>c<span class="token operator">=</span>getGradualFra<span class="token punctuation">(</span>c<span class="token punctuation">)</span><span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">150</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    k <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token comment">#numerator(i)</span>    x <span class="token operator">=</span> c<span class="token punctuation">[</span>i<span class="token punctuation">]</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    <span class="token keyword">if</span> GCD<span class="token punctuation">(</span>e<span class="token punctuation">,</span> k<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token keyword">continue</span>    res <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>mpz<span class="token punctuation">(</span>e<span class="token operator">-</span>k<span class="token punctuation">)</span><span class="token punctuation">,</span> mpz<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">)</span>    cc <span class="token operator">=</span> Crt<span class="token punctuation">(</span>res<span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> e<span class="token punctuation">,</span> x<span class="token punctuation">)</span>    md <span class="token operator">=</span> e <span class="token operator">*</span> x <span class="token operator">//</span> GCD<span class="token punctuation">(</span>e<span class="token punctuation">,</span> x<span class="token punctuation">)</span>   <span class="token comment"># break</span>    <span class="token comment">#print(cc[1])</span>    st <span class="token operator">=</span> cc <span class="token operator">+</span> <span class="token punctuation">(</span>n_1 <span class="token operator">//</span> md<span class="token punctuation">)</span> <span class="token operator">*</span> md <span class="token operator">-</span> <span class="token number">100</span> <span class="token operator">*</span> md    <span class="token comment">#print(st)</span>    <span class="token keyword">for</span> j <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">200</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> GCD<span class="token punctuation">(</span>e<span class="token punctuation">,</span> st<span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            st <span class="token operator">+=</span> md            <span class="token keyword">continue</span>        d_1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>mpz<span class="token punctuation">(</span>e<span class="token punctuation">)</span><span class="token punctuation">,</span> mpz<span class="token punctuation">(</span>st<span class="token punctuation">)</span><span class="token punctuation">)</span>        <span class="token comment">#print(d_1)</span>        flag <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>enc_1<span class="token punctuation">,</span> d_1<span class="token punctuation">,</span> n_1<span class="token punctuation">)</span>       <span class="token comment"># print(flag)</span>        flag <span class="token operator">=</span> long_to_bytes<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        <span class="token keyword">if</span> <span class="token string">b"CCTF"</span> <span class="token keyword">in</span> flag<span class="token punctuation">:</span>            <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span>        st <span class="token operator">+=</span> md<span class="token comment">##CCTF&#123;__Lattice-Based_atT4cK_on_RSA_V4R1aN75!!!&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[NUSTCTF 2022] ezRSA</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> getPrime<span class="token punctuation">,</span> bytes_to_long<span class="token keyword">from</span> sympy <span class="token keyword">import</span> nextprime<span class="token keyword">from</span> secret <span class="token keyword">import</span> flagp1 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">2048</span><span class="token punctuation">)</span>q1 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span>p2 <span class="token operator">=</span> nextprime<span class="token punctuation">(</span>p1 <span class="token operator">+</span> getPrime<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span><span class="token punctuation">)</span>q2 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">600</span><span class="token punctuation">)</span>e <span class="token operator">=</span> <span class="token number">0x10001</span>N1 <span class="token operator">=</span> p1 <span class="token operator">*</span> p1 <span class="token operator">*</span> q1N2 <span class="token operator">=</span> p2 <span class="token operator">*</span> p2 <span class="token operator">*</span> q2<span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"N1 ="</span><span class="token punctuation">,</span> N1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"N2 ="</span><span class="token punctuation">,</span> N2<span class="token punctuation">)</span>flag1 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">]</span><span class="token punctuation">)</span>flag2 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">[</span><span class="token builtin">len</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span> <span class="token operator">//</span> <span class="token number">2</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">)</span>cipher1 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>flag1<span class="token punctuation">,</span> e<span class="token punctuation">,</span> N1<span class="token punctuation">)</span>cipher2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>flag2<span class="token punctuation">,</span> e<span class="token punctuation">,</span> N2<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cipher1 ="</span><span class="token punctuation">,</span> cipher1<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"cipher2 ="</span><span class="token punctuation">,</span> cipher2<span class="token punctuation">)</span><span class="token comment"># N1 = 3289746385054724131365721020639496300945479666755005407239362220435929471663971559131973068094267242759747682915202602265269024546168034070348080432976135403371083936361236868186476392365554734516698695915807318328547349333450125215426536032220967810893464208090339137598724593917266763998037725309967496052803477931961681761135080900299333158097292389350335121611775110493009954911832572636099153354952171029044016319029661601727739828271424563980850243898202779669776639104067478441675153857040164775196713586656673764171877161326751846236980454659960530174960321852298270258312146241360929350418220172331956030775384681767932014061291168620965347842124549316096247113770711834360498936747471888481237404034471246978342020816271785925362208839937490625070051801028223342083281773366267363149243726101075926327550718757413133631119649782144511080448476370411156544146278468602957599519708203511203435394861053372096309444985117323976240925612725880016576029876493825989064619463226166401883310383733295274652092903872304933657343307118616812213637906513530016004460475073291823916649597185291734261926576108675712303422832460766980003743958182130150811173621769221262799069912858162405156365709344847558244669016188305691537672753134766406649385330682157984720023661279153645005631349488537261911860571171672813544726579872640486753312665928030263533489558821140031095492111373847722540582741061909831250761476687</span><span class="token comment"># N2 = 2292263744571677490370198515319050673022350367021940229132415885393214523108231545410288799524823682686607005535541881885794949322622162858593875970155712564868530006799557973311000615581843236548539733075504282834631939435260232339940338468890310925405870533590386398071667718507612723307978025099102004513584485422609923041107028535400446355591432930994813185411831860201820145983435091523773691560011687528125877698679841462745728326159525372061320952493949821495222248383893254880735838359120880431072244214361010867779059178282739912365087421904643477215607290679708352033106358356290644004853543174075195107627794359272018100648168661860452919746052205404895413998960327066611970768862624073581670828267510841602161728589913841163473811894218339948715205301321356774629578043062238684103507006315521103670400509643518854842374093509082331379305822049420033746124157212615698602544129110388591266923967512746018551734391176602223771675279723873630468099034521371667295520830509224068753383327420799595674898227670628881521095495898465890256628288779785408613688721508315026743250146090703141554141208186588758560579281631449476819201739513661261100456398775274335050320480934180632543242116316388750179657345282978014879818574111951053767465935985181195234991374892341383106554664200986728169474150302232887629401491764905429656980077385228539526682528035467486946883267941678859904770170914569949948781798383</span><span class="token comment"># cipher1 = 758346536265430423952822486066685295768780904671958564513706915003627653309986327906604310025557676880130150973194443591153899441660221125085406078577489990064034099758898680250346992154199616929381594288918352701155172644054184374384778201304104144436102359709180739955762513436889301607686277088230852661148556440251553059814853050711377102806879036793210874472411397851504602916797481132018776755416068149801594219844674499351889997208649442043923826505239289470153001663639688739092310857881616013610569511757767780350165048282465256454770748877584119349207769812826840607665168961680724232789109312681055375411182858820698025923104994832566402422884359019460479145829812817446509615552819113705033128233093081687704471007797878802184788802106948491309583791881593217988561342681568377126606055476508381741342859362339824940846336741346126512500348868154174463810299929429409815515908136711497765026252563374327541491024303290989175383501994515761077240391195396083766760326143468930305986070405962303571534654392917816088220966950447926277802817335097304148972911332832248113849846752219065263639980629213197260594242031101803801865240157341309018859709063723920616432168289755151080828619642932516426139982777613526680161145782566883722320235485389839997229666979487071672091138823743231576011381309205283462045931376953038071401274899229258796970036565931730655471667545203734032609058125128632555918726761</span><span class="token comment"># cipher2 = 2281163375114595112593683220870779643793045914138930809669934728297504812745368657964524831965320392164027435706363680996214578180045485041532876049868691323690200562004954003143194397255512951717400899604307009993030792644670830602941543918898535970779253703220162651022293286208338299826844988619345629892007235258389532666376623514170628541968337364745860334903754371727427376399211310359996960626733244649671665175464666807399652951289553389561033148215888827057495743582318390507639029065358587166019110069479019692411629179363742708597061223484237748437654542910240974030049076975739481960903748359283570086571360417832776823264202688497555419017227144724790205424467059280453940666789219388347170532415234759731375390229140544207931837445265744016932142504371200121886182154284965893665022781184321216382767703694597553489507371271887593799060901908513758134472760311502510753557029741715193386673389466599068008750012915225818076301655694045130332321314233483042503950958442501013310465239137942770667655164906193219286435485452257047415797293472629254376873962168035382262951696816840667369861437088409243033239980128747965838367176274122593955221422537124546203553941387134587884149412499272660959871746858550851448840531698152805786123875121854564754397297726121984646669253047201515221545545683432754661774694401343486893270795112334494874407955432598253951220055000392855162417030953645428808146502304</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解：">题解：</h2><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mfrac><mrow><mi>N</mi><mn>1</mn></mrow><mrow><mi>N</mi><mn>2</mn></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>p</mi><mn>1</mn><mo>∗</mo><mi>p</mi><mn>1</mn><mo>∗</mo><mi>q</mi><mn>1</mn></mrow><mrow><mi>p</mi><mn>2</mn><mo>∗</mo><mi>p</mi><mn>2</mn><mo>∗</mo><mi>q</mi><mn>2</mn></mrow></mfrac><mo>≈</mo><mfrac><mrow><mi>q</mi><mn>1</mn></mrow><mrow><mi>q</mi><mn>2</mn></mrow></mfrac><mspace linebreak="newline"></mspace><mfrac><mrow><mi>q</mi><mn>1</mn></mrow><mrow><mi>q</mi><mn>2</mn></mrow></mfrac><mtext>是</mtext><mfrac><mrow><mi>N</mi><mn>1</mn></mrow><mrow><mi>N</mi><mn>2</mn></mrow></mfrac><mtext>的连续分数，对</mtext><mfrac><mrow><mi>N</mi><mn>1</mn></mrow><mrow><mi>N</mi><mn>2</mn></mrow></mfrac><mtext>进行</mtext><mi>w</mi><mi>i</mi><mi>e</mi><mi>n</mi><mi>e</mi><mi>r</mi><mtext>攻击，求解出</mtext><mi>q</mi><mn>1</mn><mo separator="true">,</mo><mi>q</mi><mn>2</mn><mspace linebreak="newline"></mspace><mtext>由于</mtext><mi>N</mi><mn>1</mn><mo>=</mo><mi>p</mi><mn>1</mn><mo>∗</mo><mi>p</mi><mn>1</mn><mo>∗</mo><mi>q</mi><mn>1</mn><mtext>，现在</mtext><mi>q</mi><mn>1</mn><mtext>已知，求出</mtext><mi>p</mi><mn>1</mn><mo separator="true">,</mo><mtext>同理求出</mtext><mi>p</mi><mn>2</mn><mspace linebreak="newline"></mspace><mtext>对明文前半部分加密  </mtext><mi>c</mi><mi>i</mi><mi>p</mi><mi>h</mi><mi>e</mi><mi>r</mi><mn>1</mn><mo>=</mo><mi>p</mi><mi>o</mi><mi>w</mi><mo stretchy="false">(</mo><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mn>1</mn><mo separator="true">,</mo><mi>e</mi><mo separator="true">,</mo><mi>N</mi><mn>1</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>简单</mtext><mi>R</mi><mi>S</mi><mi>A</mi><mtext>，已知</mtext><mi>c</mi><mo separator="true">,</mo><mi>e</mi><mo separator="true">,</mo><mi>n</mi><mo separator="true">,</mo><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo separator="true">,</mo><mtext>求出</mtext><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mn>1</mn><mo separator="true">,</mo><mtext>同理求出</mtext><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mn>2</mn><mspace linebreak="newline"></mspace><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mn>1</mn><mo>+</mo><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mn>2</mn><mtext>就是</mtext><mi>f</mi><mi>l</mi><mi>a</mi><mi>g</mi><mtext>啦</mtext></mrow><annotation encoding="application/x-tex">\frac{N1}{N2}=\frac{p1*p1*q1}{p2*p2*q2}\approx  \frac{q1}{q2}\\\frac{q1}{q2}是\frac{N1}{N2}的连续分数，对\frac{N1}{N2}进行wiener攻击，求解出q1,q2\\由于N1=p1*p1*q1，现在q1已知，求出p1,同理求出p2\\对明文前半部分加密\ \ cipher1 = pow(flag1, e, N1))\\简单RSA，已知c,e,n,p,q,求出flag1,同理求出flag2\\flag1+flag2就是flag啦</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.2407700000000004em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">是</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">续</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">对</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">进</span><span class="mord cjk_fallback">行</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">i</span><span class="mord mathdefault">e</span><span class="mord mathdefault">n</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord cjk_fallback">攻</span><span class="mord cjk_fallback">击</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">现</span><span class="mord cjk_fallback">在</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">p</span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">明</span><span class="mord cjk_fallback">文</span><span class="mord cjk_fallback">前</span><span class="mord cjk_fallback">半</span><span class="mord cjk_fallback">部</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">加</span><span class="mord cjk_fallback">密</span><span class="mspace"> </span><span class="mspace"> </span><span class="mord mathdefault">c</span><span class="mord mathdefault">i</span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span><span class="mclose">)</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">简</span><span class="mord cjk_fallback">单</span><span class="mord mathdefault" style="margin-right:0.00773em;">R</span><span class="mord mathdefault" style="margin-right:0.05764em;">S</span><span class="mord mathdefault">A</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">已</span><span class="mord cjk_fallback">知</span><span class="mord mathdefault">c</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">理</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord">2</span><span class="mord cjk_fallback">就</span><span class="mord cjk_fallback">是</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mord mathdefault" style="margin-right:0.01968em;">l</span><span class="mord mathdefault">a</span><span class="mord mathdefault" style="margin-right:0.03588em;">g</span><span class="mord cjk_fallback">啦</span></span></span></span></span></p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2<span class="token keyword">import</span> libnum<span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> long_to_bytesN1 <span class="token operator">=</span> <span class="token number">3289746385054724131365721020639496300945479666755005407239362220435929471663971559131973068094267242759747682915202602265269024546168034070348080432976135403371083936361236868186476392365554734516698695915807318328547349333450125215426536032220967810893464208090339137598724593917266763998037725309967496052803477931961681761135080900299333158097292389350335121611775110493009954911832572636099153354952171029044016319029661601727739828271424563980850243898202779669776639104067478441675153857040164775196713586656673764171877161326751846236980454659960530174960321852298270258312146241360929350418220172331956030775384681767932014061291168620965347842124549316096247113770711834360498936747471888481237404034471246978342020816271785925362208839937490625070051801028223342083281773366267363149243726101075926327550718757413133631119649782144511080448476370411156544146278468602957599519708203511203435394861053372096309444985117323976240925612725880016576029876493825989064619463226166401883310383733295274652092903872304933657343307118616812213637906513530016004460475073291823916649597185291734261926576108675712303422832460766980003743958182130150811173621769221262799069912858162405156365709344847558244669016188305691537672753134766406649385330682157984720023661279153645005631349488537261911860571171672813544726579872640486753312665928030263533489558821140031095492111373847722540582741061909831250761476687</span>N2 <span class="token operator">=</span> <span class="token number">2292263744571677490370198515319050673022350367021940229132415885393214523108231545410288799524823682686607005535541881885794949322622162858593875970155712564868530006799557973311000615581843236548539733075504282834631939435260232339940338468890310925405870533590386398071667718507612723307978025099102004513584485422609923041107028535400446355591432930994813185411831860201820145983435091523773691560011687528125877698679841462745728326159525372061320952493949821495222248383893254880735838359120880431072244214361010867779059178282739912365087421904643477215607290679708352033106358356290644004853543174075195107627794359272018100648168661860452919746052205404895413998960327066611970768862624073581670828267510841602161728589913841163473811894218339948715205301321356774629578043062238684103507006315521103670400509643518854842374093509082331379305822049420033746124157212615698602544129110388591266923967512746018551734391176602223771675279723873630468099034521371667295520830509224068753383327420799595674898227670628881521095495898465890256628288779785408613688721508315026743250146090703141554141208186588758560579281631449476819201739513661261100456398775274335050320480934180632543242116316388750179657345282978014879818574111951053767465935985181195234991374892341383106554664200986728169474150302232887629401491764905429656980077385228539526682528035467486946883267941678859904770170914569949948781798383</span>c1 <span class="token operator">=</span> <span class="token number">758346536265430423952822486066685295768780904671958564513706915003627653309986327906604310025557676880130150973194443591153899441660221125085406078577489990064034099758898680250346992154199616929381594288918352701155172644054184374384778201304104144436102359709180739955762513436889301607686277088230852661148556440251553059814853050711377102806879036793210874472411397851504602916797481132018776755416068149801594219844674499351889997208649442043923826505239289470153001663639688739092310857881616013610569511757767780350165048282465256454770748877584119349207769812826840607665168961680724232789109312681055375411182858820698025923104994832566402422884359019460479145829812817446509615552819113705033128233093081687704471007797878802184788802106948491309583791881593217988561342681568377126606055476508381741342859362339824940846336741346126512500348868154174463810299929429409815515908136711497765026252563374327541491024303290989175383501994515761077240391195396083766760326143468930305986070405962303571534654392917816088220966950447926277802817335097304148972911332832248113849846752219065263639980629213197260594242031101803801865240157341309018859709063723920616432168289755151080828619642932516426139982777613526680161145782566883722320235485389839997229666979487071672091138823743231576011381309205283462045931376953038071401274899229258796970036565931730655471667545203734032609058125128632555918726761</span>c2 <span class="token operator">=</span> <span class="token number">2281163375114595112593683220870779643793045914138930809669934728297504812745368657964524831965320392164027435706363680996214578180045485041532876049868691323690200562004954003143194397255512951717400899604307009993030792644670830602941543918898535970779253703220162651022293286208338299826844988619345629892007235258389532666376623514170628541968337364745860334903754371727427376399211310359996960626733244649671665175464666807399652951289553389561033148215888827057495743582318390507639029065358587166019110069479019692411629179363742708597061223484237748437654542910240974030049076975739481960903748359283570086571360417832776823264202688497555419017227144724790205424467059280453940666789219388347170532415234759731375390229140544207931837445265744016932142504371200121886182154284965893665022781184321216382767703694597553489507371271887593799060901908513758134472760311502510753557029741715193386673389466599068008750012915225818076301655694045130332321314233483042503950958442501013310465239137942770667655164906193219286435485452257047415797293472629254376873962168035382262951696816840667369861437088409243033239980128747965838367176274122593955221422537124546203553941387134587884149412499272660959871746858550851448840531698152805786123875121854564754397297726121984646669253047201515221545545683432754661774694401343486893270795112334494874407955432598253951220055000392855162417030953645428808146502304</span>e <span class="token operator">=</span> <span class="token number">0x10001</span><span class="token keyword">def</span> <span class="token function">continuedFra</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算连分数    :param x: 分子    :param y: 分母    :return: 连分数列表    """</span>    cf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">#辗转相除法</span>    <span class="token keyword">while</span> y<span class="token punctuation">:</span>        cf<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">//</span> y<span class="token punctuation">)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x <span class="token operator">%</span> y    <span class="token keyword">return</span> cf<span class="token keyword">def</span> <span class="token function">gradualFra</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算传入列表最后的渐进分数    :param cf: 连分数列表    :return: 该列表最后的渐近分数    """</span>    numerator <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#分子</span>    denominator <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#分母</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> cf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 这里的渐进分数分子分母要分开</span>        numerator<span class="token punctuation">,</span> denominator <span class="token operator">=</span> denominator<span class="token punctuation">,</span> x <span class="token operator">*</span> denominator <span class="token operator">+</span> numerator    <span class="token keyword">return</span> numerator<span class="token punctuation">,</span> denominator<span class="token keyword">def</span> <span class="token function">getGradualFra</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算列表所有的渐近分数    :param cf: 连分数列表    :return: 该列表所有的渐近分数    """</span>    gf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span> <span class="token operator">+</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        gf<span class="token punctuation">.</span>append<span class="token punctuation">(</span>gradualFra<span class="token punctuation">(</span>cf<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> gf<span class="token keyword">def</span> <span class="token function">wienerAttack</span><span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token punctuation">:</span>    cf <span class="token operator">=</span> continuedFra<span class="token punctuation">(</span>n1<span class="token punctuation">,</span> n2<span class="token punctuation">)</span><span class="token comment">#获得连分数列表</span>    <span class="token keyword">for</span> <span class="token punctuation">(</span>p2<span class="token punctuation">,</span> p1<span class="token punctuation">)</span> <span class="token keyword">in</span> getGradualFra<span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#所有渐进分数</span>        <span class="token keyword">if</span> p1 <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>            <span class="token keyword">continue</span>        <span class="token keyword">if</span> n1 <span class="token operator">%</span> p1 <span class="token operator">==</span> <span class="token number">0</span> <span class="token keyword">and</span> p1 <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">return</span> p1<span class="token punctuation">,</span> p2q1<span class="token punctuation">,</span>q2<span class="token operator">=</span>wienerAttack<span class="token punctuation">(</span>N1<span class="token punctuation">,</span> N2<span class="token punctuation">)</span>p1<span class="token punctuation">,</span>f1<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>N1 <span class="token operator">//</span> q1<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span>p2<span class="token punctuation">,</span>f2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>N2 <span class="token operator">//</span> q2<span class="token punctuation">,</span> <span class="token number">2</span><span class="token punctuation">)</span><span class="token comment">#print(p1,f1)</span><span class="token comment">#print(p2,f2)</span><span class="token keyword">if</span> f1<span class="token operator">==</span><span class="token number">1</span> <span class="token keyword">and</span> f2<span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>    phi1<span class="token operator">=</span>p1<span class="token operator">*</span><span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    phi2<span class="token operator">=</span>p2<span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    d1<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi1<span class="token punctuation">)</span>    d2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e<span class="token punctuation">,</span>phi2<span class="token punctuation">)</span>    tflag1<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c1<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> N1<span class="token punctuation">)</span><span class="token punctuation">)</span>    tflag2<span class="token operator">=</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> N2<span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tflag2<span class="token punctuation">)</span>    <span class="token keyword">print</span><span class="token punctuation">(</span>tflag1<span class="token punctuation">)</span>    flag<span class="token operator">=</span><span class="token string">b''</span>    flag<span class="token operator">=</span>tflag1<span class="token operator">+</span>tflag2    <span class="token keyword">print</span><span class="token punctuation">(</span>flag<span class="token punctuation">)</span><span class="token keyword">else</span><span class="token punctuation">:</span>    <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string">"wrong"</span><span class="token punctuation">)</span><span class="token comment">#b'flag&#123;6575266e9fc6411275185799ec9477ee&#125;'</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>[强网杯 2022]factor</h1><h2 id="题目">题目</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> gmpy2 <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">from</span> random <span class="token keyword">import</span> randint<span class="token keyword">from</span> flag <span class="token keyword">import</span> flag<span class="token keyword">def</span> <span class="token function">gen1</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">##attack 3</span>r <span class="token operator">=</span> <span class="token number">2</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p2 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1792</span><span class="token punctuation">)</span>p1 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">1792</span><span class="token punctuation">)</span>q1 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q2 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token builtin">abs</span><span class="token punctuation">(</span>p1<span class="token operator">-</span>p2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> <span class="token punctuation">(</span>p1<span class="token operator">//</span><span class="token punctuation">(</span><span class="token number">2</span><span class="token operator">*</span>r<span class="token operator">*</span>q1<span class="token operator">*</span>q2<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>n1<span class="token punctuation">,</span> n2 <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token operator">**</span>r<span class="token punctuation">)</span><span class="token operator">*</span>q1<span class="token punctuation">,</span> <span class="token punctuation">(</span>p2<span class="token operator">**</span>r<span class="token punctuation">)</span><span class="token operator">*</span>q2<span class="token keyword">break</span>phi1 <span class="token operator">=</span> <span class="token punctuation">(</span>p1<span class="token operator">**</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>phi2 <span class="token operator">=</span> <span class="token punctuation">(</span>p2<span class="token operator">**</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>e1 <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q1<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>e2 <span class="token operator">=</span> randint<span class="token punctuation">(</span><span class="token number">5</span><span class="token punctuation">,</span> <span class="token punctuation">(</span>p2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">if</span> gcd<span class="token punctuation">(</span>e1<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> gcd<span class="token punctuation">(</span>phi1<span class="token punctuation">,</span> e1<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span> <span class="token keyword">and</span> gcd<span class="token punctuation">(</span>phi2<span class="token punctuation">,</span> e2<span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">1</span><span class="token punctuation">:</span><span class="token keyword">break</span><span class="token keyword">return</span> n11<span class="token punctuation">,</span> n12<span class="token punctuation">,</span> e11<span class="token punctuation">,</span> e12<span class="token keyword">def</span> <span class="token function">gen2</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">##attack 2</span>r <span class="token operator">=</span> <span class="token number">7</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>N <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">**</span>r<span class="token punctuation">)</span><span class="token operator">*</span>q<span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">==</span> <span class="token number">4096</span><span class="token punctuation">:</span><span class="token keyword">break</span>idx <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delta <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>mpz<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">##将 N 的值提高到指数 idx 次方，然后将结果转换为一个整数并存储在变量 delta 中。mpz()起保护作用</span>phi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">**</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>d1 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token operator">*</span>idx<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>d2 <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token operator">*</span>idx<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">abs</span><span class="token punctuation">(</span>d1<span class="token operator">-</span>d2<span class="token punctuation">)</span> <span class="token operator">&lt;</span> delta<span class="token punctuation">:</span>m1 <span class="token operator">=</span> invert<span class="token punctuation">(</span>d1<span class="token punctuation">,</span> phi<span class="token punctuation">)</span>m2 <span class="token operator">=</span> invert<span class="token punctuation">(</span>d2<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token keyword">break</span>e2 <span class="token operator">=</span> <span class="token number">0x10001</span><span class="token keyword">return</span> n2<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> m1<span class="token punctuation">,</span> m2<span class="token keyword">def</span> <span class="token function">gen3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span><span class="token comment">#attack1</span>r <span class="token operator">=</span> <span class="token number">7</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>p <span class="token operator">=</span> getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>q <span class="token operator">=</span>getPrime<span class="token punctuation">(</span><span class="token number">512</span><span class="token punctuation">)</span>N <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">**</span>r<span class="token punctuation">)</span><span class="token operator">*</span>qphi <span class="token operator">=</span> <span class="token punctuation">(</span>p<span class="token operator">**</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>p<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span><span class="token builtin">bin</span><span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token operator">-</span><span class="token number">2</span> <span class="token operator">==</span> <span class="token number">4096</span><span class="token punctuation">:</span><span class="token keyword">break</span>idx <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delta <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>mpz<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>b <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token operator">*</span>idx<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>a <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token operator">*</span>idx<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> a<span class="token operator">*</span>b <span class="token operator">&lt;</span> delta<span class="token punctuation">:</span>e <span class="token operator">=</span> invert<span class="token punctuation">(</span>a<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token keyword">return</span> n3<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> bn11<span class="token punctuation">,</span> n12<span class="token punctuation">,</span> e11<span class="token punctuation">,</span> e12 <span class="token operator">=</span> gen1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n11=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n11<span class="token punctuation">&#125;</span></span><span class="token string">\nn12=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n12<span class="token punctuation">&#125;</span></span><span class="token string">\ne11=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e11<span class="token punctuation">&#125;</span></span><span class="token string">\ne12=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e12<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>n2<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> m1<span class="token punctuation">,</span> m2 <span class="token operator">=</span> gen2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token comment">#连分数攻击，求解m1,m2</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n2=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n2<span class="token punctuation">&#125;</span></span><span class="token string">\ne2=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e2<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>n3<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> b <span class="token operator">=</span> gen3<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"n3=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>n3<span class="token punctuation">&#125;</span></span><span class="token string">\ne3=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>e3<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span>m3 <span class="token operator">=</span> bytes_to_long<span class="token punctuation">(</span>flag<span class="token punctuation">)</span>c11 <span class="token operator">=</span> powmod<span class="token punctuation">(</span>m1<span class="token punctuation">,</span> e11<span class="token punctuation">,</span> n11<span class="token punctuation">)</span>c12 <span class="token operator">=</span> powmod<span class="token punctuation">(</span>m2<span class="token punctuation">,</span> e12<span class="token punctuation">,</span> n12<span class="token punctuation">)</span>c2 <span class="token operator">=</span> powmod<span class="token punctuation">(</span>b<span class="token punctuation">,</span> e2<span class="token punctuation">,</span> n2<span class="token punctuation">)</span>c3 <span class="token operator">=</span> powmod<span class="token punctuation">(</span>m3<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"c11=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c11<span class="token punctuation">&#125;</span></span><span class="token string">\nc12=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c12<span class="token punctuation">&#125;</span></span><span class="token string">\nc2=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c2<span class="token punctuation">&#125;</span></span><span class="token string">\nc3=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>c3<span class="token punctuation">&#125;</span></span><span class="token string">\n"</span></span><span class="token punctuation">)</span><span class="token triple-quoted-string string">'''n11=801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637ne11=1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865e12=1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881ne2=65537ne3=8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145c11=18979511327426975645936984732782737165217332092805655747550406443960209507493506811471688957217003792679188427155591583024966608843371190136274378868083075515877811693937328204553788450031542610082653080302874606750443090466407543829279067099563572849101374714795279414177737277837595409805721290786607138569322435729584574023597293220443351227559400618351504654781318871214405850541820427562291662456382362148698864044961814456827646881685994720468255382299912036854657082505810206237294593538092338544641919051145900715456411365065867357857347860000894624247098719102875782712030938806816332901861114078070638796157513248160442185781635520426230183818695937457557248160135402734489627723104008584934936245208116232179751448263136309595931691285743580695792601141363221346329077184688857290503770641398917586422369221744736905117499140140651493031622040723274355292502182795605723573863581253354922291984335841915632076694172921289489383700174864888664946302588049384130628381766560976143458735712162489811693014419190718601945154153130272620025118408017441490090252674737105557818759190934585829634273698371996797545908125156282869589331913665938038870431655063063535672001112420959158339261862052308986374193671007982914711432579cc2=18352572608055902550350386950073774530453857897248738030380007830701135570310622004368605208336922266513238134127496822199799761713782366178177809597137102612444147565578155260524747439899150012223027218489946124086276814899675563837669559795153349686434242738207425653079514376089070980797596457151965772460109519623572502109592612394316680202287712465721767341302234806130244551387296133051760893033194962691942040228545508895009195291106297581470066545991352668826197346830561010198417527057944507902143965634058848276017283478933675052993657822322866778994956205033704582047618324071045349072526540250707463112668579342537349567247810715604220690215313641329522674080146047291570752430231923566302463491877377617044768978997438596643458475128936850994934029476030136643053997549253792076260765459166618369864942681056864815996253315631930002738854235841120321870075261782250357506436825550088826469396508045912258303652912217151127280959435741419961721418428605515096160344688795655562889755165362006775317188009008288782691705879510655892181975003485714604340542378477388225736316682379616676770234557939471098919647053799313777248678455620231721202780830980063824003076308811540534492317719811588898727134190545533822501681653c3=113097822337683973761068913398570777162211043704088253732500045618770280334319497174908657828372816818344430304314992760410247741225285170975119344962728883084314382093407445567724674775086423808679124143380073906159023182353116556175251427048715466914368972746661938211846262612414049036821553068430149530397389927209475908905748728402722287875974303298260579839357610962198145974153609818939841880084892796820949226354126424023144300953584658958900737493704530725894948802258740332090822797815745616247879170037794873059391625680745994045522420168248552864215035136318711240256011217929372430302003068882829637056296413462078222453765071094277727760527662423010417144554652783429899139309180017349156600053882338180319473460877576898373222480215735280046214925463242092830060830764299787309912687294672319845054775281463150375545716818434962456139485501224661520991156961587158843064393883274763714930309353593180897123378717852182761518709151878662808890356934477932099818218743384674756674800089177733447066489275506387382342429495897972218764782517198727316942685748481956118012927027254979181519862451112593068440686462293151078537886822555211870303467014484443432209106264020502334805536091587252238173816637270028678636848763'''</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="题解">题解</h2><p>该题主要是对论文论文：<a href="https://eprint.iacr.org/2015/399.pdf%E7%9A%84%E5%AE%9E%E7%8E%B0%E3%80%82">https://eprint.iacr.org/2015/399.pdf的实现。</a></p><p>gen1()</p><p><img src="/post/294324d9/%E8%81%94%E6%83%B3%E6%88%AA%E5%9B%BE_20230505225140.png" alt="联想截图_20230505225140"></p><p><img src="/post/294324d9/image-20230505225430944.png" alt="image-20230505225430944"></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi mathvariant="normal">∣</mi><mi>N</mi><mn>2</mn><mo>∗</mo><mi>N</mi><mn>1</mn><mtext>−</mtext><mi>q</mi><mn>2</mn><mo>∗</mo><mi>q</mi><mn>1</mn><mi mathvariant="normal">∣</mi><mtext>满足定理</mtext><mn>2</mn><mtext>条件，</mtext><mspace linebreak="newline"></mspace><mi>a</mi><mi>b</mi><mi>s</mi><mo stretchy="false">(</mo><mi>p</mi><mn>1</mn><mo>−</mo><mi>p</mi><mn>2</mn><mo stretchy="false">)</mo><mo>&lt;</mo><mo stretchy="false">(</mo><mi>p</mi><mn>1</mn><mi mathvariant="normal">/</mi><mi mathvariant="normal">/</mi><mo stretchy="false">(</mo><mn>2</mn><mo>∗</mo><mi>r</mi><mo>∗</mo><mi>q</mi><mn>1</mn><mo>∗</mo><mi>q</mi><mn>2</mn><mo stretchy="false">)</mo><mo stretchy="false">)</mo><mtext>满足定理</mtext><mn>5</mn><mtext>。</mtext><mspace linebreak="newline"></mspace><mtext>因此，我们只要对</mtext><mfrac><mrow><mi>N</mi><mn>2</mn></mrow><mrow><mi>N</mi><mn>1</mn></mrow></mfrac><mtext>使用连分数展开</mtext><mo separator="true">,</mo><mtext>可得</mtext><mi>q</mi><mn>1</mn><mo separator="true">,</mo><mi>q</mi><mn>2</mn><mspace linebreak="newline"></mspace><mi>n</mi><mn>1</mn><mo>=</mo><mi>p</mi><msup><mn>1</mn><mi>r</mi></msup><mo>∗</mo><mi>q</mi><mn>1</mn><mspace width="2em"><mi>n</mi><mn>2</mn><mo>=</mo><mi>p</mi><msup><mn>2</mn><mi>r</mi></msup><mo>∗</mo><mi>q</mi><mn>2</mn><mspace width="1em"><mi>r</mi><mo>=</mo><mn>2</mn><mspace linebreak="newline"></mspace><mtext>由于</mtext><mi>p</mi><mn>1</mn><mtext>与</mtext><mi>p</mi><mn>2</mn><mtext>相差较小可得</mtext><mspace linebreak="newline"></mspace><mfrac><mrow><mi>n</mi><mn>1</mn></mrow><mrow><mi>n</mi><mn>2</mn></mrow></mfrac><mo>=</mo><mfrac><mrow><mi>p</mi><mn>1</mn><mo>∗</mo><mi>p</mi><mn>1</mn><mo>∗</mo><mi>q</mi><mn>1</mn></mrow><mrow><mi>p</mi><mn>2</mn><mo>∗</mo><mi>p</mi><mn>2</mn><mo>∗</mo><mi>q</mi><mn>2</mn></mrow></mfrac><mo>≈</mo><mfrac><mrow><mi>q</mi><mn>1</mn></mrow><mrow><mi>q</mi><mn>2</mn></mrow></mfrac><mspace linebreak="newline"></mspace><mtext>又因为</mtext><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mn>11</mn><mo>=</mo><mi>p</mi><mi>o</mi><mi>w</mi><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>m</mi><mn>1</mn><mo separator="true">,</mo><mi>e</mi><mn>11</mn><mo separator="true">,</mo><mi>n</mi><mn>11</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>c</mi><mn>12</mn><mo>=</mo><mi>p</mi><mi>o</mi><mi>w</mi><mi>m</mi><mi>o</mi><mi>d</mi><mo stretchy="false">(</mo><mi>m</mi><mn>2</mn><mo separator="true">,</mo><mi>e</mi><mn>12</mn><mo separator="true">,</mo><mi>n</mi><mn>12</mn><mo stretchy="false">)</mo></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace><mtext>可解出</mtext><mi>m</mi><mn>1</mn><mi>m</mi><mn>2</mn></mspace></mspace></mrow><annotation encoding="application/x-tex">|N2*N1−q2*q1|满足定理2条件，\\abs(p1-p2) &lt; (p1//(2*r*q1*q2))满足定理5。\\因此，我们只要对\frac{N2}{N1}使用连分数展开,可得q1,q2\\n1=p1^r*q1\qquad n2=p2^r*q2\quad r=2\\由于p1与p2相差较小可得\\\frac{n1}{n2}=\frac{p1*p1*q1}{p2*p2*q2}\approx  \frac{q1}{q2}\\又因为\begin{cases}c11 = powmod(m1, e11, n11)\\c12 = powmod(m2, e12, n12)\end{cases}\\可解出m1 m2</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">∣</span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span><span class="mord">−</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mord">∣</span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mord">2</span><span class="mord cjk_fallback">条</span><span class="mord cjk_fallback">件</span><span class="mord cjk_fallback">，</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">b</span><span class="mord mathdefault">s</span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">&lt;</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mord">/</span><span class="mord">/</span><span class="mopen">(</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span><span class="mclose">)</span><span class="mclose">)</span><span class="mord cjk_fallback">满</span><span class="mord cjk_fallback">足</span><span class="mord cjk_fallback">定</span><span class="mord cjk_fallback">理</span><span class="mord">5</span><span class="mord cjk_fallback">。</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.04633em;vertical-align:-0.686em;"></span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">此</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">我</span><span class="mord cjk_fallback">们</span><span class="mord cjk_fallback">只</span><span class="mord cjk_fallback">要</span><span class="mord cjk_fallback">对</span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.36033em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">1</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.10903em;">N</span><span class="mord">2</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mord cjk_fallback">使</span><span class="mord cjk_fallback">用</span><span class="mord cjk_fallback">连</span><span class="mord cjk_fallback">分</span><span class="mord cjk_fallback">数</span><span class="mord cjk_fallback">展</span><span class="mord cjk_fallback">开</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">得</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">1</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span><span class="mspace" style="margin-right:2em;"></span><span class="mord mathdefault">n</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.9088319999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord"><span class="mord">2</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.7143919999999999em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8388800000000001em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">2</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.8777699999999999em;vertical-align:-0.19444em;"></span><span class="mord cjk_fallback">由</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mord cjk_fallback">相</span><span class="mord cjk_fallback">差</span><span class="mord cjk_fallback">较</span><span class="mord cjk_fallback">小</span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">得</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:2.00744em;vertical-align:-0.686em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">n</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.686em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">p</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≈</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:2.20188em;vertical-align:-0.8804400000000001em;"></span><span class="mord"><span class="mopen nulldelimiter"></span><span class="mfrac"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.32144em;"><span style="top:-2.314em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">2</span></span></span><span style="top:-3.23em;"><span class="pstrut" style="height:3em;"></span><span class="frac-line" style="border-bottom-width:0.04em;"></span></span><span style="top:-3.677em;"><span class="pstrut" style="height:3em;"></span><span class="mord"><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mord">1</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:0.8804400000000001em;"><span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="mord cjk_fallback">又</span><span class="mord cjk_fallback">因</span><span class="mord cjk_fallback">为</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord">1</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord">1</span><span class="mord">1</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">c</span><span class="mord">1</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">o</span><span class="mord mathdefault" style="margin-right:0.02691em;">w</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">e</span><span class="mord">1</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">n</span><span class="mord">1</span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span><span class="mspace" style="margin-right:0.16666666666666666em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mord mathdefault">m</span><span class="mord">2</span></span></span></span></span></p><p>对于gen2()</p><p><img src="/post/294324d9/image-20230505232819303.png" alt="image-20230505232819303"></p><p>由题目</p><p>idx = (r*(r-1)) / ((r+1)*(r+1))     delta = int(pow(mpz(N), idx))  abs(d1-d2) &lt; delta:满足定理4，将d1-d2设为x 求解出d1-d2</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mrow><mo fence="true">{</mo><mtable rowspacing="0.3599999999999999em" columnalign="left left" columnspacing="1em"><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mn>1</mn><mo>∗</mo><mi>d</mi><mn>1</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace width="2em"><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo></mspace></mspace></mrow></mstyle></mtd></mtr><mtr><mtd><mstyle scriptlevel="0" displaystyle="false"><mrow><mi>m</mi><mn>2</mn><mo>∗</mo><mi>d</mi><mn>2</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace width="2em"><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo></mspace></mspace></mrow></mstyle></mtd></mtr></mtable></mrow><mspace linebreak="newline"></mspace></mrow><annotation encoding="application/x-tex">\begin{cases}m1*d1\equiv(mod\quad phi)\qquad (1)\\m2*d2\equiv (mod\quad  phi)\qquad (2)\\\end{cases}\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:3.0000299999999998em;vertical-align:-1.25003em;"></span><span class="minner"><span class="mopen delimcenter" style="top:0em;"><span class="delimsizing size4">{</span></span><span class="mord"><span class="mtable"><span class="col-align-l"><span class="vlist-t vlist-t2"><span class="vlist-r"><span class="vlist" style="height:1.69em;"><span style="top:-3.69em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span></span></span><span style="top:-2.25em;"><span class="pstrut" style="height:3.008em;"></span><span class="mord"><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mord mathdefault">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span></span></span></span><span class="vlist-s">​</span></span><span class="vlist-r"><span class="vlist" style="height:1.19em;"><span></span></span></span></span></span></span></span><span class="mclose nulldelimiter"></span></span></span><span class="mspace newline"></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mo stretchy="false">(</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>m</mi><mn>2</mn><mtext>得</mtext><mo>:</mo><mi>m</mi><mn>1</mn><mo>∗</mo><mi>m</mi><mn>2</mn><mo>∗</mo><mi>d</mi><mn>1</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace width="2em"><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mn>2</mn><mo stretchy="false">)</mo><mo>∗</mo><mi>m</mi><mn>2</mn><mtext>得</mtext><mo>:</mo><mi>m</mi><mn>1</mn><mo>∗</mo><mi>m</mi><mn>2</mn><mo>∗</mo><mi>d</mi><mn>2</mn><mo>≡</mo><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace width="2em"><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mo stretchy="false">(</mo><mn>3</mn><mo stretchy="false">)</mo><mo>−</mo><mo stretchy="false">(</mo><mn>4</mn><mo stretchy="false">)</mo><mtext>得：</mtext><mi>m</mi><mn>1</mn><mo>∗</mo><mi>m</mi><mn>2</mn><mo>∗</mo><mo stretchy="false">(</mo><mi>d</mi><mn>1</mn><mo>−</mo><mi>d</mi><mn>2</mn><mo stretchy="false">)</mo><mo>≡</mo><mi>m</mi><mn>2</mn><mo>−</mo><mi>m</mi><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace></mspace></mspace></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">(1)*m2得: m1*m2*d1\equiv(mod\quad phi)\qquad(3)\\(2)*m2得: m1*m2*d2\equiv(mod\quad phi)\qquad(4)\\(3)-(4)得： m1*m2*(d1-d2)\equiv m2-m1(mod\quad phi)\\</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mord cjk_fallback">得</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mord cjk_fallback">得</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">:</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">d</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:2em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">3</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord">4</span><span class="mclose">)</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">：</span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">2</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.72777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span><span class="mspace newline"></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>构造</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>求出的</mtext><mi>d</mi><mn>1</mn><mo>−</mo><mi>d</mi><mn>2</mn><mo separator="true">,</mo><mtext>对</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>变形</mtext><mspace linebreak="newline"></mspace><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mn>2</mn><mo>∗</mo><mi>k</mi><mn>2</mn><mo>+</mo><mi>m</mi><mn>1</mn><mo>∗</mo><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mspace width="2em"><mspace width="2em"><mspace width="2em"><mspace linebreak="newline"></mspace><mo>=</mo><msup><mi>p</mi><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msup><mo>∗</mo><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>q</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo><mo>∗</mo><mo stretchy="false">(</mo><mi>m</mi><mn>2</mn><mo>∗</mo><mi>k</mi><mn>2</mn><mo>+</mo><mi>m</mi><mn>1</mn><mo>∗</mo><mi>k</mi><mn>1</mn><mo stretchy="false">)</mo><mspace linebreak="newline"></mspace><mtext>可以发现</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>与</mtext><mi>n</mi><mtext>有公约数</mtext><msup><mi>p</mi><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msup><mo separator="true">,</mo><mtext>可以得出</mtext><mi>p</mi><mo separator="true">,</mo><mi>q</mi><mo separator="true">,</mo><mtext>解出</mtext><mi>b</mi></mspace></mspace></mspace></mrow><annotation encoding="application/x-tex">构造f(x)求出的d1-d2,对f(x)变形\\f(x)=phi*(m2*k2+m1*k1)\qquad \qquad \qquad\\=p^{r-1}*(p-1)*(q-1)*(m2*k2+m1*k1)\\可以发现f(x)与n有公约数p^{r-1},可以得出p,q,解出b</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">造</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord cjk_fallback">的</span><span class="mord mathdefault">d</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">d</span><span class="mord">2</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">对</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord cjk_fallback">变</span><span class="mord cjk_fallback">形</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span><span class="mspace" style="margin-right:2em;"></span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.36687em;vertical-align:0em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1.058548em;vertical-align:-0.19444em;"></span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.77777em;vertical-align:-0.08333em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">2</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord mathdefault">m</span><span class="mord">1</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord">1</span><span class="mclose">)</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">发</span><span class="mord cjk_fallback">现</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">约</span><span class="mord cjk_fallback">数</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">可</span><span class="mord cjk_fallback">以</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">p</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault" style="margin-right:0.03588em;">q</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord cjk_fallback">解</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">b</span></span></span></span></span></p><p>对于gen3():</p><p><img src="/post/294324d9/image-20230505234835055.png" alt="image-20230505234835055"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python">题目中idx <span class="token operator">=</span> <span class="token punctuation">(</span>r<span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span> <span class="token operator">/</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>r<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">)</span>delta <span class="token operator">=</span> <span class="token builtin">int</span><span class="token punctuation">(</span><span class="token builtin">pow</span><span class="token punctuation">(</span>mpz<span class="token punctuation">(</span>N<span class="token punctuation">)</span><span class="token punctuation">,</span> idx<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token keyword">while</span> <span class="token boolean">True</span><span class="token punctuation">:</span>b <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token operator">*</span>idx<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span>a <span class="token operator">=</span> getRandomNBitInteger<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span><span class="token number">2048</span><span class="token operator">*</span>idx<span class="token punctuation">)</span><span class="token operator">//</span><span class="token number">2</span><span class="token punctuation">)</span><span class="token keyword">if</span> a<span class="token operator">*</span>b <span class="token operator">&lt;</span> delta<span class="token punctuation">:</span>e <span class="token operator">=</span> invert<span class="token punctuation">(</span>a<span class="token punctuation">,</span> phi<span class="token punctuation">)</span><span class="token operator">*</span>b<span class="token keyword">return</span> n3<span class="token punctuation">,</span> e3<span class="token punctuation">,</span> b<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><p>满足定理3，可以分解n3，解出m3</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>对于</mtext><mi>e</mi><mo>=</mo><mi>i</mi><mi>n</mi><mi>v</mi><mi>e</mi><mi>r</mi><mi>t</mi><mo stretchy="false">(</mo><mi>a</mi><mo separator="true">,</mo><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo><mo>∗</mo><mi>b</mi><mtext>，两边同乘以</mtext><mi>a</mi><mtext>的逆元</mtext><mi>x</mi><mspace linebreak="newline"></mspace><mtext>即得到</mtext><mi>e</mi><mo>∗</mo><mi>x</mi><mo>≡</mo><mi>b</mi><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mspace width="1em"><mi>p</mi><mi>h</mi><mi>i</mi><mo stretchy="false">)</mo></mspace></mrow><annotation encoding="application/x-tex">对于e = invert(a, phi)*b，两边同乘以a的逆元x\\即得到e*x\equiv b(mod\quad phi)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">对</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">i</span><span class="mord mathdefault">n</span><span class="mord mathdefault" style="margin-right:0.03588em;">v</span><span class="mord mathdefault">e</span><span class="mord mathdefault" style="margin-right:0.02778em;">r</span><span class="mord mathdefault">t</span><span class="mopen">(</span><span class="mord mathdefault">a</span><span class="mpunct">,</span><span class="mspace" style="margin-right:0.16666666666666666em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.69444em;vertical-align:0em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">，</span><span class="mord cjk_fallback">两</span><span class="mord cjk_fallback">边</span><span class="mord cjk_fallback">同</span><span class="mord cjk_fallback">乘</span><span class="mord cjk_fallback">以</span><span class="mord mathdefault">a</span><span class="mord cjk_fallback">的</span><span class="mord cjk_fallback">逆</span><span class="mord cjk_fallback">元</span><span class="mord mathdefault">x</span></span><span class="mspace newline"></span><span class="base"><span class="strut" style="height:0.68333em;vertical-align:0em;"></span><span class="mord cjk_fallback">即</span><span class="mord cjk_fallback">得</span><span class="mord cjk_fallback">到</span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mspace" style="margin-right:1em;"></span><span class="mord mathdefault">p</span><span class="mord mathdefault">h</span><span class="mord mathdefault">i</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>构造</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mo>=</mo><mi>e</mi><mo>∗</mo><mi>x</mi><mo>−</mo><mi>b</mi><mtext>求出</mtext><mi>x</mi><mtext>，</mtext><mi>f</mi><mo stretchy="false">(</mo><mi>x</mi><mo stretchy="false">)</mo><mtext>与</mtext><mi>n</mi><mtext>有最大公约数</mtext><msup><mi>p</mi><mrow><mi>r</mi><mo>−</mo><mn>1</mn></mrow></msup></mrow><annotation encoding="application/x-tex">构造f(x)=e*x-b求出x，f(x)与n有最大公约数p^{r-1}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord cjk_fallback">构</span><span class="mord cjk_fallback">造</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">=</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">e</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.66666em;vertical-align:-0.08333em;"></span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">−</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:1.1141079999999999em;vertical-align:-0.25em;"></span><span class="mord mathdefault">b</span><span class="mord cjk_fallback">求</span><span class="mord cjk_fallback">出</span><span class="mord mathdefault">x</span><span class="mord cjk_fallback">，</span><span class="mord mathdefault" style="margin-right:0.10764em;">f</span><span class="mopen">(</span><span class="mord mathdefault">x</span><span class="mclose">)</span><span class="mord cjk_fallback">与</span><span class="mord mathdefault">n</span><span class="mord cjk_fallback">有</span><span class="mord cjk_fallback">最</span><span class="mord cjk_fallback">大</span><span class="mord cjk_fallback">公</span><span class="mord cjk_fallback">约</span><span class="mord cjk_fallback">数</span><span class="mord"><span class="mord mathdefault">p</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.864108em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mord mathdefault mtight" style="margin-right:0.02778em;">r</span><span class="mbin mtight">−</span><span class="mord mtight">1</span></span></span></span></span></span></span></span></span></span></span></span></span></p><p>求出p,q,得到flag</p><h2 id="wp">wp</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">from</span> Crypto<span class="token punctuation">.</span>Util<span class="token punctuation">.</span>number <span class="token keyword">import</span> <span class="token operator">*</span><span class="token keyword">import</span> gmpy2n11<span class="token operator">=</span><span class="token number">801049932940568005269978912396585741498810389425615966036828877784238116634177290247194019425111606811005728521368879065336038221361037062407029836155148874719789714345603547779284558101833801155509762818376470874215789574939002212274399950433269775325144015468620263028557804618774240232988157961712628677901130814703917513004114547234375629747176834581166306552311075522669403347828095831520693563291249869832390698646691647204371133362254846234990175138047928703289833460734235302093916147489509206061923877623300596194317059884824322527532662470348274079800781120104946546063500763852622187404608639542858285661288293918912184354236687975919510300221932074135531028314170475917110204254042336116619335841213418990605590620842511615815443114612333881430920769002933370887494558640833005339906706603497809846863863967391543647049224309556936909768179259581851520214669904560467640473144481633920438487615788689262961741053146610554997224861331949716721056553499531186695425439163222802917813140266513735841447717418846360096652592844940362932171019143434080184728093326143821165097895058935372215708948088248596585127475770021962501262915274497478428868130455122612016408381607561200802267038869516896665387576895570245272035575637</span>n12<span class="token operator">=</span><span class="token number">635401970340205725139325006504978344512744926958688031423448003992072769931808217486709574151492230879374574313457662436423263437792389711379687512056391117410807565492548718691166183372633151644917135272259770997096195518489056319350258673723095417922153182423913759272893696867426193704479752772511081457729513843682588951499551132432923147997238597538055902932123792252593514225328196541483451747314048080824405530742533473914329294346486691684904100406972073037050089861816604505650042953778360621934380815999541183067585498606053857125775979915077329566722531830089714823979965934190338538564188253271016367299890015449611141166780048763403252309160517164569110740561584100839212138661881615351382946813818078899882595313362934594951895560189003438775450675343590147821186953526262224973333962454561275321925151619178204499342339749637758100126893330994252902926509705617882239610380420830791088907378397226817514095468815228186716220057075095711894070032344613244803934541318573847029365563159918970404057137270884587905766828750387753130065274147902379993224780149663600462492281891320702134153853359393588902750423972068679293373333869389393970353760507436913233657422185531482023237384247535554666481760197851108297145147371</span>e11<span class="token operator">=</span><span class="token number">1898839980562048754607069073527844852132536432440793106124181406514770178066775988232362054809850074774981836898118651469424148725970708199461113088705044905633592578936333918328544505910996746428679299419879472444790941363558025887620570856598548320246426354974395765243741646121743413447132297230365355148066914830856904433750379114692122900723772114991199979638987571559860550883470977246459523068862898859694461427148626628283198896659337135438506574799585378178678790308410266713256003479022699264568844505977513537013529212961573269494683740987283682608189406719573301573662696753903050991812884192192569737274321828986847640839813424701894578472933385727757445011291134961124822612239865</span>e12<span class="token operator">=</span><span class="token number">1262647419018930022617189608995712260095623047273893811529510754596636390255564988827821761126917976430978175522450277907063247981106405519094560616378241247111698915199999363948015703788616554657275147338766805289909261129165025156078136718573006479030827585347458143645738353716189131209398056741864848486818076440355778886993462012533397208330925057305502653219173629466948635110352752162442552541812665607516753186595817376029707777599029040724727499952161261179707271814405907165207904499722122779096230563548011491932378429654764486855147873135769116637484240454596231092684424572258119768093562747249251518965380465994055049411715353547147466711949391814550591591830515262296556050946881</span>n2<span class="token operator">=</span><span class="token number">209798341155088334158217087474227805455138848036904381404809759100627849272231840321985747935471287990313456209656625928356468120896887536235496490078123448217785939608443507649096688546074968476040552137270080120417769906047001451239544719039212180059396791491281787790213953488743488306241516010351179070869410418232801398578982244984544906579574766534671056023774009163991804748763929626213884208260660722705479782932001102089367261720194650874553305179520889083170973755913964440175393646890791491057655226024046525748177999422035469428780228224800114202385209306803288475439775037067014297973202621118959024226798935588827359265962780792266516120013602384766460619793738405476219362508944225007365127768741191310079985425349292613888185378948854602285379329682053663283534930182589905986063348509703027498270111412063194971956202729807710253369312175636837558252924035002153389909587349043986253518050303628071319876207392440085675892353421232158925122721273720564784886530611286461575045181073744696415657043278123662980166364494583141297996445429477446442693717498789391918530672770193730629928408766563592081857706608049076318165712479742423149330311238462044666384622153280310696667586565906758451118241914402257039981388209</span>e2<span class="token operator">=</span><span class="token number">65537</span>n3<span class="token operator">=</span><span class="token number">539779851369541956878655738599584730199799866957191805784596190682932284216781781433367450841202917758999300635019369629627621029957135109806205877317954671312041249493462048283611940752235036153024920172209763260723728345918562258401803973624430150143563078517485996070862532682695228590709019451174548520135142052216785774589096706631010293690859363524584240662502290912412366366114571976050857239915691266377257797199583543940504695517331512813468837128344612227973709974625418257243011036826241599265375741977853552204640800449679679351666009764297016524814036295707311913711955324055690490892097177271718850857268982130811714517356073266905474635370690445031512184247179039751734276906533177939993769044135143389748416635981226449566039039202521305851567296884751935162651063209779647359922622084851547605090230221057349511482738300221222563908357379545905837110168948295030747460300104202323692732549831403834387939156877086852393515817984772384147449841124275061609701453997579569931391166586163299940486204581696722731952467570857217406030804590055255431828403195798003509083922294733709507134156466158642941338493323430671502043066148246348074878064089651235355282144209668143249348243220714471988019011613749340243917652821</span>e3<span class="token operator">=</span><span class="token number">8179300978753084587812861894047395225516049110376948812109811319430275614612773726672345893359691900281432484382670047044697374818043512731533402576374645405477207239801498428774783768163880078495448747421425078521981578408638790336528372019271073712013371141939808017049399434858687299480461753638164719404612128939787055797762174745092074547412183349192156638711750872083313795551439465507724807626674514935170104573715458782366469587138508845980490673890245713729782917089910271980557159592807350504157192913530007199510144004848020221181558472160543018733124225266127379373751910439604459368078652499029070936707349862139053913745186413782066470461478961703013591655136140060879250067379283913798867648758171004535775565306842444545755351202796833177560656564652632975685912935281581268141803696686952259539945588609591385807620108279333498170028167338690235117003515264281843953984997958878272347778561933726792473981855755454522886321669676790813189668084373153897754540290867346751033567500922477317530445967753955221454744946208555394588111484610700789566547507402309549957740815535069057837915204852490930168843605732632328017129154852857227895362549146737618906180651623216848500491438142456250653458053922622240299736136335179639180898730269690699965799644757774472147210271111150769048976871249731156387939260749192370361488285775377622944817570292095201906142567403539151179209316853493906909989301225903409448461436855145</span>c11<span class="token operator">=</span><span class="token number">18979511327426975645936984732782737165217332092805655747550406443960209507493506811471688957217003792679188427155591583024966608843371190136274378868083075515877811693937328204553788450031542610082653080302874606750443090466407543829279067099563572849101374714795279414177737277837595409805721290786607138569322435729584574023597293220443351227559400618351504654781318871214405850541820427562291662456382362148698864044961814456827646881685994720468255382299912036854657082505810206237294593538092338544641919051145900715456411365065867357857347860000894624247098719102875782712030938806816332901861114078070638796157513248160442185781635520426230183818695937457557248160135402734489627723104008584934936245208116232179751448263136309595931691285743580695792601141363221346329077184688857290503770641398917586422369221744736905117499140140651493031622040723274355292502182795605723573863581253354922291984335841915632076694172921289489383700174864888664946302588049384130628381766560976143458735712162489811693014419190718601945154153130272620025118408017441490090252674737105557818759190934585829634273698371996797545908125156282869589331913665938038870431655063063535672001112420959158339261862052308986374193671007982914711432579</span>c12<span class="token operator">=</span><span class="token number">336587005671304527566745948355290412636261748969581976214239578621816863343117433524033533838636941679300497270909696775021031004312477997130741361709262822736904340641138652359632950455651920464042448022467664596484055174270895170499076347333381222768518599018520948098943626229061996126260154604038101543546588917619576702866444998578555907070990331574722135141778182631559802154493815687284077524469331290249057291163803290619701104007028836609832847351748020354798788508790258935718399783002069490123663345156902440501507117289747695510266461539019431610123351176227443612317037899257774045751487135646052309277098939919088029284437221840182769808850184827681307611389353392683707516141736067793897378911235819049432542758429901945202632117089595899280390575706266239252841152490534353760118231918190110043319877744119083811214707593122757409240645257409097436061825613686773916466122693168971062418046703969144004779270391320645495586024342668002497155358623795942692477164489475917351003149045087283510728981096449890130735055015075557614253867698702479920619299919816768972581273507837309179450374634916567083251630203067065663910073926990517108921490442919372774170201239734064819301693527366233007925670043499415100789027665</span>c2<span class="token operator">=</span><span class="token number">18352572608055902550350386950073774530453857897248738030380007830701135570310622004368605208336922266513238134127496822199799761713782366178177809597137102612444147565578155260524747439899150012223027218489946124086276814899675563837669559795153349686434242738207425653079514376089070980797596457151965772460109519623572502109592612394316680202287712465721767341302234806130244551387296133051760893033194962691942040228545508895009195291106297581470066545991352668826197346830561010198417527057944507902143965634058848276017283478933675052993657822322866778994956205033704582047618324071045349072526540250707463112668579342537349567247810715604220690215313641329522674080146047291570752430231923566302463491877377617044768978997438596643458475128936850994934029476030136643053997549253792076260765459166618369864942681056864815996253315631930002738854235841120321870075261782250357506436825550088826469396508045912258303652912217151127280959435741419961721418428605515096160344688795655562889755165362006775317188009008288782691705879510655892181975003485714604340542378477388225736316682379616676770234557939471098919647053799313777248678455620231721202780830980063824003076308811540534492317719811588898727134190545533822501681653</span>c3<span class="token operator">=</span><span class="token number">113097822337683973761068913398570777162211043704088253732500045618770280334319497174908657828372816818344430304314992760410247741225285170975119344962728883084314382093407445567724674775086423808679124143380073906159023182353116556175251427048715466914368972746661938211846262612414049036821553068430149530397389927209475908905748728402722287875974303298260579839357610962198145974153609818939841880084892796820949226354126424023144300953584658958900737493704530725894948802258740332090822797815745616247879170037794873059391625680745994045522420168248552864215035136318711240256011217929372430302003068882829637056296413462078222453765071094277727760527662423010417144554652783429899139309180017349156600053882338180319473460877576898373222480215735280046214925463242092830060830764299787309912687294672319845054775281463150375545716818434962456139485501224661520991156961587158843064393883274763714930309353593180897123378717852182761518709151878662808890356934477932099818218743384674756674800089177733447066489275506387382342429495897972218764782517198727316942685748481956118012927027254979181519862451112593068440686462293151078537886822555211870303467014484443432209106264020502334805536091587252238173816637270028678636848763</span><span class="token keyword">def</span> <span class="token function">continuedFra</span><span class="token punctuation">(</span>x<span class="token punctuation">,</span> y<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算连分数    :param x: 分子    :param y: 分母    :return: 连分数列表    """</span>    cf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token comment">#辗转相除法</span>    <span class="token keyword">while</span> y<span class="token punctuation">:</span>        cf<span class="token punctuation">.</span>append<span class="token punctuation">(</span>x <span class="token operator">//</span> y<span class="token punctuation">)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> x <span class="token operator">%</span> y    <span class="token keyword">return</span> cf<span class="token keyword">def</span> <span class="token function">gradualFra</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算传入列表最后的渐进分数    :param cf: 连分数列表    :return: 该列表最后的渐近分数    """</span>    numerator <span class="token operator">=</span> <span class="token number">0</span><span class="token comment">#分子</span>    denominator <span class="token operator">=</span> <span class="token number">1</span><span class="token comment">#分母</span>    <span class="token keyword">for</span> x <span class="token keyword">in</span> cf<span class="token punctuation">[</span><span class="token punctuation">:</span><span class="token punctuation">:</span><span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token comment"># 这里的渐进分数分子分母要分开</span>        numerator<span class="token punctuation">,</span> denominator <span class="token operator">=</span> denominator<span class="token punctuation">,</span> x <span class="token operator">*</span> denominator <span class="token operator">+</span> numerator    <span class="token keyword">return</span> <span class="token punctuation">(</span>numerator<span class="token punctuation">,</span> denominator<span class="token punctuation">)</span><span class="token keyword">def</span> <span class="token function">getGradualFra</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token triple-quoted-string string">"""计算列表所有的渐近分数    :param cf: 连分数列表    :return: 该列表所有的渐近分数    """</span>    gf <span class="token operator">=</span> <span class="token punctuation">[</span><span class="token punctuation">]</span>    <span class="token keyword">for</span> i <span class="token keyword">in</span> <span class="token builtin">range</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">,</span> <span class="token builtin">len</span><span class="token punctuation">(</span>cf<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">:</span>        gf<span class="token punctuation">.</span>append<span class="token punctuation">(</span>gradualFra<span class="token punctuation">(</span>cf<span class="token punctuation">[</span><span class="token punctuation">:</span>i<span class="token punctuation">]</span><span class="token punctuation">)</span><span class="token punctuation">)</span>    <span class="token keyword">return</span> gf<span class="token comment">#attack </span><span class="token keyword">def</span> <span class="token function">solveGen12</span> <span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    cf<span class="token operator">=</span>continuedFra<span class="token punctuation">(</span>n11<span class="token punctuation">,</span>n12<span class="token punctuation">)</span>    <span class="token comment">#print(cf)</span>    gf<span class="token operator">=</span>getGradualFra<span class="token punctuation">(</span>cf<span class="token punctuation">)</span>    <span class="token comment">#print(gf)</span>    r<span class="token operator">=</span><span class="token number">2</span>    f<span class="token operator">=</span><span class="token number">0</span>    <span class="token keyword">for</span> j<span class="token punctuation">,</span>i <span class="token keyword">in</span> gf<span class="token punctuation">[</span><span class="token number">1</span><span class="token punctuation">:</span><span class="token punctuation">]</span><span class="token punctuation">:</span>        <span class="token keyword">if</span> i <span class="token operator">!=</span> <span class="token number">1</span> <span class="token keyword">and</span> j <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>            <span class="token keyword">if</span> n11<span class="token operator">%</span>i<span class="token operator">==</span><span class="token number">0</span> <span class="token keyword">and</span> n12<span class="token operator">%</span>j<span class="token operator">==</span><span class="token number">0</span><span class="token punctuation">:</span>                <span class="token keyword">print</span><span class="token punctuation">(</span><span class="token number">1</span><span class="token punctuation">)</span>                f<span class="token operator">=</span><span class="token number">1</span>                p1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>n11 <span class="token operator">//</span> i<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token comment"># print(p1)</span>                p2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>n12 <span class="token operator">//</span> j<span class="token punctuation">,</span> r<span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>                <span class="token comment"># print(p2)</span>                phi1 <span class="token operator">=</span> p1 <span class="token operator">*</span> <span class="token punctuation">(</span>p1 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>i <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                phi2 <span class="token operator">=</span> p2 <span class="token operator">*</span> <span class="token punctuation">(</span>p2 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>j <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>                d1 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e11<span class="token punctuation">,</span> phi1<span class="token punctuation">)</span>                d2 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e12<span class="token punctuation">,</span> phi2<span class="token punctuation">)</span>                mm1 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c11<span class="token punctuation">,</span> d1<span class="token punctuation">,</span> n11<span class="token punctuation">)</span>                mm2 <span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c12<span class="token punctuation">,</span> d2<span class="token punctuation">,</span> n12<span class="token punctuation">)</span>                <span class="token keyword">return</span> mm1<span class="token punctuation">,</span> mm2m1<span class="token punctuation">,</span>m2<span class="token operator">=</span>solveGen1<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"m1=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>m1<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"m2=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>m2<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>m1<span class="token operator">=</span><span class="token number">167033559384298522723574512241709447697750495062051373339874928117760768631565225663704494711294488556402223152830158600944819657473430506318731286655519728589208977191031849602792050411662024383502548579402516538753112670329781366297260905517214408459895097308286783418547254449419676568096534767340832822470233461516097690657337287889405321592527860524201824371955082411119548743528220794151774190322092515459637969925138496615421690273925560390321721643556915400569894100488394008220811596560968566833296068500476868375996187754631888256419438775013308064639754700359028260289266420692324376220460340153811660590804281527733243177527178698523018103373311259548716062006020121615186595491453534952848570829485638553678760994354019044715078062414748269425818079274218450448217803229617020494546843594180682307375768323235309661628678546003718924902228908888185484412626429441196588985691713767554591991735686919964937441820738008046218954331990752603146125777571183543616375946363623251491371247594696767767918341279655251868517380267258878990871525012299220182939441091806206624720194246691865367941280852353547267930167542329486261552854451001546455904682702366584763940463481732752992487773878685793275652314513014646439770319249</span>m2<span class="token operator">=</span><span class="token number">69076592619651589706691933313826601279528159013379300261609967352748175972662567592943146333144902972780621576811778115958019397062270814057821407036352529372113467206560849267275602453288227390740346959857322649956992529510338912182696854496200041245775322561359546062736323363354733510660780489558215103581313753430117471361013972291126160134685745917715386613876414886325025010348396410346222272648657374977901786530969589123771261040601627906959627351426881111464943086191212001374558078570830214670111422731410682212770683631011038163623234630601007231955235905528750031898751733232446644402069580930596404887288935724879795199659228145390574503341087565153744389617539607111733080406125228559950446336384154674927952991964565965760896308198785777527690939982523416579778957846249005801121682470447753074839399698315364445972142571727376297422736232659133510385808957304351692629177239808890209690661982628408419571131470406142532800330250274534615063537773403062635865734585850821677880659194795963303700015814615804751909674946908768425855361277478190640780518117596780808975720826484146074528564147729911624750510271539697935538038871993380673492022099183863825435237650082706168588306816635866830411481021066926833372846305</span><span class="token triple-quoted-string string">'''#attack #sageP.&lt;x>= Zmod(n2)[]f = m1*m2*x -(m2-m1)x0 = f.monic().small_roots(X=2 ^ 672, beta=0.5)[0]x0 = int(x0) #x0=d1-d2#x0=3549384841973213309621072870106254602253656209014197632823411827739864720839737811030401306800875843661955913236834617545674409639259372934721570288281471569069146201536309734296340629562207991295283896'''</span><span class="token keyword">def</span> <span class="token function">solveGen3</span><span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token punctuation">:</span>    r2 <span class="token operator">=</span> <span class="token number">7</span>    x0<span class="token operator">=</span><span class="token number">3549384841973213309621072870106254602253656209014197632823411827739864720839737811030401306800875843661955913236834617545674409639259372934721570288281471569069146201536309734296340629562207991295283896</span>    xx<span class="token operator">=</span> m1<span class="token operator">*</span>m2<span class="token operator">*</span>x0 <span class="token operator">-</span><span class="token punctuation">(</span>m2<span class="token operator">-</span>m1<span class="token punctuation">)</span>    tp2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>xx<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>    p2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>tp2<span class="token punctuation">,</span>r2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>    q2<span class="token operator">=</span>n2<span class="token operator">//</span><span class="token punctuation">(</span>tp2<span class="token operator">*</span>p2<span class="token punctuation">)</span>    phi2<span class="token operator">=</span>p2<span class="token operator">**</span><span class="token number">6</span><span class="token operator">*</span><span class="token punctuation">(</span>p2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">*</span><span class="token punctuation">(</span>q2<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span>    d2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e2<span class="token punctuation">,</span>phi2<span class="token punctuation">)</span>    b<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c2<span class="token punctuation">,</span>d2<span class="token punctuation">,</span>n2<span class="token punctuation">)</span>    <span class="token keyword">return</span> bb<span class="token operator">=</span>solveGen2<span class="token punctuation">(</span><span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span><span class="token string-interpolation"><span class="token string">f"b=</span><span class="token interpolation"><span class="token punctuation">&#123;</span>b<span class="token punctuation">&#125;</span></span><span class="token string">"</span></span><span class="token punctuation">)</span>b<span class="token operator">=</span><span class="token number">17623328397444755087284107444487160871617682792372566887446834913712379373851213638071138745775127796589871734472781755930251379295485892067473329763997583502625804363418069062645997342172778252731889437</span><span class="token comment">#flag</span><span class="token comment">#sage</span><span class="token comment">#PR.&lt;x> = PolynomialRing(Zmod(n3))</span><span class="token comment">#f = e3 * x -int(b)</span><span class="token comment">#x0 = f.monic().small_roots(X=2 ^ 672, beta=0.5)[0]</span>x<span class="token operator">=</span><span class="token number">16731588253866128571163910758846497670928988943944436618514118121761227689113110943465936457030051710610254169629932203082368465978112219532158626669990117160986135699541953274434781877420432743573801621</span>tp3<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>gcd<span class="token punctuation">(</span>e3<span class="token operator">*</span>x<span class="token operator">-</span>b<span class="token punctuation">,</span>n3<span class="token punctuation">)</span>r3<span class="token operator">=</span><span class="token number">7</span>p3 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>iroot<span class="token punctuation">(</span>tp3<span class="token punctuation">,</span> r3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span><span class="token punctuation">[</span><span class="token number">0</span><span class="token punctuation">]</span>q3 <span class="token operator">=</span> n3 <span class="token operator">//</span> <span class="token punctuation">(</span>p3<span class="token operator">**</span>r3<span class="token punctuation">)</span>phi3 <span class="token operator">=</span> p3 <span class="token operator">**</span> <span class="token punctuation">(</span>r3<span class="token operator">-</span><span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>p3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">*</span> <span class="token punctuation">(</span>q3 <span class="token operator">-</span> <span class="token number">1</span><span class="token punctuation">)</span>d3 <span class="token operator">=</span> gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>e3<span class="token punctuation">,</span> phi3<span class="token punctuation">)</span>m<span class="token operator">=</span> <span class="token builtin">pow</span><span class="token punctuation">(</span>c3<span class="token punctuation">,</span> d3<span class="token punctuation">,</span> n3<span class="token punctuation">)</span><span class="token keyword">print</span><span class="token punctuation">(</span>long_to_bytes<span class="token punctuation">(</span><span class="token builtin">int</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token punctuation">)</span><span class="token comment">#qwb&#123;8633ce6d-fece-4cf1-8f0f-f27e5bf6d678&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      <categories>
          
          <category> 练习题 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维纳攻击 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>连分数</title>
      <link href="/post/b2d30773.html"/>
      <url>/post/b2d30773.html</url>
      
        <content type="html"><![CDATA[<p>研究wiener之前先了解来连分数</p><h1>连分数</h1><h2 id="简单连分数">简单连分数</h2><p>a0是任意整数,ai是正整数（i&gt;0):部分商 <em>[a0,a1,a2…]</em>   几里得计算每次计算出来的商</p><p><img src="/post/b2d30773/202304271918285.jpg" alt></p><h3 id="有限连分数">有限连分数</h3><p>定理：任何有理数都可以唯一的表示成有限连分数；任何有限连分数都是一个有理数</p><p>[a0,a1,…,an]=[a0,…,am,[a m+1,…,an] ]</p><p>给定有限连分数，求倒数</p><p>如果a0=0,就把0去掉：[a1,…an]</p><p>如果a0!=0,就在前面补上0：[0,a0,…an]</p>]]></content>
      
      
      <categories>
          
          <category> 知识 </category>
          
      </categories>
      
      
        <tags>
            
            <tag> 维纳攻击 </tag>
            
            <tag> 密码 </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>密码数论基础</title>
      <link href="/post/99f8f561.html"/>
      <url>/post/99f8f561.html</url>
      
        <content type="html"><![CDATA[<h1>基础数论</h1><p><img src="/post/99f8f561/%E6%95%B0%E5%AD%A61.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#  &amp;用于取位操作，例如（x&amp;1）的结果是将十进制数（x）转换成二进制数之后再取最后一位</span><span class="token keyword">def</span> <span class="token function">fastPower</span><span class="token punctuation">(</span><span class="token builtin">int</span> base<span class="token punctuation">,</span> <span class="token builtin">int</span> exponent<span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>    <span class="token builtin">int</span> <span class="token builtin">sum</span> <span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>    <span class="token keyword">while</span> <span class="token punctuation">(</span>exponent <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>         <span class="token comment">#&amp;取二进制末尾</span>        <span class="token keyword">if</span> <span class="token punctuation">(</span><span class="token punctuation">(</span>exponent <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">)</span> <span class="token operator">!=</span> <span class="token number">0</span><span class="token punctuation">)</span> <span class="token punctuation">&#123;</span>            <span class="token comment">#实现2^8*2^2*2^1</span>            <span class="token builtin">sum</span> <span class="token operator">*=</span> base<span class="token punctuation">;</span>        <span class="token punctuation">&#125;</span>     <span class="token comment"># 对指数进行移位 1011->0101->0010->0000</span>     exponent <span class="token operator">=</span> expnonent <span class="token operator">>></span> <span class="token number">1</span><span class="token punctuation">;</span>      <span class="token comment"># 让base的次幂以2的倍数增长   实现base->base^2->base^4->base^8</span>     base <span class="token operator">*=</span> base<span class="token punctuation">;</span>             <span class="token punctuation">&#125;</span>    <span class="token keyword">return</span> <span class="token builtin">sum</span><span class="token punctuation">;</span><span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-折半">2.折半</h3><p><img src="/post/99f8f561/%E6%95%B0%E5%AD%A62.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">quik_power</span><span class="token punctuation">(</span><span class="token builtin">int</span> base<span class="token punctuation">,</span> <span class="token builtin">int</span> power<span class="token punctuation">)</span><span class="token punctuation">&#123;</span>result <span class="token operator">=</span> <span class="token number">1</span>    <span class="token comment">#指数大于0进行指数折半，底数变其平方的操作</span><span class="token keyword">while</span> power <span class="token operator">></span> <span class="token number">0</span><span class="token punctuation">:</span>         <span class="token punctuation">&#123;</span>        <span class="token comment">#指数为奇数，power &amp; 1这相当于power % 2 == 1</span><span class="token keyword">if</span> power <span class="token operator">&amp;</span> <span class="token number">1</span><span class="token punctuation">:</span>          <span class="token comment">#分离出当前项并累乘后保存</span>result <span class="token operator">*=</span> base<span class="token punctuation">;</span>          <span class="token comment">#指数折半,power >>= 1这相当于power /= 2;</span>power <span class="token operator">>></span><span class="token operator">=</span> <span class="token number">1</span><span class="token punctuation">;</span>     <span class="token comment">#底数变其平方</span>base <span class="token operator">*=</span> base<span class="token punctuation">;</span>         <span class="token punctuation">&#125;</span><span class="token keyword">return</span> result<span class="token punctuation">;</span>       <span class="token punctuation">&#125;</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="中国剩余定理">中国剩余定理</h2><p><img src="/post/99f8f561/%E6%95%B0%E5%AD%A63.png" alt></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#联立两个同余方程</span><span class="token keyword">import</span> gmpy2<span class="token keyword">def</span> <span class="token function">shengyu</span><span class="token punctuation">(</span>a1<span class="token punctuation">,</span>a2<span class="token punctuation">,</span>m1<span class="token punctuation">,</span>m2<span class="token punctuation">)</span><span class="token punctuation">:</span>    M<span class="token operator">=</span>m1<span class="token operator">*</span>m2    M1<span class="token operator">=</span>M<span class="token operator">//</span>m1    M2<span class="token operator">=</span>M<span class="token operator">//</span>m2    t1<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>M1<span class="token punctuation">)</span>    t2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>M2<span class="token punctuation">)</span>    x1<span class="token operator">=</span><span class="token punctuation">(</span>a1<span class="token operator">*</span>M1<span class="token operator">*</span>t1<span class="token punctuation">)</span><span class="token operator">%</span>M    x2<span class="token operator">=</span><span class="token punctuation">(</span>a2<span class="token operator">*</span>M2<span class="token operator">*</span>t2<span class="token punctuation">)</span><span class="token operator">%</span>M    <span class="token keyword">return</span> <span class="token punctuation">(</span>x1<span class="token operator">+</span>x2<span class="token punctuation">)</span><span class="token operator">%</span>M<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="拓展欧几里得定理">拓展欧几里得定理</h2><p><img src="/post/99f8f561/%E6%95%B0%E5%AD%A64.png" alt></p><p><img src="/post/99f8f561/%E6%95%B0%E5%AD%A65.png" alt="数学5"></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">def</span> <span class="token function">ext_gcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span> <span class="token comment">#扩展欧几里得算法</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> gcd <span class="token operator">=</span> ext_gcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span> <span class="token comment">#递归直至余数等于0(需多递归一层用来判断)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">)</span>         <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> gcd<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h2 id="求乘法逆元">求乘法逆元</h2><h3 id="1-费马定理">1.费马定理</h3><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>1</mn><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a^{(p-1)}\equiv 1 ( mod p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">1</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p><p>前提：a是不能被指数整除的正整数</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mo>∗</mo><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">a*a^{(p-2)}\equiv 1(mod p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46528em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">∗</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p><p>所以a的逆元是</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><msup><mi>a</mi><mrow><mo stretchy="false">(</mo><mi>p</mi><mo>−</mo><mn>2</mn><mo stretchy="false">)</mo></mrow></msup></mrow><annotation encoding="application/x-tex">a^{(p-2)}</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.938em;vertical-align:0em;"></span><span class="mord"><span class="mord mathdefault">a</span><span class="msupsub"><span class="vlist-t"><span class="vlist-r"><span class="vlist" style="height:0.938em;"><span style="top:-3.113em;margin-right:0.05em;"><span class="pstrut" style="height:2.7em;"></span><span class="sizing reset-size6 size3 mtight"><span class="mord mtight"><span class="mopen mtight">(</span><span class="mord mathdefault mtight">p</span><span class="mbin mtight">−</span><span class="mord mtight">2</span><span class="mclose mtight">)</span></span></span></span></span></span></span></span></span></span></span></span></span></p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment">#费马求a关于b的逆元</span><span class="token keyword">def</span> <span class="token function">niyuan</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    ret<span class="token operator">=</span><span class="token number">1</span>    b<span class="token operator">=</span>p<span class="token operator">-</span><span class="token number">2</span>    <span class="token keyword">while</span> b<span class="token punctuation">:</span>        <span class="token keyword">if</span> b<span class="token operator">&amp;</span><span class="token number">1</span><span class="token punctuation">:</span>            ret<span class="token operator">=</span><span class="token punctuation">(</span>ret<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>p        a<span class="token operator">=</span><span class="token punctuation">(</span>a<span class="token operator">*</span>a<span class="token punctuation">)</span><span class="token operator">%</span>p        b<span class="token operator">>></span><span class="token operator">=</span><span class="token number">1</span>    <span class="token keyword">return</span> ret<span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h3 id="2-拓展欧几里得">2.拓展欧几里得</h3><p>拓展欧几里得用于求出关于x,y的方程的一组整数解</p><p>当gcd(a,b)=1时，有</p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mi>a</mi><mi>x</mi><mo>≡</mo><mn>1</mn><mo stretchy="false">(</mo><mi>m</mi><mi>o</mi><mi>d</mi><mi>p</mi><mo stretchy="false">)</mo></mrow><annotation encoding="application/x-tex">ax\equiv1 (mod p)</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.46375em;vertical-align:0em;"></span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:1em;vertical-align:-0.25em;"></span><span class="mord">1</span><span class="mopen">(</span><span class="mord mathdefault">m</span><span class="mord mathdefault">o</span><span class="mord mathdefault">d</span><span class="mord mathdefault">p</span><span class="mclose">)</span></span></span></span></span></p><p class="katex-block"><span class="katex-display"><span class="katex"><span class="katex-mathml"><math xmlns="http://www.w3.org/1998/Math/MathML"><semantics><mrow><mtext>等价于</mtext><mi>a</mi><mi>x</mi><mo>+</mo><mi>k</mi><mi>p</mi><mo>≡</mo><mn>1</mn></mrow><annotation encoding="application/x-tex">等价于 ax+kp\equiv1</annotation></semantics></math></span><span class="katex-html" aria-hidden="true"><span class="base"><span class="strut" style="height:0.76666em;vertical-align:-0.08333em;"></span><span class="mord cjk_fallback">等</span><span class="mord cjk_fallback">价</span><span class="mord cjk_fallback">于</span><span class="mord mathdefault">a</span><span class="mord mathdefault">x</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span><span class="mbin">+</span><span class="mspace" style="margin-right:0.2222222222222222em;"></span></span><span class="base"><span class="strut" style="height:0.8888799999999999em;vertical-align:-0.19444em;"></span><span class="mord mathdefault" style="margin-right:0.03148em;">k</span><span class="mord mathdefault">p</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span><span class="mrel">≡</span><span class="mspace" style="margin-right:0.2777777777777778em;"></span></span><span class="base"><span class="strut" style="height:0.64444em;vertical-align:0em;"></span><span class="mord">1</span></span></span></span></span></p><p>a,p互质</p><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token comment"># 扩展欧几里得求a关于p的逆元</span><span class="token comment">#逆元：a，p需要互质</span><span class="token comment">#拓展欧几里得</span><span class="token keyword">def</span> <span class="token function">exgcd</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span> b<span class="token punctuation">)</span><span class="token punctuation">:</span>    <span class="token keyword">if</span> b <span class="token operator">==</span> <span class="token number">0</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token number">1</span><span class="token punctuation">,</span> <span class="token number">0</span><span class="token punctuation">,</span> a    <span class="token keyword">else</span><span class="token punctuation">:</span>        x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q <span class="token operator">=</span> exgcd<span class="token punctuation">(</span>b<span class="token punctuation">,</span> a <span class="token operator">%</span> b<span class="token punctuation">)</span>        x<span class="token punctuation">,</span> y <span class="token operator">=</span> y<span class="token punctuation">,</span> <span class="token punctuation">(</span>x <span class="token operator">-</span> <span class="token punctuation">(</span>a <span class="token operator">//</span> b<span class="token punctuation">)</span> <span class="token operator">*</span> y<span class="token punctuation">)</span>        <span class="token keyword">return</span> x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q<span class="token keyword">def</span> <span class="token function">ModReverse</span><span class="token punctuation">(</span>a<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token punctuation">:</span>    x<span class="token punctuation">,</span> y<span class="token punctuation">,</span> q <span class="token operator">=</span> exgcd<span class="token punctuation">(</span>a<span class="token punctuation">,</span>p<span class="token punctuation">)</span>    <span class="token keyword">if</span> q <span class="token operator">!=</span> <span class="token number">1</span><span class="token punctuation">:</span>        <span class="token comment">#a,p互质</span>        <span class="token keyword">raise</span> Exception<span class="token punctuation">(</span><span class="token string">"No solution."</span><span class="token punctuation">)</span>    <span class="token keyword">else</span><span class="token punctuation">:</span>        <span class="token keyword">return</span> <span class="token punctuation">(</span>x <span class="token operator">+</span> p<span class="token punctuation">)</span> <span class="token operator">%</span> p <span class="token comment">#防止负数</span><span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre><h1>利用数论解决rabin</h1><h2 id="rabin加密">Rabin加密</h2><p>选取两个素数p,q，两个都同余3模4，p,q作为私钥，N=p*q作为公钥</p><p>ENC:加密一个消息M&lt;n,C=M^2 mod n</p><p>Dec:</p><p><img src="/post/99f8f561/shuxue5.png" alt></p><h2 id="rabin解密">Rabin解密</h2><pre class="line-numbers language-python" data-language="python"><code class="language-python"><span class="token keyword">import</span> gmpy2n <span class="token operator">=</span>p<span class="token operator">=</span>q<span class="token operator">=</span>d <span class="token operator">=</span>e <span class="token operator">=</span><span class="token number">2</span>c <span class="token operator">=</span> c1<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">(</span>p<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span>p<span class="token punctuation">)</span>c2<span class="token operator">=</span><span class="token builtin">pow</span><span class="token punctuation">(</span>c<span class="token punctuation">,</span><span class="token punctuation">(</span>q<span class="token operator">+</span><span class="token number">1</span><span class="token punctuation">)</span><span class="token operator">/</span><span class="token number">4</span><span class="token punctuation">,</span>q<span class="token punctuation">)</span>cp1<span class="token operator">=</span>p<span class="token operator">-</span>c1cp2<span class="token operator">=</span>q<span class="token operator">-</span>c2t1<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>p<span class="token punctuation">,</span>q<span class="token punctuation">)</span><span class="token comment">#p的模q逆元</span>t2<span class="token operator">=</span>gmpy2<span class="token punctuation">.</span>invert<span class="token punctuation">(</span>q<span class="token punctuation">,</span>p<span class="token punctuation">)</span><span class="token comment">#q的模p逆元</span><span class="token comment">#中国剩余定理</span>m1<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token operator">*</span>c1<span class="token operator">*</span>t2<span class="token operator">+</span>p<span class="token operator">*</span>c2<span class="token operator">*</span>t1<span class="token punctuation">)</span><span class="token operator">%</span>nm2<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token operator">*</span>c1<span class="token operator">*</span>t2<span class="token operator">+</span>p<span class="token operator">*</span>cp2<span class="token operator">*</span>t1<span class="token punctuation">)</span><span class="token operator">%</span>n <span class="token comment"># or m2=n-m1</span>m3<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token operator">*</span>cp1<span class="token operator">*</span>t2<span class="token operator">+</span>p<span class="token operator">*</span>c2<span class="token operator">*</span>t1<span class="token punctuation">)</span><span class="token operator">%</span>nm4<span class="token operator">=</span><span class="token punctuation">(</span>q<span class="token operator">*</span>cp1<span class="token operator">*</span>t2<span class="token operator">+</span>p<span class="token operator">*</span>cp2<span class="token operator">*</span>t1<span class="token punctuation">)</span><span class="token operator">%</span>n <span class="token comment"># or m4=n-m3</span><span class="token keyword">for</span> i <span class="token keyword">in</span><span class="token punctuation">(</span>m1<span class="token punctuation">,</span>m2<span class="token punctuation">,</span>m3<span class="token punctuation">,</span>m4<span class="token punctuation">)</span><span class="token punctuation">:</span>    m <span class="token operator">=</span> <span class="token string">'%x'</span> <span class="token operator">%</span> i    <span class="token keyword">if</span> <span class="token builtin">len</span><span class="token punctuation">(</span>m<span class="token punctuation">)</span><span class="token operator">%</span><span class="token number">2</span><span class="token operator">==</span><span class="token number">1</span><span class="token punctuation">:</span>        m<span class="token operator">=</span><span class="token string">'0'</span><span class="token operator">+</span>m     <span class="token keyword">print</span><span class="token punctuation">(</span>m<span class="token punctuation">.</span>decode<span class="token punctuation">(</span><span class="token string">'hex'</span><span class="token punctuation">)</span><span class="token punctuation">)</span>   <span aria-hidden="true" class="line-numbers-rows"><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span><span></span></span></code></pre>]]></content>
      
      
      
        <tags>
            
            <tag> 数论 </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
